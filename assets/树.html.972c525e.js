import{_ as e,o,c,b as n,a as t,d as a,e as s,r as l}from"./app.7eca7f1a.js";var i="/lanjz/assets/tree.c58e2a77.jpg",u="/lanjz/assets/tree_1.dbebe25d.png",r="/lanjz/assets/tree_2.203ed495.png";const k={},d=a('<h1 id="\u4E8C\u53C9\u6811" tabindex="-1"><a class="header-anchor" href="#\u4E8C\u53C9\u6811" aria-hidden="true">#</a> \u4E8C\u53C9\u6811</h1><h2 id="\u524D\u4E2D\u540E\u5E8F\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u524D\u4E2D\u540E\u5E8F\u904D\u5386" aria-hidden="true">#</a> \u524D\u4E2D\u540E\u5E8F\u904D\u5386</h2><p><img src="'+i+`" alt=""></p><p>\u4EE5\u4E0A\u8FF0\u4E2D\uFF0C\u524D\u4E2D\u540E\u5E8F\u904D\u5386\u987A\u5E8F\u5982\u4E0B\uFF1A</p><p>\u524D\u5E8F\u904D\u5386\uFF08\u4E2D\u5DE6\u53F3\uFF09\uFF1A5 4 1 2 6 7 8<br> \u4E2D\u5E8F\u904D\u5386\uFF08\u5DE6\u4E2D\u53F3\uFF09\uFF1A1 4 2 5 7 6 8<br> \u540E\u5E8F\u904D\u5386\uFF08\u5DE6\u53F3\u4E2D\uFF09\uFF1A1 2 4 7 8 6 5</p><h3 id="\u8FED\u4EE3\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u65B9\u5F0F" aria-hidden="true">#</a> \u8FED\u4EE3\u65B9\u5F0F</h3><p>\u4F7F\u7528\u8FED\u4EE3\u7684\u65B9\u5F0F\u5BF9\u6811\u8FDB\u884C\u524D\u5E8F\u3001\u4E2D\u5E8F\u904D\u5386\u53EF\u4EE5\u4F7F\u7528\u516C\u5F0F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        root <span class="token operator">=</span> pop<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5177\u4F53\u5E94\u7528\u5230\u524D\u5E8F\u3001\u4E2D\u5E8F\u904D\u5386\u65F6\uFF0C\u53EA\u662F\u5BF9\u4FDD\u5B58\u503C\u7684\u4F4D\u7F6E\u4E0D\u4E00\u6837</p><h4 id="\u524D\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u524D\u5E8F" aria-hidden="true">#</a> \u524D\u5E8F</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5957\u516C\u5F0F\u7248</span>
<span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> 
            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u524D\u5E8F\u65F6\u6DFB\u52A0\u503C</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        root <span class="token operator">=</span> pop<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u4E0D\u5957\u516C\u5F0F\u8FED\u4EE3\u7248\u672C</span>
<span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> root <span class="token operator">?</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        pop<span class="token punctuation">.</span>right<span class="token operator">&amp;&amp;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
        pop<span class="token punctuation">.</span>left<span class="token operator">&amp;&amp;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u4E2D\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u5E8F" aria-hidden="true">#</a> \u4E2D\u5E8F</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
            root <span class="token operator">=</span> root<span class="token punctuation">.</span>left
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u4E2D\u5E8F\u65F6\u6DFB\u52A0\u503C</span>
        root <span class="token operator">=</span> pop<span class="token punctuation">.</span>right
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u540E\u5E8F" tabindex="-1"><a class="header-anchor" href="#\u540E\u5E8F" aria-hidden="true">#</a> \u540E\u5E8F</h4><p>\u540E\u5E8F\u4E5F\u53EF\u4EE5\u4F7F\u7528\u4E0A\u9762\u7684\u516C\u5F0F\uFF0C\u53EA\u662F\u4E0D\u540C\u6709\u4E09\u5904<br> \u8981\u6CE8\u610F\u7684\u4E8B\u8FD9\u79CD\u904D\u5386\u65B9\u5F0F\u53EA\u662F\u8F93\u51FA\u7684\u7ED3\u679C\u770B\u4F3C\u662F\u540E\u5E8F\u7684\uFF0C\u4F46\u5176\u5B9E\u904D\u5386\u7684\u8FC7\u7A0B\u5E76\u4E0D\u7B26\u5408\u540E\u5E8F\u7684\u89C4\u5219</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">var</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token operator">||</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">{</span>
             stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
             res<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u4E0D\u540C\u4E00</span>
             root <span class="token operator">=</span> root<span class="token punctuation">.</span>right  <span class="token comment">// \u4E0D\u540C\u4E8C</span>
         <span class="token punctuation">}</span>
         <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         root <span class="token operator">=</span> pop<span class="token punctuation">.</span>left <span class="token comment">// \u4E0D\u540C\u4E09</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u9012\u5F52\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u9012\u5F52\u65B9\u5F0F" aria-hidden="true">#</a> \u9012\u5F52\u65B9\u5F0F</h3><p>\u4F7F\u7528\u9012\u5F52\u65B9\u9762\u8FDB\u884C\u524D\u4E2D\u540E\u5E8F\u7684\u904D\u5386\u6BD4\u8F83\u7B80\u5355\uFF0C\u5E76\u4E14\u5B9E\u73B0\u90FD\u5DEE\u4E0D\u591A\uFF0C\u516C\u5F0F\u4E3A:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">walk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">walk</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u524D\u5E8F-1" tabindex="-1"><a class="header-anchor" href="#\u524D\u5E8F-1" aria-hidden="true">#</a> \u524D\u5E8F</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">walk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u524D\u5E8F</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">walk</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u4E2D\u5E8F-1" tabindex="-1"><a class="header-anchor" href="#\u4E2D\u5E8F-1" aria-hidden="true">#</a> \u4E2D\u5E8F</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">walk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u4E2D\u5E8F</span>
        <span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">walk</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="\u540E\u5E8F-1" tabindex="-1"><a class="header-anchor" href="#\u540E\u5E8F-1" aria-hidden="true">#</a> \u540E\u5E8F</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">var</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token function-variable function">walk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>
        node<span class="token punctuation">.</span>left<span class="token operator">&amp;&amp;</span><span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
        node<span class="token punctuation">.</span>right<span class="token operator">&amp;&amp;</span><span class="token function">walk</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token comment">// \u540E\u5E8F</span>
    <span class="token punctuation">}</span>
    <span class="token function">walk</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6DF1\u5EA6\u4F18\u5148\u904D\u5386\u548C\u5E7F\u5DDE\u5EA6\u4F18\u5148\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u5EA6\u4F18\u5148\u904D\u5386\u548C\u5E7F\u5DDE\u5EA6\u4F18\u5148\u904D\u5386" aria-hidden="true">#</a> \u6DF1\u5EA6\u4F18\u5148\u904D\u5386\u548C\u5E7F\u5DDE\u5EA6\u4F18\u5148\u904D\u5386</h2><p><strong>\u6DF1\u5EA6\u4F18\u5148\u904D\u5386</strong></p><p>\u6DF1\u5EA6\u4F18\u5148\u904D\u5386DFS\u5C31\u662F\u6811\u7684\u5148\u5E8F\u904D\u5386 \u5047\u8BBE\u521D\u59CB\u72B6\u6001\u662F\u56FE\u4E2D\u6240\u6709\u9876\u70B9\u5747\u672A\u88AB\u8BBF\u95EE\uFF0C\u5219\u4ECE\u67D0\u4E2A\u9876\u70B9v\u51FA\u53D1\uFF0C\u9996\u5148\u8BBF\u95EE\u8BE5\u9876\u70B9\u7136\u540E\u4F9D\u6B21\u4ECE\u5B83\u7684\u5404\u4E2A\u672A\u88AB\u8BBF\u95EE\u7684\u90BB\u63A5\u70B9\u51FA\u53D1\u6DF1\u5EA6\u4F18\u5148\u641C\u7D22\u904D\u5386\u56FE\uFF0C\u76F4\u81F3\u56FE\u4E2D\u6240\u6709\u548Cv\u6709\u8DEF\u5F84\u76F8\u901A\u7684\u9876\u70B9\u90FD\u88AB\u8BBF\u95EE\u5230\u3002\u82E5\u6B64\u65F6\u5C1A\u6709\u5176\u4ED6\u9876\u70B9\u672A\u88AB\u8BBF\u95EE\u5230\uFF0C\u5219\u53E6\u9009\u4E00\u4E2A\u672A\u88AB\u8BBF\u95EE\u7684\u9876\u70B9\u4F5C\u8D77\u59CB\u70B9\uFF0C\u91CD\u590D\u4E0A\u8FF0\u8FC7\u7A0B\uFF0C\u76F4\u81F3\u56FE\u4E2D\u6240\u6709\u9876\u70B9\u90FD\u88AB\u8BBF\u95EE\u5230\u4E3A\u6B62\u3002</p><p>\u6DF1\u5EA6\u904D\u5386\u4E00\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">var</span> <span class="token function-variable function">deepTraversal1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">note<span class="token punctuation">,</span> nodeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nodeList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children
        child<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">deepTraversal1</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> nodeList<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> nodeList
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6DF1\u5EA6\u904D\u5386\u4E8C\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">deepTraversal2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
      <span class="token keyword">let</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nodes <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">deepTraversal2</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nodes
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u975E\u9012\u5F52\u7684\u975E\u6DF1\u5EA6\u904D\u5386\u4E09\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">var</span> <span class="token function-variable function">deepTraversal1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> nodeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> curNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            nodeList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curNode<span class="token punctuation">)</span>
            <span class="token keyword">let</span> child <span class="token operator">=</span>  nodeList<span class="token punctuation">.</span>children
            <span class="token comment">// \u8003\u8651\u5230\u5F80curNode\u6DFB\u52A0\u8282\u70B9\u65F6\uFF0C\u662F\u4F18\u5148\u6DFB\u52A0\u8282\u70B9\u7684\u8282\u70B9\uFF0C\u6240\u4EE5\u8FD9\u91CC\u5012\u7740\u5FAA\u73AF</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> child<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> nodeList
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5E7F\u5EA6\u4F18\u5148\u904D\u5386</strong></p><p>\u5E7F\u5EA6\u4F18\u5148\u904D\u5386 BFS \u4ECE\u56FE\u4E2D\u67D0\u9876\u70B9v\u51FA\u53D1\uFF0C\u5728\u8BBF\u95EE\u4E86v\u4E4B\u540E\u4F9D\u6B21\u8BBF\u95EEv\u7684\u5404\u4E2A\u672A\u66FE\u8BBF\u95EE\u8FC7\u7684\u90BB\u63A5\u70B9\uFF0C\u7136\u540E\u5206\u522B\u4ECE\u8FD9\u4E9B\u90BB\u63A5\u70B9\u51FA\u53D1\u4F9D\u6B21\u8BBF\u95EE\u5B83\u4EEC\u7684\u90BB\u63A5\u70B9\uFF0C\u5E76\u4F7F\u5F97\u201C\u5148\u88AB\u8BBF\u95EE\u7684\u9876\u70B9\u7684\u90BB\u63A5\u70B9\u5148\u4E8E\u540E\u88AB\u8BBF\u95EE\u7684\u9876\u70B9\u7684\u90BB\u63A5\u70B9\u88AB\u8BBF\u95EE\uFF0C\u76F4\u81F3\u56FE\u4E2D\u6240\u6709\u5DF2\u88AB\u8BBF\u95EE\u7684\u9876\u70B9\u7684\u90BB\u63A5\u70B9\u90FD\u88AB\u8BBF\u95EE\u5230\u3002 \u5982\u679C\u6B64\u65F6\u56FE\u4E2D\u5C1A\u6709\u9876\u70B9\u672A\u88AB\u8BBF\u95EE\uFF0C\u5219\u9700\u8981\u53E6\u9009\u4E00\u4E2A\u672A\u66FE\u88AB\u8BBF\u95EE\u8FC7\u7684\u9876\u70B9\u4F5C\u4E3A\u65B0\u7684\u8D77\u59CB\u70B9\uFF0C\u91CD\u590D\u4E0A\u8FF0\u8FC7\u7A0B\uFF0C\u76F4\u81F3\u56FE\u4E2D\u6240\u6709\u9876\u70B9\u90FD\u88AB\u8BBF\u95EE\u5230\u4E3A\u6B62\u3002</p><p>\u6267\u884C\u65B9\u5F0F\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">widthTraversal2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">let</span> children <span class="token operator">=</span> item<span class="token punctuation">.</span>children
      nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nodes
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5176\u5B83\u7B97\u6CD5\u9898" tabindex="-1"><a class="header-anchor" href="#\u5176\u5B83\u7B97\u6CD5\u9898" aria-hidden="true">#</a> \u5176\u5B83\u7B97\u6CD5\u9898</h2>`,40),v={id:"_589-n-\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_589-n-\u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386","aria-hidden":"true"},"#",-1),b=s(),h={href:"https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"},f=s("589. N \u53C9\u6811\u7684\u524D\u5E8F\u904D\u5386"),w=a('<p>\u7ED9\u5B9A\u4E00\u4E2A N \u53C9\u6811\uFF0C\u8FD4\u56DE\u5176\u8282\u70B9\u503C\u7684 \u524D\u5E8F\u904D\u5386 \u3002<br> N \u53C9\u6811 \u5728\u8F93\u5165\u4E2D\u6309\u5C42\u5E8F\u904D\u5386\u8FDB\u884C\u5E8F\u5217\u5316\u8868\u793A\uFF0C\u6BCF\u7EC4\u5B50\u8282\u70B9\u7531\u7A7A\u503C null \u5206\u9694\uFF08\u8BF7\u53C2\u89C1\u793A\u4F8B\uFF09\u3002</p><p>\u8FDB\u9636\uFF1A<br> \u9012\u5F52\u6CD5\u5F88\u7B80\u5355\uFF0C\u4F60\u53EF\u4EE5\u4F7F\u7528\u8FED\u4EE3\u6CD5\u5B8C\u6210\u6B64\u9898\u5417?</p><p>\u793A\u4F8B 1\uFF1A</p><p><img src="'+u+`" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot = [1,null,3,2,4,null,5,6]
\u8F93\u51FA\uFF1A[1,3,5,6,2,4]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>\u793A\u4F8B 2\uFF1A</p><p><img src="`+r+`" alt=""></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Aroot = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
\u8F93\u51FA\uFF1A[1,2,3,6,7,11,14,4,8,12,5,9,13,10]

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u89E3</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * // Definition for a Node.
 * function Node(val, children) <span class="token punctuation">{</span>
 *    this.val = val;
 *    this.children = children;
 * <span class="token punctuation">}</span>;
 */</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Node<span class="token punctuation">}</span></span> <span class="token parameter">root</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">preorder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        <span class="token keyword">let</span> children <span class="token operator">=</span> pop<span class="token punctuation">.</span>children<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> children<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),y={id:"_543-\u4E8C\u53C9\u6811\u7684\u76F4\u5F84",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#_543-\u4E8C\u53C9\u6811\u7684\u76F4\u5F84","aria-hidden":"true"},"#",-1),_=s(),j={href:"https://leetcode-cn.com/problems/diameter-of-binary-tree/",target:"_blank",rel:"noopener noreferrer"},x=s("543. \u4E8C\u53C9\u6811\u7684\u76F4\u5F84"),N=a(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u5B9A\u4E00\u68F5\u4E8C\u53C9\u6811\uFF0C\u4F60\u9700\u8981\u8BA1\u7B97\u5B83\u7684\u76F4\u5F84\u957F\u5EA6\u3002\u4E00\u68F5\u4E8C\u53C9\u6811\u7684\u76F4\u5F84\u957F\u5EA6\u662F\u4EFB\u610F\u4E24\u4E2A\u7ED3\u70B9\u8DEF\u5F84\u957F\u5EA6\u4E2D\u7684\u6700\u5927\u503C\u3002\u8FD9\u6761\u8DEF\u5F84\u53EF\u80FD\u7A7F\u8FC7\u4E5F\u53EF\u80FD\u4E0D\u7A7F\u8FC7\u6839\u7ED3\u70B9\u3002

 

\u793A\u4F8B :
\u7ED9\u5B9A\u4E8C\u53C9\u6811

          1
         / \\
        2   3
       / \\     
      4   5    
\u8FD4\u56DE 3, \u5B83\u7684\u957F\u5EA6\u662F\u8DEF\u5F84 [4,2,1,3] \u6216\u8005 [5,2,1,3]\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u89E3</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u6839\u8282\u70B9\u81EA\u8EAB\u7684\u8DEF\u5F84\u957F\u5EA6</span>
    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">depth</span><span class="token punctuation">(</span><span class="token parameter">rootNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rootNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> <span class="token constant">L</span> <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>rootNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token constant">L</span> <span class="token operator">+</span> <span class="token constant">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u7531\u4E8Edepth\u51FD\u6570\u4E2D\u5DF2\u7ECF\u9ED8\u8BA4\u52A0\u4E0A\u6570\u8282\u70B9\u7684\u81EA\u8EAB\u6839\u8282\u70B9\u8DEF\u5F84\u4E86\uFF0C\u6545\u6B64\u5904\u9700\u51CF1</span>
    <span class="token keyword">return</span> ans <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function T(L,B){const p=l("ExternalLinkIcon");return o(),c("div",null,[d,n("h3",v,[m,b,n("a",h,[f,t(p)])]),w,n("h3",y,[g,_,n("a",j,[x,t(p)])]),N])}var V=e(k,[["render",T],["__file","\u6811.html.vue"]]);export{V as default};
