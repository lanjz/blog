import{_ as e,o as d,c as o,e as c}from"./app-tEWqIxV0.js";const i={},a=c('<h1 id="vsvue" tabindex="-1"><a class="header-anchor" href="#vsvue" aria-hidden="true">#</a> vsVue</h1><h2 id="模板渲染方式的不同" tabindex="-1"><a class="header-anchor" href="#模板渲染方式的不同" aria-hidden="true">#</a> 模板渲染方式的不同</h2><ul><li><p>Vue 模板的编写类似原生的 HTML 语法，一个 Vue组件通过模板+JavaScript+CSS的组合模式呈现（Vue更加注重web开发者的习惯），然后通过使用 Vue 内置很多 API 进行开发，如一些<code>v-model</code>，<code>v-if</code>,<code>v-for</code>,<code>watch</code>,<code>computed</code> 等等</p></li><li><p>React 的特色在于函数式编程的理念，是通过JSX渲染模板，使用JS来创建页面模板，比如插值，条件，循环等，都是通过JS语法实现的，更加纯粹更加原生</p><p>react 中我们 <code>import</code> 的组件在 <code>render</code> 中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 <code>this</code> 上进行一次中转，所以我们 <code>import</code> 一个组件完了之后，还需要在 <code>components</code> 中再声明下，这样显然是很奇怪但又不得不这样的做法</p></li></ul><h2 id="更新机制的区别" tabindex="-1"><a class="header-anchor" href="#更新机制的区别" aria-hidden="true">#</a> 更新机制的区别</h2><p><strong>获取数据更新的手段和更新的粒度不一样</strong></p><ul><li><p>Vue 通过依赖收集，当数据更新时， Vue 明确地知道是哪些数据更新了，每个组件都有自己的渲染 <code>watcher</code> ，掌管当前组件的视图更新，所以可以精确地更新对应的组件，所以更新的粒度是组件级别的，所以为了避免不必要的渲染需要通过 <code>shouldComponentUpdate</code> 这个生命周期方法可以进行控制</p></li><li><p>React 会递归地把所有的子组件 <code>re-render</code> 一下，不管是不是更新的数据，此时，都是新的。然后通过 <code>diff</code> 算法 来决定更新哪部分的视图。所以，React 的更新粒度是一个整体</p></li></ul><p><strong>对更新数据是否需要渲染页面的处理不一样</strong></p><ul><li><p>只有依赖收集的数据发生更新，Vue 才会去重新渲染页面</p></li><li><p>只要数据有更新（ <code>setState</code>，<code>useState</code> 等手段触发更新），都会去重新渲染页面（可以使用 <code>shouldComponentUpdate/ PureComponent</code> 改善）</p></li></ul><h2 id="hoc和mixins" tabindex="-1"><a class="header-anchor" href="#hoc和mixins" aria-hidden="true">#</a> HoC和mixins</h2><ul><li><p>Vue组合不同功能的方式是通过mixin</p></li><li><p>React组合不同功能的方式是通过HoC(高阶组件）</p></li></ul><h2 id="diff算法区别" tabindex="-1"><a class="header-anchor" href="#diff算法区别" aria-hidden="true">#</a> diff算法区别</h2><h3 id="vue2-x-diff" tabindex="-1"><a class="header-anchor" href="#vue2-x-diff" aria-hidden="true">#</a> Vue2.x Diff</h3><p>过程可以概括为：<code>oldCh</code> 和 <code>newCh</code> 各有两个头尾的变量 <code>StartIdx</code> 和 <code>EndIdx</code> ，在一次遍历中，会使用他们做4种比较方式。</p><ol><li><p>新节点的首部节点与旧节点的首部节点是否相同</p></li><li><p>新节点的尾部节点与旧节点的尾部节点是否相同</p></li><li><p>新节点的头部节点与旧节点的尾部节点是否相同： 元素内部发生了位置变化，有个元素跑前面来了</p></li><li><p>新节点的尾部节点与旧节点的着部节点是否相同： 元素内部发生了位置变化，有个元素跑后面去了</p></li><li><p>如果4种比较都没匹配，则尝试通过 <code>key</code> 查找，这里分两种情况</p></li></ol><ul><li><p>如果新节点有 <code>key</code>, 且能匹配到旧节点，则当做添加新节点处理</p></li><li><p>如果新节点有 <code>key</code>, 且能匹配到旧节点，则先通过 <code>sameVnode</code> 方法判断这两个新旧节点是否相同，情况也分两种</p><ul><li><p>如果相同，则 <code>patchVnode</code> 继续对新旧节点做 <code>diff</code> 处理，并且交换位置</p></li><li><p>如果不相同，则当做新节点做处理</p></li></ul></li></ul><h3 id="vue3-x-diff" tabindex="-1"><a class="header-anchor" href="#vue3-x-diff" aria-hidden="true">#</a> Vue3.x Diff</h3><ol><li><p>从前往后遍历新旧子序列找到有相同的节点进行 <code>patch</code> 操作 ，如果发现不同的立即跳出循环</p></li><li><p>从后往前遍历新旧子序列找到有相同的节点进行 <code>patch</code> 操作 ，如果发现不同的立即跳出循环</p></li><li><p>如果旧的节点遍历完，新的节点没有遍历完 ，对于剩下的新节点全部以新增vnode处理</p></li><li><p>如果新的节点遍历完，旧的节点没有遍历完，对于剩下的旧节点进行卸载处理</p></li><li><p>如果 3、4 都不成立继续做进一步处理</p></li><li><p>遍历剩余的新节点，寻找 <code>key</code> 通过 <code>map 结构</code>保存起来</p></li><li><p>遍历剩余旧节点，查找是否存在相同的节点，有的话跟新节点做下映射，用于利用节点使用</p></li><li><p>如果不存在如果卸载旧节点</p></li><li><p>最后对剩余新节点做下遍历，通过前面映射关系，如果可复用的旧节点则进行节点的移动操作否则进行新增节点的操作</p></li></ol><h3 id="rect16-diff" tabindex="-1"><a class="header-anchor" href="#rect16-diff" aria-hidden="true">#</a> Rect16 Diff</h3><p><strong>TextNode</strong></p><p>判断老的 <code>children</code> 中的第一个节点是否也是文字节点，如果是就复用，如果不是就删除全部老的节点，创建新的文字节点</p><p><strong>React.Element</strong></p><p>优先在旧节点链中查找可以复用的节点，。如果没有找到可复用的节点则重新创建节点</p><p><strong>children diff</strong></p><ul><li><p>首先遍历新数组，对相同 <code>index</code> 的新老节点进行对比，通过 <code>updateSlot</code> 方法找到可以复用的节点，直到找到不可以复用的节点就退出循环。</p></li><li><p>首次遍历完之后，就是删除老数组中剩余的老节点，追加剩余的新节点的过程。如果是新节点已遍历完成，就将剩余的老节点批量删除；如果是老节点遍历完成仍有新节点剩余，则将新节点直接插入。</p></li><li><p>上述遍历过程结束后，为了处理元素移动，最后会把所有老数组元素按 <code>key</code> 或 <code>index</code> 放 <code>Map</code> 里，然后再遍历新数组，从中找到复用的老数组元素插入到新数组中，达到移动元素目的。</p></li></ul><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h3><p><strong>相同点</strong></p><ul><li><p>都是两组虚拟 dom 的对比(react16.8之后是 fiber 与虚拟dom的对比)</p></li><li><p>只对同级节点进行对比，简化了算法复杂度</p></li><li><p>都用 <code>key</code> 做为唯一标识，进行查找，只有key和标签类型相同时才会复用老节点</p></li><li><p>遍历前都会根据老的节点构建一个map，方便根据key快速查找</p></li></ul><p><strong>不同点</strong></p><ul><li><p>react 在 Diff 遍历的时候，只对需要修改的节点进行了记录，形成 <code>effect list</code>，最后才会根据 <code>effect list</code> 进行真实 dom的修改，修改时先删除，然后更新与移动，最后插入</p></li><li><p>vue 在遍历的时候就用真实 <code>dominsertBefore</code> 方法，修改了真实 dom，最后做的删除操作</p></li><li><p>react 采用单指针从左向右进行遍历</p></li><li><p>vue 采用双指针，从两头向中间进行遍历</p></li><li><p>react 的 Diff 比较简单，Vue 中做了一些优化处理，相对复杂，但效率更高</p></li></ul><h2 id="vuex和redux的区别" tabindex="-1"><a class="header-anchor" href="#vuex和redux的区别" aria-hidden="true">#</a> Vuex和Redux的区别</h2><p><strong>Redux 的核心概念</strong></p><ul><li><p>action： action默认是同步的 ，或借助中间件实现异步操作，<code>action</code> 不会改变 <code>store</code>，只是描述了怎么改变 <code>store</code></p></li><li><p>reducer: 纯函数，根据 <code>action</code> 更新出新的 store</p></li><li><p>store：单一数据源</p></li></ul><h3 id="vuex-的核心概念" tabindex="-1"><a class="header-anchor" href="#vuex-的核心概念" aria-hidden="true">#</a> Vuex 的核心概念</h3><ul><li><p>mutation：用于同步操作直接修改 state</p></li><li><p>action：可用于异步操作，再通过提交 <code>mutation</code> 进行 <code>store</code> 的更新</p></li><li><p>store：单一数据源</p></li></ul><p><strong>使用区别</strong></p><ul><li><p>在 Vuex 中，<code>$store</code> 被直接注入到了组件实例中，因此可以比较灵活的使用：使用 <code>dispatch</code>、<code>commit</code> 提交更新，通过 <code>mapState</code> 或者直接通过 <code>this.$store</code> 来读取数据</p></li><li><p>在 Redux 中，通常需要借助 <code>connect</code> 来获取 Action 生成 <code>Action Creators</code> ， 同时将 <code>Action Creators</code> 传递给子组件，所以子组件不需要直接使用 <code>dispatch</code> 方法，而是直接调用该方法即可触发 <code>Action</code></p></li></ul><p>另外Vuex更加灵活一些，组件中既可以 <code>dispatch action</code>，也可以 <code>commit updates</code>，而Redux中只能进行 <code>dispatch</code>，不能直接调用 <code>reducer</code>进行修改。</p><p><strong>实现原理</strong></p><p>Redux使用的是不可变数据，而Vuex的数据是可变的</p><ul><li><p>Redux每次都是用 <code>新state</code> 替换 <code>旧state</code> ，Redux在检测数据变化的时候，是通过diff的方式比较差异的</p></li><li><p>Vuex是对需要修改的属性进行直接修改，而Vuex其实和Vue的原理一样，是通过 <code>getter/setter</code> 来比较的</p></li></ul><h3 id="处理异步操作" tabindex="-1"><a class="header-anchor" href="#处理异步操作" aria-hidden="true">#</a> 处理异步操作</h3><p>Redux 得益于 中间件机制，利用 <code>redux-thunk</code>， <code>redux-thunk</code> 可以 <code>dispatch</code> 函数，这个函数用于生成 <code>action</code>，所以在这个函数里面我们可以进行异步操作，等异步的结果出来后再放在 <code>action</code> 里面将这个 <code>action</code> 用 <code>dispatch</code> 分发出去, 而这个函数被叫做 “action creator”</p><p>而 Vuex 是用 <code>mutation</code> 来对应 Redux 的 <code>action</code>，另外 Vuex 又创造了一个 <code>action</code> 来提交 <code>mutation</code> 并通过异步提交 <code>mutation</code> 来实现异步操作结果能够到达 <code>state</code></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>React更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue 更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用 React，小型项目用 Vue 的感觉</p>',45),t=[a];function p(l,r){return d(),o("div",null,t)}const u=e(i,[["render",p],["__file","vsVue.html.vue"]]);export{u as default};
