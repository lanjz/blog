import{_ as p,r as o,o as t,c,b as n,d as a,a as e,e as i}from"./app-QMonxybV.js";const l={},r=i(`<h1 id="library" tabindex="-1"><a class="header-anchor" href="#library" aria-hidden="true">#</a> library</h1><p>平时很少用到 <code>library</code> 配置，这个配置的使用场景一般用于开发库的时候</p><p>回想一下，当我们引入别人开发的类库时有几种方式？下面假设我们引入一个 <code>demo</code> 方法：</p><p><strong>传统方式：script标签</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;demo.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个需要 <code>demo.js</code> 中全局定义 <code>demo</code> 方法</p><p><strong>commonjs 方式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> demo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个需要 <code>demo.js</code> 实现 <code>module.exports = { demo: Function }</code></p><p><strong>ES6 module</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> demo <span class="token keyword">from</span> <span class="token string">&#39;demo&#39;</span><span class="token punctuation">;</span>

<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个需要 <code>demo.js</code> 实现 <code>export.default = Function</code></p><p>如果不用 <code>library</code> 我们可能需要一一实现上面几种导出方法，所以使用 <code>library</code> 就可以自动帮我们处理这些事件</p><p>先来一个没用 <code>library</code> 的简单的 Demo</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/index.js</span>
<span class="token keyword">function</span> <span class="token function">doDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">doDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// webpack.confing.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;demo.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;demo&#39;</span>
<span class="token keyword">typeof</span> doDemo <span class="token comment">// &quot;undefined&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包运行过控制台将输出 <code>demo</code>，但是此时模块外并没有 <code>doDemo</code> 方法，接下来就是利用 <code>library</code> 暴露 <code>deDemo</code> 方法</p><h2 id="library使用" tabindex="-1"><a class="header-anchor" href="#library使用" aria-hidden="true">#</a> library使用</h2><p>使用 <code>library</code> 需要与 <code>libraryTarget</code> 同时使用</p><ul><li><p><code>library</code>： 暴露出去的模块名字</p></li><li><p><code>libraryTarget</code>: 暴露方式，可选项有：</p><ul><li><p>var：作为一个全局变量，那么就可以通过 script 标签来访问，默认值为 <code>var</code></p></li><li><p>this：通过 this 对象访问</p></li><li><p>window：在浏览器中通过 window 对象访问</p></li><li><p>umd：通过 AMD 或 CommonJS require 形式访问</p></li></ul></li></ul><p>修改 <code>webpack.config.js</code> 配置</p><p><strong>var</strong></p><p>先试一下 <code>libraryTarget: var</code> 的效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;development&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;demo.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;doDemoLib&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 暴露出去的名字，随便取</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;var&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后运行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>demo
<span class="token keyword">typeof</span> doDemoLib <span class="token comment">// &quot;object&quot;</span>
doDemoLib <span class="token comment">// {}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时在模块外就多了一个 <code>doDemoLib</code> 对象，但是这个对象并没有我们定义的 <code>deDemo</code> 方法，因为我们没有将 <code>deDemo</code> 导出，继续修改</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>demo
<span class="token keyword">typeof</span> doDemoLib <span class="token comment">// &quot;object&quot;</span>
doDemoLib <span class="token comment">// { doDemo: F}</span>
doDemoLib<span class="token punctuation">.</span><span class="token function">doDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// demo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>this</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;demo.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;doDemoLib&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 暴露出去的名字，随便取</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;this&#39;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>demo
<span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doDemoLib <span class="token comment">// &quot;object&quot;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>doDemoLib <span class="token comment">// { doDemo: F}</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>doDemoLib<span class="token punctuation">.</span><span class="token function">doDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// demo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>doDemoLib</code> 挂载在了 <code>this</code> 对象上，在浏览器中相当于 <code>window</code> 对象了，所以<code>libraryTarget: &#39;window&#39;</code> 也是同理</p><p><strong>umd</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;demo.js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 输出文件的文件</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">&#39;doDemoLib&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 暴露出去的名字，随便取</span>
        <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">&#39;umd&#39;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时打包出来的 <code>demo.js</code> 就可以被其它模块以 AMD 或 CommonJS 形式访问</p><p><strong>不仅如此，使用 <code>umd</code> 打包后的模块也是可以直接以 <code>script</code> 标签引入或者通过 <code>this</code> 直接访问的</strong></p>`,39),d={href:"https://www.xlaoyu.info/2018/01/05/webpack-output-librarytarget/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://v4.webpack.docschina.org/guides/author-libraries/",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const s=o("ExternalLinkIcon");return t(),c("div",null,[r,n("p",null,[n("a",d,[a("详解webpack的out.libraryTarget属性"),e(s)])]),n("p",null,[n("a",u,[a("webpack-创建 library"),e(s)])])])}const g=p(l,[["render",k],["__file","library.html.vue"]]);export{g as default};
