import{_ as e,r as o,o as c,c as i,b as n,d as a,a as p,e as t}from"./app-Ald2FT2K.js";const l="/lanjz/assets/run_1-IatkVcLb.jpeg",u="/lanjz/assets/1-8sK-o_oX.png",d="/lanjz/assets/2--Z3jK9NN.png",r="/lanjz/assets/3-KD0cnyum.png",k="/lanjz/assets/4-cDC2hRfK.png",v="/lanjz/assets/neicun_1-HJhcRuou.png",m="/lanjz/assets/neicun_2-wo8aleWj.png",b={},g=t(`<h1 id="js执行机制" tabindex="-1"><a class="header-anchor" href="#js执行机制" aria-hidden="true">#</a> JS执行机制</h1><p>JS是单线程的但是依靠宿主环境浏览器又可以支持异步执行代码，同步代码与异步代码通过事件循环机制有条不紊的执行，执行每一段代码都会创建一个上下文环境，这个上下文环境中包含了定义的变量，可访问的作用域链，<code>this</code>指针，对于正在执行的代码会将当前上下文推入到执行栈中，执行完之后再从栈中推出后再继续执行栈中剩余的代码。</p><p>先从执行上下文开始，执行上下文包含三大要素：</p><ul><li><p>变量对象</p></li><li><p>作用域</p></li><li><p><code>this</code></p></li></ul><h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h2><p><strong>执行上下文</strong> 就是一段 JavaScript 代码的执行环境，在一段 JS 脚本执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来。变量先暂时赋值为<code>undefined</code>，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。</p><p>有三种类型的代码会创建一新的执行上下文</p><ul><li><p>运行代码主体的全局上下文，也就是说它是为那些存在于JavaScript 函数之外的任何代码而创建的。</p></li><li><p>运行函数内代码的局部上下文，每个函数会在执行代码的时候创建自己的执行上下文，即局部上下文</p></li><li><p>使用 <code>eval()</code> 函数也会创建一个新的执行上下文</p></li></ul><p>每一个上下文在本质上都是一种作用域层级。每个代码段开始执行的时候都会创建一个新的上下文栈来运行它，并且在代码退出的时候销毁掉</p><h3 id="执行上下文的生命周期" tabindex="-1"><a class="header-anchor" href="#执行上下文的生命周期" aria-hidden="true">#</a> 执行上下文的生命周期</h3><p>执行上下文的生命周期包括三个阶段：创建阶段 -&gt; 执行阶段 -&gt; 回收阶段</p><p><strong>创建阶段</strong></p><p>当函数被调用，但未执行任何其内部代码之前，会做以下三件事：</p><ol><li><p>创建变量对象：提升函数声明和变量声明,如果是函数还需要初始化参数<code>arguments</code></p></li><li><p>创建作用域链（Scope Chain）：在上下文的创建阶段，作用域链是在变量对象之后创建的。作用域链用于解析变量。当被要求解析变量时，JavaScript 始终从代码嵌套的最内层开始，如果最内层没有找到变量，就会跳转到上一层父作用域中查找，直到找到该变量。</p></li><li><p>确定this指向：包括多种情况，下文会详细说明</p></li></ol><p><strong>执行阶段</strong></p><p>执行变量赋值、代码执行</p><p><strong>回收阶段</strong></p><p>执行上下文出栈等待虚拟机回收执行上下文</p><p>活动的执行上下文在逻辑上组成一个堆栈。堆栈底部永远都是全局上下文(global context)，而顶部就是当前(活动的)执行上下文。堆栈在EC类型进入和退出上下文的时候被修改（推入或弹出）</p><p>例如，我们可以定义执行上下文堆栈是一个数组：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每次进入<code>function</code> (即使<code>function</code>被递归调用或作为构造函数) 的时候或者内置的<code>eval</code>函数工作的时候，这个堆栈都会被压入</p><p><strong>全局代码</strong></p><p>这种类型的代码是在&quot;程序&quot;级处理的：例如加载外部的js文件或者本地<code>&lt;script&gt;&lt;/script&gt;</code>标签内的代码。全局代码不包括任何<code>function</code>体内的代码</p><p>在初始化（程序启动）阶段，ECStack是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>
  globalContext
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数代码</strong></p><p>当进入<code>funtion</code>函数代码(所有类型的<code>funtions)</code>的时候，<code>ECStack</code>被压入新元素。需要注意的是，具体的函数代码不包括内部函数(inner functions)代码。如下所示，我们使函数自己调自己的方式递归一次：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，<code>ECStack</code>以如下方式被改变：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 第一次foo的激活调用</span>
ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token operator">&lt;</span>foo<span class="token operator">&gt;</span> functionContext
  globalContext
<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token comment">// foo的递归激活调用</span>
ECStack <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token operator">&lt;</span>foo<span class="token operator">&gt;</span> functionContext – recursively
  <span class="token operator">&lt;</span>foo<span class="token operator">&gt;</span> functionContext
  globalContext
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次<code>return</code>的时候，当前执行上下文也就从<code>ECStack</code>弹出,一个抛出的异常如果没被截获的话也有可能从一个或多个执行上下文退出。相关代码执行完以后，<code>ECStack</code>只会包含全局上下文(global context)，一直到整个应用程序结束</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> outputElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> userLanguages <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;Mike&quot;</span><span class="token operator">:</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;Teresa&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">localGreeting</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> greeting<span class="token punctuation">;</span>
    <span class="token keyword">let</span> language <span class="token operator">=</span> userLanguages<span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">switch</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string">&quot;es&quot;</span><span class="token operator">:</span>
        greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">¡Hola, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">&quot;en&quot;</span><span class="token operator">:</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> greeting<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  outputElem<span class="token punctuation">.</span>innerHTML <span class="token operator">+=</span> <span class="token function">localGreeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br&gt;\\r&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token string">&quot;Mike&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token string">&quot;Teresa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token string">&quot;Veronica&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>程序开始运行时，全局上下文就会被创建好</p><ul><li><p>当执行到 <code>greetUser(&quot;Mike&quot;)</code> 的时候会为 <code>greetUser()</code> 函数创建一个它的上下文。这个执行上下文会被推入执行上下文栈中</p><ul><li><p>当 <code>greetUser()</code> 调用 <code>localGreeting()</code>的时候会为该方法创建一个新的上下文</p></li><li><p>当<code>localGreeting()</code>函数执行完之后就会将它的上下文从执行栈中弹出并销毁。程序会从栈中获取下一个上下文并恢复执行, 也就是从 <code>greetUser()</code> 剩下的部分开始执行</p></li></ul></li><li><p>当<code>greetUser()</code> 执行完毕后，其上下文也从执行栈中弹出并销毁</p></li><li><p>之后执行<code>greetUser(&quot;Teresa&quot;)</code>和<code>greetUser(&quot;Veronica&quot;)</code>方法的时候，也是同上面的步骤</p></li></ul></li><li><p>主程序退出，全局执行上下文从执行栈中弹出。此时栈中所有的上下文都已经弹出，程序执行完毕</p></li></ul><p><strong>递归函数及其上下文</strong></p><p>关于递归函数——即多次调用自身的函数，需要特别注意：每次递归调用自身都会创建一个新的上下文。这使得 JavaScript 运行时能够追踪递归的层级以及从递归中得到的返回值，但这也意味着每次递归都会消耗内存来创建新的上下文</p><h2 id="变量对象" tabindex="-1"><a class="header-anchor" href="#变量对象" aria-hidden="true">#</a> 变量对象</h2><p>变量对象(缩写为VO)是一个与执行上下文相关的特殊对象(抽象概念)，它存储着当前上下文中的以下内容：</p><ul><li><p>变量 (var, 变量声明);</p></li><li><p>函数声明 (FunctionDeclaration, 缩写为FD);</p></li><li><p>函数的形参</p></li></ul><p>以下是使用JS对象的形式来表示一个上下文中的VO</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>activeExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 上下文数据（var, FD, function arguments)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设现在有以下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的变量对象是:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局上下文的变量对象</span>
<span class="token constant">VO</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token operator">&lt;</span>reference to <span class="token keyword">function</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// test函数上下文的变量对象</span>
<span class="token constant">VO</span><span class="token punctuation">(</span>test functionContext<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只有全局上下文的变量对象允许通过<code>VO</code>的属性名称来间接访问(因为在全局上下文里，全局对象自身就是变量对象，稍后会详细介绍)，在其它上下文中是不能直接访问<code>VO</code>对象的，因为它只是内部机制的一个实现</p><h3 id="不同上下文中的变量对象" tabindex="-1"><a class="header-anchor" href="#不同上下文中的变量对象" aria-hidden="true">#</a> 不同上下文中的变量对象</h3><p>执行上下文可分全局上下文和局部上下文（函数上下文），在不同类型的上下文中，变量对象是有差异的</p><p><strong>全局上下文中的变量对象</strong></p><p>全局对象(Global object) 是在进入任何执行上下文之前就已经创建了的对象</p><p>这个对象只存在一份，它的属性在程序中任何地方都可以访问，全局对象的生命周期终止于程序退出那一刻</p><p>全局对象初始创建阶段将<code>Math</code>、<code>String</code>、<code>Date</code>、<code>parseInt</code>等作为自身属性，初始化之后也可以用额外创建的其它对象作为属性（这个属性也可以指向到全局对象自身）。例如在 DOM 中，全局对象的<code>window</code>属性就可以引用全局对象自身</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>global <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">Math</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">...</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">String</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">...</span><span class="token operator">&gt;</span>
  <span class="token operator">...</span>
  <span class="token operator">...</span>
  <span class="token literal-property property">window</span><span class="token operator">:</span> global <span class="token comment">//引用自身</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回到全局上下文中的变量对象——在这里，变量对象就是全局对象自己：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">VO</span><span class="token punctuation">(</span>globalContext<span class="token punctuation">)</span> <span class="token operator">===</span> global<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>基于这个原理，在全局上下文中声明的对象，我们才可以间接通过全局对象的属性来访问它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接访问，在VO(globalContext)里找到：&quot;test&quot;</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 间接通过global访问：global === VO(globalContext): &quot;test&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
 
<span class="token keyword">var</span> aKey <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">[</span>aKey<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 间接通过动态属性名称访问：&quot;test&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数上下文中的变量对象</strong></p><p>在函数执行上下文中，<code>VO</code> 是不能直接访问的，此时由活动对象(activation object,缩写为<code>AO</code>)扮演<code>VO</code>的角色</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">VO</span><span class="token punctuation">(</span>functionContext<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">AO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>活动对象是在进入函数上下文时刻被创建的，它通过函数的<code>arguments</code>属性初始化。<code>arguments</code>属性的值是<code>Arguments</code>对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">arguments</span><span class="token operator">:</span> <span class="token operator">&lt;</span>ArgO<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Arguments对象是活动对象的一个属性，它包括如下属性：</p><ul><li><p><code>callee</code> — 指向当前函数的引用</p></li><li><p><code>length</code> — 真正传递的参数个数</p></li><li><p><code>properties-indexes</code> (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)</p></li></ul><h3 id="变量对象的初始化-变量提升" tabindex="-1"><a class="header-anchor" href="#变量对象的初始化-变量提升" aria-hidden="true">#</a> 变量对象的初始化&amp;&amp;变量提升</h3><p>在处理执行上下文的时候基本有两个阶段</p><ol><li><p>进入执行上下文</p></li><li><p>执行代码</p></li></ol><p>变量对象的修改变化与这两个阶段紧密相关</p><p><strong>进入执行上下文阶段</strong></p><p>当进入执行上下文(代码执行之前)时，VO里已经包含了下列属性</p><ul><li><p>函数的所有形参(如果我们是在函数执行上下文中)</p><p>[参数名]:[参数值], 如果没有传递对应参数的话，那么由名称和undefined值组成的一种变量对象的属性也将被创建</p></li><li><p>所有函数声明(FunctionDeclaration, FD)</p><p>[参数名]:[参数值], 如果变量对象已经存在相同名称的属性，则完全替换这个属性</p></li><li><p>所有变量声明(var, VariableDeclaration)</p><p>[参数名]:[参数值], 如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</p></li></ul><p>让我们看一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">var</span> <span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当进入带有参数<code>10</code>的<code>test函数</code>上下文时，<code>AO</code>表现为如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">AO</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token operator">&lt;</span>reference to FunctionDeclaration <span class="token string">&quot;d&quot;</span><span class="token operator">&gt;</span>
  <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AO</code>里并不包含<code>函数x</code>。这是因为<code>x</code> 是一个函数表达式(FunctionExpression, 缩写为 FE) 而不是函数声明，<strong>函数表达式不会影响<code>VO</code></strong>。 不管怎样，函数<code>_e</code> 同样也是函数表达式，但是就像我们下面将看到的那样，因为它分配给了变量 <code>e</code>，所以它可以通过名称<code>e</code>来访问。 函数声明FunctionDeclaration与函数表达式FunctionExpression 的不同</p><p>这之后，将进入处理上下文代码的第二个阶段 — 执行代码。</p><p><strong>执行代码</strong></p><p>这个周期内，<code>AO/VO</code>已经拥有了属性(不过，并不是所有的属性都有值，大部分属性的值还是系统默认的初始值<code>undefined</code> )</p><p>还是前面那个例子, AO/VO在代码解释期间被修改如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">AO</span><span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token constant">AO</span><span class="token punctuation">[</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>reference to FunctionExpression <span class="token string">&quot;_e&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再次注意，因为<code>FunctionExpression</code> <code>_e</code>保存到了已声明的变量<code>e</code>上，所以它仍然存在于内存中。而<code>FunctionExpression</code> <code>x</code>却不存在于<code>AO/VO</code>中，也就是说如果我们想尝试调用 <code>x</code> 函数，不管在函数定义之前还是之后，都会出现一个错误<code>x is not defined</code>，未保存的函数表达式只有在它自己的定义或递归中才能被调用</p><p>另一个经典例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function</span>
 
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
 
x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么第一个<code>alert(x)</code> 的返回值是<code>function</code>，而且它还是在<code>x</code> 声明之前访问的<code>x</code> 的？为什么不是<code>10</code>或<code>20</code>呢？因为，根据规范<strong>函数声明是在进入上下文时填入的</strong> ,同一周期，在进入上下文的时候还有一个变量声明<code>x</code>，那么正如我们在上一个阶段所说，<strong>变量声明在顺序上跟在函数声明和形式参数声明之后，而且在这个进入上下文阶段，变量声明不会干扰VO中已经存在的同名函数声明或形式参数声明</strong>，因此，在进入上下文时，VO的结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token constant">VO</span><span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>reference to FunctionDeclaration <span class="token string">&quot;x&quot;</span><span class="token operator">&gt;</span>
 
<span class="token comment">// 找到var x = 10;</span>
<span class="token comment">// 如果function &quot;x&quot;没有已经声明的话</span>
<span class="token comment">// 这时候&quot;x&quot;的值应该是undefined</span>
<span class="token comment">// 但是这个case里变量声明没有影响同名的function的值</span>
 
<span class="token constant">VO</span><span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&lt;</span>the value is not disturbed<span class="token punctuation">,</span> still <span class="token keyword">function</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着，在执行代码阶段，VO做如下修改：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">VO</span><span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token constant">VO</span><span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再来一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined,不是b没有声明，而是b的值是undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下面的例子里我们可以再次看到，变量是在进入上下文阶段放入<code>VO</code>中的。(因为，虽然<code>else</code>部分代码永远不会执行，但是不管怎样，变量<code>b</code>仍然存在于VO中)</p><h3 id="变量提升" tabindex="-1"><a class="header-anchor" href="#变量提升" aria-hidden="true">#</a> 变量提升</h3><p>上文也提到了，<strong>变量提升是发生在进入执行上文阶段</strong>，需要注意的点有两个：</p><ol><li><p>如果存在函数声明，则这个变量名的初始值就是这个函数，无论在函数声明之前是否有同名的<code>var</code>变量或者是同名的参数又或者同名的函数</p></li><li><p>对于<code>var</code>声明的变量，不会覆盖这个变量之前的同名变量，如果没有同名的变量会隐式声明一个值为<code>undefined</code>的同名变量</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// &quot;function name(){console.log()}&quot;</span>
    <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">110</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 110</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;lanjz&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// -----------------</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// &quot;undefined&quot;</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">110</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// ---------------</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// &quot;lanjz&quot;</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token number">110</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;lanjz&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于变量" tabindex="-1"><a class="header-anchor" href="#关于变量" aria-hidden="true">#</a> 关于变量</h3><p>通常，各类文章和JavaScript相关的书籍都声称：“不管是使用var关键字(在全局上下文)还是不使用var关键字(在任何地方)，都可以声明一个变量”。请记住，这是错误的概念：</p><p><strong>任何时候，变量只能通过使用var关键字才能声明。</strong></p><p>赋值语句：<code>a = 10;</code>,这仅仅是给全局对象创建了一个新属性(但它不是变量),“不是变量”并不是说它不能被改变，而是指它不符合ECMAScript规范中的变量概念</p><p>它之所以能成为全局对象的属性，完全是因为<code>VO(globalContext) === global</code></p><p>让我们通过下面的实例看看具体的区别吧：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;b&quot; 没有声明</span>
 
b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有根源仍然是VO和进入上下文阶段和代码执行阶段：</p><p>进入上下文阶段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">VO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，因为“b”不是一个变量，所以在这个阶段根本就没有“b”，“b”将只在代码执行阶段才会出现(但是在我们这个例子里，还没有到那就已经出错了)。</p><p>让我们改变一下例子代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, 这个大家都知道，</span>
 
b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 代码执行阶段创建</span>
 
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20, 代码执行阶段修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于变量，还有一个重要的知识点。变量相对于简单属性来说，变量有一个特性<code>(attribute)：{DontDelete}</code>,这个特性的含义就是不能用<code>delete</code>操作符直接删除变量属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">delete</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
 
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">delete</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// still 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个规则在有个上下文里不起走样，那就是<code>eval</code>上下文，变量没有<code>{DontDelete}</code>特性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;var a = 10;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">delete</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,112),f={href:"https://www.cnblogs.com/tomxu/archive/2012/01/16/2309728.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h2><p>当要执行主代码或者函数的时候，会为其创建执行上下文，每个上下文中有自己的变量对象：对于全局上下文，它是全局变量对象自身；对于函数，它是活动对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> 
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> bar<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的变量对象有：全局变量对象<code>VO(global)</code>，<code>foo</code>函数活动对象<code>AO(foo)</code>，<code>bar</code>函数活动对象<code>AO(bar)</code></p><p>作用域链正是内部上下文所有变量对象（包括父变量对象）的列表。此链用来变量查询。即在上面的例子中，<code>bar</code>上下文的作用域链包括<code>AO(bar)</code>、<code>AO(foo)</code>和<code>VO(global)</code></p><p>当查找变量的时候，会先从当前上下文的<strong>变量对象</strong>中查找，如果没有找到，就会从父级执行上下文的<strong>变量对象</strong>中查找，一直找到全局上下文的<strong>变量对象</strong>，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做<strong>作用域链</strong></p><p>作用域链在上下文初始阶段创建的，包含活动对象和这个函数内部的<code>[[scope]]</code>属性。下面我们将更详细的讨论一个函数的<code>[[scope]]</code>属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>activeExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// or AO</span>
    <span class="token keyword">this</span><span class="token operator">:</span> thisValue<span class="token punctuation">,</span>
    <span class="token literal-property property">Scope</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// Scope chain</span>
      <span class="token comment">// 所有变量对象的列表</span>
      <span class="token comment">// for identifiers lookup</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码上的其<code>scope</code>定义如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Scope <span class="token operator">=</span> <span class="token constant">AO</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的<code>[[scope]]</code>是所有父变量对象的层级链，处于当前函数上下文之上，在函数创建时存于其中</p><p>下面通过具体的函数声明到执行来进一步了解<code>Scope</code></p><h3 id="函数生命周期和scope" tabindex="-1"><a class="header-anchor" href="#函数生命周期和scope" aria-hidden="true">#</a> 函数生命周期和Scope</h3><p>函数调用的上下文生命周期分为创建和激活阶段（调用时）</p><p><strong>函数创建</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用<code>foo()</code>时，创建上下文时会为其创建<code>AO</code>对象，作用域和<code>this</code>,这时先不讨论<code>this</code>，那么此时<code>foo</code>的<code>AO</code>如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token keyword">undefined</span>， <span class="token comment">// undefined</span>
  <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span>： <span class="token punctuation">[</span>
    globalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token comment">// === Global</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父作用域<code>[[Scope]]</code>的值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token comment">// === Global</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么整个作用域<code>scope</code>就为：<code>Scope = AO|VO + [[Scope]]</code></p><p><strong>函数激活</strong></p><p>当函数激活时，寻找变量时就会从作用中查找，先从当前<code>AO</code>中查找，如果没有话再从父作用域<code>[[Scope]]</code>中查找，直到最顶端</p><p>我们用一个稍微复杂的例子描述上面讲到的这些</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x <span class="token operator">+</span>  y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析一下上面例子的变量/活动对象，函数的[[scope]]属性以及上下文的作用域链：</p><p>首先全局上下文的变量对象是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>globalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token operator">===</span> Global <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span>
  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token operator">&lt;</span>reference to <span class="token keyword">function</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>foo</code>创建时，<code>foo</code>的[[scope]]属性是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>foo</code>激活时（进入上下文），<code>foo</code>上下文的活动对象是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token operator">&lt;</span>reference to <span class="token keyword">function</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>foo</code>上下文的作用域链为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fooContext<span class="token punctuation">.</span>Scope <span class="token operator">=</span> fooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token operator">+</span> foo<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// i.e.:</span>
 
fooContext<span class="token punctuation">.</span>Scope <span class="token operator">=</span> <span class="token punctuation">[</span>
  fooContext<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span>
  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部函数<code>bar</code>创建时，其<code>[[scope]]</code>为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>bar<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  fooContext<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span>
  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>bar</code>激活时，<code>bar</code>上下文的活动对象为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>barContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bar</code>上下文的作用域链为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>barContext<span class="token punctuation">.</span>Scope <span class="token operator">=</span> barContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token operator">+</span> bar<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment">// i.e.:</span>
 
barContext<span class="token punctuation">.</span>Scope <span class="token operator">=</span> <span class="token punctuation">[</span>
  barContext<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span>
  fooContext<span class="token punctuation">.</span><span class="token constant">AO</span><span class="token punctuation">,</span>
  globalContext<span class="token punctuation">.</span><span class="token constant">VO</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对<code>x</code>、<code>y</code>、<code>z</code>的标识符解析如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">-</span> barContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token comment">// not found</span>
<span class="token operator">--</span> fooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token comment">// not found</span>
<span class="token operator">--</span> globalContext<span class="token punctuation">.</span><span class="token constant">VO</span> <span class="token comment">// found - 10</span>

<span class="token operator">-</span> <span class="token string">&quot;y&quot;</span>
<span class="token operator">--</span> barContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token comment">// not found</span>
<span class="token operator">--</span> fooContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token comment">// found - 20</span>

<span class="token operator">-</span> <span class="token string">&quot;z&quot;</span>
<span class="token operator">--</span> barContext<span class="token punctuation">.</span><span class="token constant">AO</span> <span class="token comment">// found - 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域特征" tabindex="-1"><a class="header-anchor" href="#作用域特征" aria-hidden="true">#</a> 作用域特征</h3><p><code>[[scope]]</code>是所有父变量对象的层级链，处于当前函数上下文之上，在函数创建时存于其中。</p><p>注意这重要的一点－－<strong><code>[[scope]]</code>在函数创建时被存储－－静态（不变的），永远永远，直至函数销毁</strong>。即：函数可以永不调用，但<code>[[scope]]</code>属性已经写入，并存储在函数对象中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, but not 20</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数创建时定义的词法作用域－－变量解析为<code>10</code>，而不是<code>30</code></p><p><strong>通过构造函数创建的函数的[[scope]]</strong></p><p>在上面的例子中，我们看到，在函数创建时获得函数的[[scope]]属性，通过该属性访问到所有父上下文的变量。但是，这个规则有一个重要的例外，它涉及到通过函数构造函数创建的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 
  <span class="token keyword">function</span> <span class="token function">barFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 函数声明</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token keyword">var</span> <span class="token function-variable function">barFE</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 函数表达式</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
  <span class="token keyword">var</span> barFn <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">&#39;alert(x); alert(y);&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token function">barFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 20</span>
  <span class="token function">barFE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 20</span>
  <span class="token function">barFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, &quot;y&quot; is not defined</span>
 
<span class="token punctuation">}</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，通过函数构造函数（Function constructor）创建的函数<code>bar</code>，是不能访问变量<code>y</code>的。但这并不意味着函数<code>barFn</code>没有[[scope]]属性（否则它不能访问到变量<code>x</code>）。问题在于通过函构造函数创建的函数的<code>[[scope]]</code>属性总是唯一的全局对象。考虑到这一点，如通过这种函数创建除全局之外的最上层的上下文闭包是不可能的</p><p><strong>二维作用域链查找</strong></p><p>在作用域链中查找最重要的一点是变量对象的属性（如果有的话）须考虑其中－－源于ECMAScript 的原型特性，如果一个属性在对象中没有直接找到，查询将在原型链中继续。即常说的二维链查找。（1）作用域链环节；（2）每个作用域链－－深入到原型链环节。如果在<code>Object.prototype</code>中定义了属性，我们能看到这种效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>活动对象没有原型，我们可以在下面的例子中看到</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中如果函数<code>bar</code>上下文的AO有一个原型，那么<code>x</code>将在<code>Object.prototype</code> 中被解析,那么将输出<code>10</code></p><h3 id="代码执行时对作用域链的影响" tabindex="-1"><a class="header-anchor" href="#代码执行时对作用域链的影响" aria-hidden="true">#</a> 代码执行时对作用域链的影响</h3><p>在ECMAScript 中，在代码执行阶段有两个声明能修改作用域链。这就是<code>with</code>声明和<code>catch</code>语句。它们添加到作用域链的最前端，对象须在这些声明中出现的标识符中查找。如果发生其中的一个，作用域链简要的作如下修改：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">with</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用域链修改成这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Scope <span class="token operator">=</span> foo <span class="token operator">+</span> <span class="token constant">AO</span><span class="token operator">|</span><span class="token constant">VO</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
 
  <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
<span class="token punctuation">}</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
<span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进入上下文时发生了什么？标识符<code>x</code>和<code>y</code>已被添加到变量对象中。此外，在代码运行阶段作如下修改：</p><ol><li><p>x = 10, y = 10;</p></li><li><p>对象<code>{x:20}</code>添加到作用域的前端</p></li><li><p>在<code>with</code>内部，遇到了<code>var</code>声明，当然什么也没创建，因为在进入上下文时，所有变量已被解析添加</p></li><li><p>在第二步中，仅修改变量<code>x</code>，实际上对象中的<code>x</code>现在被解析，并添加到作用域链的最前端，<code>x</code>为<code>20</code>，变为<code>30</code></p></li><li><p>同样也有变量对象<code>y</code>的修改，被解析后其值也相应的由<code>10</code>变为<code>30</code></p></li><li><p>此外，在<code>with</code>声明完成后，它的特定对象从作用域链中移除（已改变的变量<code>x－－30</code>也从那个对象中移除），即作用域链的结构恢复到<code>with</code>得到加强以前的状态</p></li><li><p>在最后两个<code>alert</code>中，当前变量对象的<code>x</code>保持同一，<code>y</code>的值现在等于<code>30</code>，在<code>with</code>声明运行中已发生改变。</p></li></ol><p>同样，<code>catch</code>语句的异常参数变得可以访问，它创建了只有一个属性的新对象－－异常参数名。图示看起来像这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用域链修改为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> catchObject <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">ex</span><span class="token operator">:</span> <span class="token operator">&lt;</span>exception object<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
Scope <span class="token operator">=</span> catchObject <span class="token operator">+</span> <span class="token constant">AO</span><span class="token operator">|</span><span class="token constant">VO</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>catch</code>语句完成运行之后，作用域链恢复到以前的状态</p><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h3><p>函数可以作为参数传递给其他函数使用 (在这种情况下，函数被称为“funargs”——“functional arguments”)。接收<code>funargs</code>的函数被称之为 高阶函数(<code>higher-order functions</code>) 。其他函数的运行时也会返回函数，这些返回的函数被称为 <code>function valued</code> 函数 (有 <code>functional value</code> 的函数)</p><p><strong>闭包的作用域问题：</strong></p><p>当一个函数从其他函数返回到外部的时候，当函数被激活时，上下文的作用域链表现为激活对象与[[Scope]]属性的组合</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Scope chain <span class="token operator">=</span> Activation object <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span>
作用域链 <span class="token operator">=</span> 活动对象 <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Scope<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>EMCAScript使用静态作用域，即作用域是在函数创建产生，且不会被改变</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// &quot;foo&quot;返回的也是一个function</span>
<span class="token comment">// 并且这个返回的function可以随意使用内部的变量x</span>
 
<span class="token keyword">var</span> returnedFunction <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 全局变量 &quot;x&quot;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 
<span class="token comment">// 支持返回的function</span>
<span class="token function">returnedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果是10而不是20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 全局变量 &quot;x&quot;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token comment">// 全局function</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">funArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
  <span class="token comment">// 局部变量 &quot;x&quot;</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
 
  <span class="token comment">// 这不会有歧义</span>
  <span class="token comment">// 因为我们使用&quot;foo&quot;函数的[[Scope]]里保存的全局变量&quot;x&quot;,</span>
  <span class="token comment">// 并不是caller作用域的&quot;x&quot;</span>
 
  <span class="token function">funArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 而不是20</span>
 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将foo作为一个&quot;funarg&quot;传递下去</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个很重要的点，几个函数可能含有相同的父级作用域（这是一个很普遍的情况，例如有好几个内部或者全局的函数）。在这种情况下，在<code>[[Scope]]</code>中存在的变量是会共享的。一个闭包中变量的变化，也会影响另一个闭包的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">++</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">--</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">var</span> closures <span class="token operator">=</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  closures<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 2</span>
  closures<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在某个循环中创建多个函数时，上图会引发一个困惑。如果在创建的函数中使用循环变量(如”k”)，那么所有的函数都使用同样的循环变量，导致一些程序员经常会得不到预期值。现在清楚为什么会产生如此问题了——因为所有函数共享同一个<code>[[Scope]]</code>，其中循环变量为最后一次赋值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, but not 0</span>
data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, but not 1</span>
data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, but not 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一些用以解决这类问题的技术。其中一种技巧是在作用域链中提供一个额外的对象，比如增加一个函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将k当做参数传递进去</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// 结果正确</span>
data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回想一下上文提到的<strong>作用域是在函数创建时被存储的－－静态（不变的）</strong>，根据这点就可以很好得理解闭包所包含的作用域的特性</p><h2 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h2><p><strong><code>this</code>是执行上下文中的一个属性而不是某个变量对象的属性</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>activeExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token constant">VO</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token operator">:</span> thisValue
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>this</code>与上下文中可执行代码的类型有直接关系，<code>this</code>值在进入上下文时确定，并且在上下文运行期间永久不变</p><h3 id="全局代码中的this" tabindex="-1"><a class="header-anchor" href="#全局代码中的this" aria-hidden="true">#</a> 全局代码中的this</h3><p>在全局代码中，<code>this</code>始终是全局对象本身，这样就有可能间接的引用到它了</p><h3 id="函数代码中的this" tabindex="-1"><a class="header-anchor" href="#函数代码中的this" aria-hidden="true">#</a> 函数代码中的this</h3><p>函数代码中的<code>this</code>不是静态绑定到一个函数，因为<code>this</code>是进入上下文中的确定的，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token function-variable function">test</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// this = foo; // 错误，任何时候不能改变this的值</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token comment">// 在进入上下文的时候</span>
<span class="token comment">// this被当成bar对象</span>
 
bar<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 20</span>
 
foo<span class="token punctuation">.</span>test <span class="token operator">=</span> bar<span class="token punctuation">.</span>test<span class="token punctuation">;</span>
 
foo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>this指向</strong></p><p>在通常的函数调用中，<code>this</code>是由激活上下文代码的调用者来提供的，即调用函数的父上下文(parent context )。<strong><code>this</code>取决于调用函数的方式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo, true</span>
 
<span class="token keyword">var</span> exampleFunc <span class="token operator">=</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">;</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>exampleFunc <span class="token operator">===</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
 
<span class="token comment">// 再一次，同一个function的不同的调用表达式，this是不同的</span>
 
<span class="token function">exampleFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global, false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使是正常的全局函数也会被调用方式的不同形式激活，这些不同的调用方式导致<code>this</code>值也不同。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global</span>
 
<span class="token function">alert</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
 
<span class="token comment">// 但是同一个function的不同的调用表达式，this是不同的</span>
 
foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo.prototype</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个函数上下文中确定<code>this</code>值的通用规则如下:</p><p>一个函数上下文中，<code>this</code>由调用者提供，由调用函数的方式来决定。如果调用括号<code>()</code>的左边是引用类型的值，<code>this</code>将设为引用类型值的所属对象，在其他情况下（与引用类型不同的任何其它属性），这个值为全局</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

foo<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  foo</span>
<span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// foo</span>

<span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>
<span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>
<span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// window</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>第一个例子很明显———明显的引用类型，结果<code>this</code>指向<code>foo</code></p></li><li><p>在第二个例子中，括号中仍是一个引用类型。所以<code>this</code>值还是指向<code>foo</code></p></li><li><p>第三个例子中，括号中的赋值运算符执行之后返回的结果是函数对象（但不是引用类型），这意味着<code>this</code>指向全局</p></li><li><p>第四个和第五个也是一样——逗号运算符和逻辑运算符（OR）失去了引用而得到了函数,<code>this</code>指向全局</p></li></ol><p><strong><code>this</code>指向总结</strong>：</p><ul><li><p><code>this</code>总是指向直接调用它的对象，如果没有对象调用则指向全局<code>window</code></p></li><li><p>对于构造函数来说（<code>new</code>命令），<code>this</code>指向的是构造函数实例对象</p></li><li><p><code>this</code>是不能通过<code>=</code>运算符直接修改的，但可以使用<code>call</code>，<code>apply</code>，<code>bind</code>可以改变函数<code>this</code>指向</p></li><li><p>对于箭头函数来说，<code>this</code>继承箭头函数外层的函数，如果没有外层函数则指向全局<code>window</code></p></li></ul><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><p>事件循环负责不断得收集事件任务（包括用户事件以及其他非用户事件等），然后对任务进行排队并在合适的时候执行这些事件回调</p><p>根据规范，事件循环是通过任务队列的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；每个任务都有一个任务源(task source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。 <code>setTimeout/Promise</code> 等API便是任务源，而进入任务队列的是他们指定的具体执行任务</p><p>在一次循环中始终以一个宏任务开始（如果有的话），待执行上下文栈为空时将执行微任务队列中的任务，待任务队列中的任务清空后，将进入渲染进程，经历渲染步骤之后，一个事件循环结束，然后继续下一次循环</p><p><code>macrotask-&gt;microtast-&gt;渲染-&gt;macrotask-&gt;microtast-&gt;渲染-&gt;...</code></p><p>这就可以解释平时工作中为了让某段代码能正确访问到 DOM，然后故意放在<code>setTimeout</code>中执行，目的就是为了先完成 DOM 渲染</p><h3 id="tick" tabindex="-1"><a class="header-anchor" href="#tick" aria-hidden="true">#</a> Tick</h3><p>在事件循环中，每进行一次循环操作称为 <code>tick</code>，每一次 <code>tick </code>的任务处理模型是比较复杂的，但关键步骤如下：</p><ul><li><p>执行一个宏任务（执行栈中没有就从事件队列中获取）</p></li><li><p>执行过程中如果遇到异步任务并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务</p><ul><li>异步导任务完成后，异步的结果将添加到任务队列</li></ul></li><li><p>主线程处于闲置状态时，主线程会去查找任务队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件， 并把这个事件对应的回调放入执行栈中（依次执行）</p></li><li><p>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</p></li><li><p>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</p></li></ul><p>流程图如下：</p><p><img src="https://camo.githubusercontent.com/47479c8773d91e8eef4a359eca57bb1361183b9e/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643661353238626461662e6a7067" alt=""></p><p><img src="https://camo.githubusercontent.com/dd47eccb5d9f224f911f0a1cbdf3fb5c9f3fa24a/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643764383530353663372e706e67" alt=""></p><h3 id="任务源" tabindex="-1"><a class="header-anchor" href="#任务源" aria-hidden="true">#</a> 任务源</h3><p>事件循环收集到的事件任务分两种，放入宏任务列中的是宏任务，放入到微任务队列当中是微任务</p><p><strong>属于宏任务（macrotask）的任务源有：</strong></p><ul><li><p><code>script</code>标签内的代码</p></li><li><p>整体代码</p></li><li><p><code>setTimeout</code>，<code>setInterval</code>，<code>setImmediate</code>（服务端 API）</p></li><li><p><code>I/O</code>（服务端 API）</p></li><li><p>可拓展至 Web API</p><ul><li><p>DOM 操作</p></li><li><p>网络任务</p></li><li><p>Ajax 请求</p></li><li><p><code>history traversal</code></p></li><li><p><code>history.back()</code></p></li><li><p>用户交互</p></li><li><p>requestAnimationFrame</p></li><li><p>其中包括常见 <code>DOM2</code>（addEventListener）和 <code>DOM0</code>（onHandle）级事件监听回调函数。如 <code>click</code> 事件回调函数等</p></li></ul><p>事件需要冒泡到 document 对象之后并且事件回调执行完成后，才算该宏任务执行完成</p></li><li><p>UI <code>rendering</code></p></li></ul><p><strong>属于微任务（microtask）的任务源有</strong></p><ul><li><p><code>process.nextTick</code>（Node.js）</p></li><li><p><code>Promise</code> 原型方法（即 <code>then</code>、<code>catch</code>、<code>finally</code>）中被调用的回调函数</p></li><li><p>使用<code>queueMicrotask()</code>方法创建方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">queueMicrotask</span><span class="token punctuation">(</span>fn1<span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// fn1将会放在微任务队列中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>MutationObserver</code>（一个可以监听DOM结构变化的接口）</p></li><li><p>用于监听节点是否发生变化</p></li><li><p><code>Object.observe</code>(已废弃)</p></li></ul><p>特别注明：在 ECMAScript 中称 <code>microtask</code> 为 <code>jobs</code></p><p><strong>宏任务 vs 微任务</strong></p><ul><li><p>事件循环首次执行的就是宏任务，且一个宠任务结束到下一个宏任务执行前会做两个事情</p><ul><li><p>如果微任务队列有任务，则执行队列中的微任务</p></li><li><p>如果微任务队列中没有任务或者所有微任务执行完成，则进行DOM渲染</p></li><li><p>然后执行下一个宏任务</p></li></ul></li><li><p>当执行微任务队列中的任务时，只有微任务队列执行完了才退中微任务的执行，包括中途有微任务加入。换句话说，微任务可以添加新的微任务到队列中，并在下一个任务开始执行之前且当前事件循环结束之前执行完所有的微任务</p></li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// script</span>
<span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am from script beginning&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 该匿名函数称为匿名函数a</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am from setTimeout&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

<span class="token comment">// 3</span>
<span class="token keyword">const</span> ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am from internal part&#39;</span><span class="token punctuation">)</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 4</span>
ins
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am from 1st ins.then()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am from 2nd ins.then()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I am from script bottom&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上整个代码段即是宏任务，它的任务源是 <code>script</code></p><ol><li><p>整个代码段 <code>script</code> 进入执行上下文栈（亦称调用栈），执行 1 处代码调用 <code>console.log</code> 函数，该函数进入调用栈，之前 <code>script</code> 执行上下文执行暂停（冻结），转交执行权给 <code>console.log</code>。<code>console.log</code>成为当前执行栈中的活动执行上下文（running execution context）。<code>console.log</code> 执行完成立即弹出调用栈，<code>script</code> 恢复执行</p></li><li><p><code>setTimeout</code> 是一个任务分发器，该函数本身会立即执行，延迟执行的是其中传入的参数（匿名函数 <code>a</code>）。<code>script</code> 暂停执行，内部建立一个 1 秒计时器。<code>script</code> 恢复执行接下来的代码。1 秒后，再将匿名函数 <code>a</code> 插入宏任务队列（根据宏任务队列是否有之前加入的宏任务，可能不会立即执行）</p></li><li><p>声明变量 <code>ins</code>，并初始化为 <code>Promise</code> 实例。需要注意的<code>Promise</code> 内部代码是同步的意味着会在本轮事件循环立即执行。那么此时， <code>script</code> 冻结，开始执行 <code>console.log</code>，<code>console.log</code>执行结束后弹出调用栈，<code>resolve()</code> 进入调用栈，将 <code>Promise</code> 状态 <code>resolved</code>，并之后弹出调用栈，此时恢复 <code>script</code> 执行</p><p>因为上面完成了 <code>resolved</code> ，将调用 <code>ins</code> 的 <code>then </code>方法，将第一个 <code>then</code> 中回调添加到 微任务队列，继续执行，将第二个 <code>then</code> 中回调添加到 微任务队列</p></li><li><p>恢复 <code>script</code> 执行后将<code>console.log(&#39;I am from script bottom&#39;)</code>压入栈，执行完后弹出,继续恢复 <code>script</code> 执行</p></li><li><p><code>script</code> 宏任务执行完成，弹出执行上下文栈。此时，微任务队列中有两个 <code>then</code> 加入的回调函数等待执行。另外，若距 2 超过 1 秒钟，那么宏任务队列中有一个匿名函数 <code>a</code> 等待执行，否则，此时宏任务队列为空</p></li><li><p>在当前宏任务执行完成并弹出调用栈后，开始清空因宏任务执行而产生的微任务队列。首先执行 <code>console.log(&#39;I am from 1st ins.then()&#39;)</code>，之后执行<code>console.log(&#39;I am from 2nd ins.then()&#39;)</code></p></li><li><p>微任务队列清空后，开始调用下一宏任务（即进入下一个事件循环）或等待下一宏任务加入任务队列。此时，在 2 中如果计时超过 1 秒后，将匿名函数 <code>a</code> 加入至宏任务队列，此时，因之前宏任务 <code>script</code> 执行完成而清空，那么将匿名函数 <code>a</code> 加入调用栈执行，输出 <code>I am from setTimeout</code></p></li></ol><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>I am from script beginning
I am from internal part
I am from script bottom
I am from 1st ins.then()
I am from 2nd ins.then()
I am from setTimeout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例总结：</p><ol><li><p>在一个代码段（或理解为一个模块）中，所有的代码都是基于一个 <code>script</code> 宏任务进行的</p></li><li><p>在当前宏任务执行完成后，必须要清空因执行宏任务而产生的微任务队列</p></li><li><p>只有当前微任务队列清空后，才会调用下一个宏任务队列中的任务。即进入下一个事件循环</p></li><li><p><code>new Promise</code> 时，<code>Promise</code> 参数中的匿名函数是立即执行的。被添加进微任务队列的是 <code>then</code> 中的回调函数</p></li><li><p><code>setTimeout</code> 是作为任务分发器的存在，他自身执行会创建一个计时器，只有待计时器结束后，才会将 <code>setTimeout</code> 中的第一参数函数添加至宏任务队列。换一种方式理解，<code>setTimeout</code> 中的函数一定不是在当前事件循环中被调用</p></li></ol><p><img src="`+l+`" alt=""></p><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><p><strong>为什么 <code>setTimeout</code>，HTTP请求，事件等是可以异步的</strong></p><p>JS是单线程的，但是浏览器是多进程，多线程的，这些异步任务其实是交由给这浏览器其它线程处理的</p><ul><li><p>定时触发器线程： 处理定时计数器，<code>setTimeout</code>或<code>setInterval</code></p></li><li><p>事件触发线程: 一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理</p></li><li><p><code>http</code>请求线程: 在<code>XMLHttpRequest</code>在连接后是通过浏览器新开一个线程请求</p></li></ul><p><strong>await后是宏任务还是微任务</strong></p><p>于因为<code>async await</code> 本身就是<code>promise+generator</code>的语法糖。所以<code>await</code>后面的代码是<code>microtask</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>写出这段代码输出顺序</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//请写出输出内容</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// script start</span>
<span class="token comment">// async1 start</span>
<span class="token comment">// async2</span>
<span class="token comment">// promise1</span>
<span class="token comment">// script end</span>
<span class="token comment">// async1 end</span>
<span class="token comment">// promise2</span>
<span class="token comment">// setTimeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>过程解析：</p><p>以上就本道题涉及到的所有相关知识点了，下面我们再回到这道题来一步一步看看怎么回事儿。</p><p>首先，事件循环从宏任务(macrotask)队列开始，这个时候，宏任务队列中，只有一个script(整体代码)任务；当遇到任务源(task source)时，则会先分发任务到对应的任务队列中去。所以，上面例子的第一步执行如下图所示：</p><p><img src="`+u+'" alt=""></p><p>然后我们看到首先定义了两个<code>async</code>函数，接着往下看，然后遇到了 <code>console</code> 语句，直接输出 <code>script start</code>。输出之后，<code>script</code> 任务继续往下执行，遇到 <code>setTimeout</code>，其作为一个宏任务源，则会先将其任务分发到对应的队列中：</p><p><img src="'+d+'" alt=""></p><p><code>script</code> 任务继续往下执行，执行了<code>async1()</code>函数，前面讲过<code>async</code>函数中在<code>await</code>之前的代码是立即执行的，所以会立即输出<code>async1 start</code></p><p>遇到了<code>await</code>时，会将<code>await</code>后面的表达式执行一遍，所以就紧接着输出<code>async2</code>，然后将<code>await</code>后面的代码也就是<code>console.log(&#39;async1 end&#39;)</code>加入到<code>microtask</code>中的<code>Promise</code>队列中，接着跳出<code>async1</code>函数来执行后面的代码。</p><p><img src="'+r+'" alt=""></p><p><code>script</code>任务继续往下执行，遇到<code>Promise</code>实例。由于<code>Promise</code>中的函数是立即执行的，而后续的 <code>.then</code> 则会被分发到 <code>microtask</code> 的 <code>Promise </code>队列中去。所以会先输出 <code>promise1</code>，然后执行 <code>resolve</code>，将 <code>promise2</code> 分配到对应队列。</p><p><img src="'+k+`" alt=""></p><p><code>script</code>任务继续往下执行，最后只有一句输出了 <code>script end</code>，至此，全局任务就执行完毕了。</p><p>根据上述，每次执行完一个宏任务之后，会去检查是否存在 <code>Microtasks</code>；如果有，则执行 <code>Microtasks</code> 直至清空 <code>Microtask Queue</code>。</p><p>因而在<code>script</code>任务执行完毕之后，开始查找清空微任务队列。此时，微任务中， <code>Promise</code> 队列有的两个任务<code>async1 end</code>和<code>promise2</code>，因此按先后顺序输出 <code>async1 end</code>，<code>promise2</code>。当所有的 <code>Microtasks</code> 执行完毕之后，表示第一轮的循环就结束了。</p><p>变式一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//async2做出如下更改：</span>
    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// script start</span>
<span class="token comment">// async1 start</span>
<span class="token comment">// promise1</span>
<span class="token comment">// promise3</span>
<span class="token comment">// script end</span>
<span class="token comment">// promise2</span>
<span class="token comment">// async1 end</span>
<span class="token comment">// promise4</span>
<span class="token comment">// setTimeout</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变式二</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;async1 start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//更改如下：</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout1&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//更改如下：</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout2&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    	 <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2 resolve2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script start&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise1 resolve&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;reject2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;script end&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// promise2</span>
<span class="token comment">// promise2 resolve2</span>
<span class="token comment">// script start</span>
<span class="token comment">// async1 start</span>
<span class="token comment">// promise1</span>
<span class="token comment">// promise1 resolve</span>
<span class="token comment">// script end</span>
<span class="token comment">// reject2</span>
<span class="token comment">// setTimeout3</span>
<span class="token comment">// setTimeout2</span>
<span class="token comment">// setTimeout1</span>
<span class="token comment">// promise3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下面两段代码执行的结果一样，但是两段代码究竟有哪些不同呢？</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;global scope&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;local scope&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;global scope&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">&quot;local scope&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案就是执行上下文栈的变化不一样</p><p>第一段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>checkscope<span class="token operator">&gt;</span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">&gt;</span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一段代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>checkscope<span class="token operator">&gt;</span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ECStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>f<span class="token operator">&gt;</span> functionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
ECStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>判断代码执行结果</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ncaught ReferenceError: a is not defined</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ???</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token punctuation">}</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>setTimeout</code>的延迟时间只是代表了消息被实际加入到队列的最小延迟时间，并不能表示实际的执行时间，具体什么时间执行还得根据这个队列在执行这个消息之前有没有其它消息</p><p><code>Promise</code>中<code>resove()</code>或者<code>reject()</code>后的代码也会立即执行</p></div>`,174),y={href:"https://set.sh/post/180308-event-loop",target:"_blank",rel:"noopener noreferrer"},x={href:"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop",target:"_blank",rel:"noopener noreferrer"},w={href:"http://blog.poetries.top/browser-working-principle/guide/part4/lesson18.html#%E5%BE%AE%E4%BB%BB%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"},j=t(`<h2 id="javascript内存模式" tabindex="-1"><a class="header-anchor" href="#javascript内存模式" aria-hidden="true">#</a> Javascript内存模式</h2><p>JS内存空间分为栈(stack)、堆(heap)、池(一般也会归类为栈中)。 其中栈存放变量，堆存放复杂对象，池存放常量</p><h3 id="基础数据类型与栈内存" tabindex="-1"><a class="header-anchor" href="#基础数据类型与栈内存" aria-hidden="true">#</a> 基础数据类型与栈内存</h3><p>JS中的基础数据类型，这些值都有固定的大小，往往都保存在栈内存中（闭包除外），由系统自动分配存储空间。我们可以直接操作保存在栈内存空间的值，因此基础数据类型都是按值访问，数据在栈内存中的存储与使用方式类似于数据结构中的堆栈数据结构，<strong>遵循后进先出的原则</strong></p><h3 id="引用数据类型与堆内存" tabindex="-1"><a class="header-anchor" href="#引用数据类型与堆内存" aria-hidden="true">#</a> 引用数据类型与堆内存</h3><p>JS的引用数据类型，比如数组<code>Array</code>，它们值的大小是不固定的。引用数据类型的值是保存在堆内存中的对象。JS不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。因此，引用类型的值都是按引用访问的。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个地址，该地址与堆内存的实际值相关联</p><h3 id="javascript-内存生命周期" tabindex="-1"><a class="header-anchor" href="#javascript-内存生命周期" aria-hidden="true">#</a> JavaScript 内存生命周期</h3><p>JS环境中分配的内存一般有如下生命周期：</p><ol><li><p>内存分配：当我们申明变量、函数、对象的时候，系统会自动为他们分配内存</p></li><li><p>内存使用：即读写内存，也就是使用变量、函数等</p></li><li><p>内存回收：使用完毕，由垃圾回收机制自动回收不再使用的内存</p></li></ol><h2 id="javascript-的内存回收机制" tabindex="-1"><a class="header-anchor" href="#javascript-的内存回收机制" aria-hidden="true">#</a> JavaScript 的内存回收机制</h2><p>JavaScript 的内存回收机制原理很简单，就是找出那些不再继续使用的值，然后释放其占用的内存。垃圾收集器会每隔固定的时间段就执行一次释放操作 主要有两种：引用计数垃圾收集和标记-清除算法</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>JS是单线程运行的，所以在进行垃圾回收工作的时候，其它的各种运行逻辑都会被暂停</p></div><h3 id="引用计数垃圾收集" tabindex="-1"><a class="header-anchor" href="#引用计数垃圾收集" aria-hidden="true">#</a> 引用计数垃圾收集</h3><p>这是最初级的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。</p><p>当声明了一个变量并将一个引用类型值赋给该变量时，刚这个值的引用次数就是 1 。如果同一个值又被赋值给另一个变量，则该值的引用次数加 1 。相反，如果引用这个值的变量重新赋值了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> 
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span> 
<span class="token comment">// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o</span>
<span class="token comment">// 很显然，没有一个可以被垃圾收集</span>

<span class="token keyword">var</span> o2 <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// o2变量是第二个对“这个对象”的引用</span>
o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// 现在，“这个对象”只有一个o2变量的引用了，“这个对象”的原始引用o已经没有</span>
<span class="token keyword">var</span> oa <span class="token operator">=</span> o2<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// 引用“这个对象”的a属性</span>
               <span class="token comment">// 现在，“这个对象”有两个引用了，一个是o2，一个是oa</span>
o2 <span class="token operator">=</span> <span class="token string">&quot;yo&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 虽然最初的对象现在已经是零引用了，可以被垃圾回收了</span>
           <span class="token comment">// 但是它的属性a的对象还在被oa引用，所以还不能回收</span>
oa <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// a属性的那个对象现在也是零引用了</span>
           <span class="token comment">// 它可以被垃圾回收了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用计数的缺陷：循环引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  o<span class="token punctuation">.</span>a <span class="token operator">=</span> o2<span class="token punctuation">;</span> <span class="token comment">// o 引用 o2</span>
  o2<span class="token punctuation">.</span>a <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// o2 引用 o</span>

  <span class="token keyword">return</span> <span class="token string">&quot;azerty&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个对象被创建，并互相引用，形成了一个循环。它们被调用之后会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收</p><h3 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法</h3><p>这是当前主流的GC算法，V8 的回收机制就有用到这种方式。从字面上可以知道这种算法分 <strong>标记</strong> 与 <strong>清除</strong> 两个阶段</p><p><strong>标记</strong></p><p>标记就是通过从根(全局对象)位置开始，把能遍历到的内存中的对象标记为活动对象，标记完成之后还没被标记的对象就是非活动对象，这些非活动对象将会被清除</p><p><strong>清除</strong></p><p>清除阶段的遍历过程是从堆的首地址开始，一个个的遍历对象的标志位，将非活动对象清除</p><p>标记清除算法步骤如下：</p><ol><li><p>GC维护一个root列表，root通常是代码中持有引用的全局变量。JS中，window对象就是一例作为root的全局变量。window对象一直存在，所以GC认为它及其所有孩子一直存在（非垃圾）</p></li><li><p>所有root都会被检查并标记为活跃（非垃圾），其所有孩子也被递归检查。能通过root访问到的所有东西都不会被当做垃圾</p></li><li><p>所有没被标记为活跃的内存块都被当做垃圾，GC可以把它们释放掉归还给操作系统</p></li></ol><h3 id="gc复制算法" tabindex="-1"><a class="header-anchor" href="#gc复制算法" aria-hidden="true">#</a> GC复制算法</h3><p>复制算法也叫Scavenge 算法，就是将堆中的所有活动对象复制到另外一个空间，然后原来的空间全部回收掉。这样的好处就是防止出现内存的碎片化，易于随后为程序分配新的空间</p><p>什么内存碎片化？</p><p><img src="`+v+'" alt=""></p><p>如上图所示深色的小方块代表存活对象，白色部分表示待分配的内存，由于堆内存是连续分配的，这样零零散散的空间可能会导致稍微大一点的对象没有办法进行空间分配，这种零散的空间也叫做内存碎片</p><p>Scavenge 算法主要就是解决内存碎片的问题，在进行一顿复制之后，To空间变成了这个样子:</p><p><img src="'+m+`" alt=""></p><h3 id="chrome-v8-的垃圾回收" tabindex="-1"><a class="header-anchor" href="#chrome-v8-的垃圾回收" aria-hidden="true">#</a> Chrome V8 的垃圾回收</h3><p>以 Chrome 浏览器为例，它使用的哪种回收方式呢？</p><p>它使用的是多种回收算法的组合优化，而非某种单一算法。V8 的 GC 算法统称为分代垃圾回收算法，也就是通过记录对象的引用次数，将超过一定引用次数的对象划分为 <strong>老年对象</strong>，剩下的称之为 <strong>新生代对象</strong>，然后分别对他们采用不同到的垃圾回收算法。 <strong>对于新生对象采用复制算法，对于老生对象标记-清除算法，</strong></p><p>那这样划分到底有什么优势呢，我们知道程序中生成的大多数对象其实都是产生之后随即丢弃。以下面代码为例，函数内部生成了对象，在该函数执行完毕，出栈之后，包括函数本身以及它内部的变量都会立刻成为垃圾：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 该函数的执行上下文环境非全局作用域</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么对于这种新生代对象来说，回收就会变得很频繁，如果使用 GC 标记清除算法，那么就意味着每次清除过程需要处理很多的对象，会浪费大量的的时间。于是 V8 对新生代对象采用 GC 复制算法的方式，只需要将活动对象复制出来，然后将整个 From 清空即可，无需再去遍历需要清除的对象，达到优化的目的。</p><p>而针对老年对象则不同，它们都有多个引用，也就意味着它们成为非活动对象的概率较小，也就可以理解为老年对象不会轻易变成垃圾。再进一步也就是老对象产生的垃圾很少，如果采用复制算法的话得不偿失，大量的老年对象被复制来复制去也会增加负担，所以针对老年对象采用的是标记清除法，需要清除的老年对象只是少数，这样标记清除算法会更有优势</p><p>什么样的新生代对象会被晋升为老生代对象？</p><ul><li><p>已经经历过一次 Scavenge 回收。</p></li><li><p>在进行复制算法时空间的内存占用超过25%</p></li></ul><p>晋升过程？</p><p>在默认情况下，V8对新生代对象进行从From到To空间进行复制时，会先检查它的内存地址来判断这个对象是否已经经历过一次Scanvenge回收。如果已经经历过，那么会将该对象从From空间直接复制到老生代空间，如果没有，才会将其复制到To空间</p><h3 id="v8-内存限制" tabindex="-1"><a class="header-anchor" href="#v8-内存限制" aria-hidden="true">#</a> V8 内存限制</h3><p>在其他的后端语言中，如Java/Go, 对于内存的使用没有什么限制，但是JS不一样，V8只能使用系统的一部分内存，具体来说，在64位系统下，V8最多只能分配1.4G, 在 32 位系统中，最多只能分配0.7G。你想想在前端这样的大内存需求其实并不大，但对于后端而言，nodejs 如果遇到一个2G多的文件，那么将无法全部将其读入内存进行各种操作了</p><p>V8 为什么要给它设置内存上限？明明我的机器大几十G的内存，只能让我用这么一点？</p><p>究其根本，是由两个因素所共同决定的，一个是JS单线程的执行机制，另一个是JS垃圾回收机制的限制</p><ul><li><p>首先JS是单线程运行的，这意味着一旦进入到垃圾回收，那么其它的各种运行逻辑都要暂停</p></li><li><p>另一方面垃圾回收其实是非常耗时间的操作</p></li></ul><p>因此为了避免应用性能和响应能力直线下降。因此，V8 做了一个简单粗暴的选择，那就是限制堆内存，也算是一种权衡的手段，因为大部分情况是不会遇到操作几个G内存这样的场景的</p><p>不过，如果你想调整这个内存的限制也不是不行。配置命令如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 这是调整老生代这部分的内存，单位是MB。后面会详细介绍新生代和老生代内存
node --max-old-space-size=2048 xxx.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 这是调整新生代这部分的内存，单位是 KB。
node --max-new-space-size=2048 xxx.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增量标记" tabindex="-1"><a class="header-anchor" href="#增量标记" aria-hidden="true">#</a> 增量标记</h3><p>由于JS的单线程机制，V8 在进行垃圾回收的时候，不可避免地会阻塞业务逻辑的执行，倘若老生代的垃圾回收任务很重，那么耗时会非常可怕，严重影响应用的性能。那这个时候为了避免这样问题，V8 采取了增量标记的方案，即将一口气完成的标记任务分为很多小的部分完成，每做完一个小的部分就”歇”一下，就js应用逻辑执行一会儿，然后再执行下面的部分，如果循环，直到标记阶段完成才进入内存碎片的整理上面来</p>`,56),O={href:"https://libin1991.github.io/2019/11/19/V8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6GC/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.im/post/5b10ba336fb9a01e66164346#heading-2",target:"_blank",rel:"noopener noreferrer"};function S(C,V){const s=o("ExternalLinkIcon");return c(),i("div",null,[g,n("blockquote",null,[n("p",null,[n("a",f,[a("深入理解JavaScript系列（12）：变量对象（Variable Object）"),p(s)])])]),h,n("blockquote",null,[n("p",null,[n("a",y,[a("解析 event loops"),p(s)])])]),n("blockquote",null,[n("p",null,[n("a",x,[a("HTMl event-loop相关文档"),p(s)])])]),n("blockquote",null,[n("p",null,[n("a",w,[a("浏览器工作原理与实践"),p(s)])])]),j,n("p",null,[n("a",O,[a("V8垃圾回收GC"),p(s)])]),n("p",null,[n("a",q,[a("JavaScript 内存机制（前端同学进阶必备）"),p(s)])])])}const A=e(b,[["render",S],["__file","JS核心.html.vue"]]);export{A as default};
