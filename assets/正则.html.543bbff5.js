import{_ as n,o as s,c as a,d as e}from"./app.a61e5c82.js";const t={},p=e(`<h1 id="\u6B63\u5219" tabindex="-1"><a class="header-anchor" href="#\u6B63\u5219" aria-hidden="true">#</a> \u6B63\u5219</h1><h2 id="\u3001-\u3001-\u3001-\u3001-\u7684\u4F7F\u7528\u548C\u533A\u522B" tabindex="-1"><a class="header-anchor" href="#\u3001-\u3001-\u3001-\u3001-\u7684\u4F7F\u7528\u548C\u533A\u522B" aria-hidden="true">#</a> ?=\u3001?&lt;=\u3001?!\u3001?&lt;!\u3001?:\u7684\u4F7F\u7528\u548C\u533A\u522B</h2><p><strong>?=</strong></p><p>\u4F7F\u7528\uFF1A<code>B(?=A)</code> \u67E5\u627E\u53F3\u8FB9\u662FA\u7684B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u67E5\u627E\u6240\u6709\u53F3\u8FB9\u662FA\u7684B\uFF0C\u5E76\u628AB\u6539\u6210C</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">B(?=A)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;BAB&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span> <span class="token comment">// CAB</span>
<span class="token string">&quot;BABABA&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span> <span class="token comment">// CACACA</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>?&lt;=</strong></p><p>\u4F7F\u7528\uFF1A <code>(?&lt;=A)B</code> \u67E5\u627E\u5DE6\u8FB9\u662FA\u7684B</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u67E5\u627E\u6240\u6709\u540E\u9762\u662FA\u7684B\uFF0C\u5E76\u628AB\u6539\u6210C</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=A)B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;BAB&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span> <span class="token comment">// BAC</span>
<span class="token string">&quot;BABABA&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span> <span class="token comment">// BACACA</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>?!</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u67E5\u627E\u6240\u6709\u53F3\u8FB9\u4E0D\u662FA\u7684B\uFF0C\u5E76\u628A\u8FD9\u4E2AB\u6539\u6210C</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">B(?!A)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;BABD&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span> <span class="token comment">// BACD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>?&lt;!</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u67E5\u627E\u6240\u6709\u5DE6\u8FB9\u4E0D\u662FA\u7684B\uFF0C\u5E76\u628A\u8FD9\u4E2AB\u6539\u6210C</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!A)B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;CBADA&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span> <span class="token comment">// CCADA</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>?: \u975E\u6355\u83B7\u5206\u7EC4</strong></p><p>\u5982\u679C\u6B63\u5219\u51FA\u73B0\u7684\u62EC\u53F7\uFF0C\u4F1A\u5BF9\u5339\u914D\u5230\u7684\u62EC\u53F7\u4E2D\u7684\u5185\u5BB9\u5206\u884C\u5206\u7EC4</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">B(D)(F)C</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;BDFC&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// [&quot;BDFC&quot;, &quot;D&quot;, &quot;F&quot;, 0, &quot;BDFC&quot;, callee: \u0192, Symbol(Symbol.iterator): \u0192]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u62EC\u53F7\u4E2D\u9996\u9875\u8DDF\u7740<code>?:</code>\u8868\u793A\u5F53\u524D\u62EC\u53F7\u4E2D\u7684\u5185\u5BB9\u4E0D\u8FDB\u884C\u5206\u7EC4</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">B(?:D)(F)C</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;BDFC&quot;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// [&quot;BDFC&quot;, &quot;F&quot;, 0, &quot;BDFC&quot;, callee: \u0192, Symbol(Symbol.iterator): \u0192]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7C9F\u5B50" tabindex="-1"><a class="header-anchor" href="#\u7C9F\u5B50" aria-hidden="true">#</a> \u7C9F\u5B50</h2><p><strong>\u5339\u914D\u4ECEA\u5F00\u5934B\u7ED3\u5C3E\u4E14\u4E2D\u95F4\u4E0D\u5305\u542BC\u7684\u5B57\u7B26\u4E32</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^A[^C]*B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
<span class="token string">&quot;A1254BCFDFDB&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token comment">// [&quot;A1254B&quot;]</span>
<span class="token string">&quot;AB&quot;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token comment">// [&quot;AB&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u5339\u914DDOM\u5B57\u7B26\u4E32\u4E2D\u7684\u95ED\u5408\u6807\u7B7E</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>	<span class="token keyword">const</span> unicodeRegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD</span><span class="token regex-delimiter">/</span></span>
	<span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>unicodeRegExp<span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]*</span><span class="token template-punctuation string">\`</span></span>
	<span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
	<span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">^&lt;\\\\/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[^&gt;]*&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;/com-header-1&gt;&gt;&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">/*	0: &quot;&lt;/com-header-1&gt;&quot;
	1: &quot;com-header-1&quot;
	groups: undefined
	index: 0
	input: &quot;&lt;/com-header-1&gt;&gt;&quot;
	length: 2*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function c(l,i){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","\u6B63\u5219.html.vue"]]);export{r as default};
