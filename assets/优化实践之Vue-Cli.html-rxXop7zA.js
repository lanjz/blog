import{_ as p,r as l,o,c,b as n,d as a,a as e,e as t}from"./app-NJfECqZf.js";const i="/lanjz/assets/smp-6D5en4-k.png",r="/lanjz/assets/pre-label-loader-QKPaXeYL.png",u="/lanjz/assets/after-esbuild-1-_0bUNMld.png",d="/lanjz/assets/after-esbuild-2-Ygn9JTQU.png",k="/lanjz/assets/anay-sta-lAoMNcsR.png",h="/lanjz/assets/anay-sta-2-fUDd-Wu3.png",m="/lanjz/assets/echart-before-8NI569H_.png",v="/lanjz/assets/echart-after-AndOTS8O.png",b="/lanjz/assets/echarRepeat-dm0bIPDR.png",g="/lanjz/assets/aourceMap-gdqYhacM.png",y="/lanjz/assets/gzip-CBdwwAzX.png",x={},f=t(`<h1 id="webpack-优化实践之vue-cli" tabindex="-1"><a class="header-anchor" href="#webpack-优化实践之vue-cli" aria-hidden="true">#</a> Webpack 优化实践之Vue-Cli</h1><p>本次主要从构建速度和打包体积两个方向来进行优化</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bundle：捆绑好的最终文件。 如果说，chunk 是各种片段，那么bundle 就是一堆chunk 组成的“集大成者”。 当然它也类似于电路上原先是各种散乱的零件，最终组成一个集成块的感觉。 它经历了加载和编译的过程，是源文件的最终版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="构建速度优化" tabindex="-1"><a class="header-anchor" href="#构建速度优化" aria-hidden="true">#</a> 构建速度优化</h2><p>目前项目的打包时间情况：</p><table><thead><tr><th style="text-align:center;">首次打包</th><th style="text-align:right;">重复打包</th></tr></thead><tbody><tr><td style="text-align:center;">201.73s</td><td style="text-align:right;">80 ~ 110</td></tr></tbody></table><p>使用 <code>speed-measure-webpack-plugin</code> 来看下 Loader 和 Plugin 的耗时情况</p><p><img src="`+i+`" alt=""></p><ul><li><p>general output time：可以认为是 loader 和 plugin 的执行时间，但是这其中还包括了 webpack 从硬盘读取这些 loader 和 plugin 的时间，这部分是 SMP 无法测量的，所以这个时间总是会小于 loader 和 plugin 的执行时间综合</p></li><li><p>modules with no loaders：webpack 对于基本的 JS 文件的处理</p></li></ul><h3 id="cli-配置相关的优化" tabindex="-1"><a class="header-anchor" href="#cli-配置相关的优化" aria-hidden="true">#</a> CLI 配置相关的优化</h3><h4 id="lintonsave" tabindex="-1"><a class="header-anchor" href="#lintonsave" aria-hidden="true">#</a> lintOnSave</h4><p>是否保存时检查代码，只需要在开发环境下执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">lintOnSave</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&#39;development&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="productionsourcemap" tabindex="-1"><a class="header-anchor" href="#productionsourcemap" aria-hidden="true">#</a> productionSourceMap</h4><ul><li><p>Type: boolean</p></li><li><p>Default: true</p></li></ul><p>如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建</p><h4 id="runtimecompiler" tabindex="-1"><a class="header-anchor" href="#runtimecompiler" aria-hidden="true">#</a> runtimeCompiler</h4><ul><li><p>Type: boolean</p></li><li><p>Default: true</p></li></ul><p>是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右</p><h4 id="transpiledependencies" tabindex="-1"><a class="header-anchor" href="#transpiledependencies" aria-hidden="true">#</a> transpileDependencies</h4><ul><li><p>type: boolean | Array&lt;string | RegExp&gt;</p></li><li><p>Default: false</p></li></ul><p>默认情况下 babel-loader 会忽略所有 node_modules 中的文件。你可以启用本选项，以避免构建后的代码中出现未转译的第三方依赖</p><h4 id="css-sourcemap" tabindex="-1"><a class="header-anchor" href="#css-sourcemap" aria-hidden="true">#</a> css.sourceMap</h4><ul><li><p>Type: boolean</p></li><li><p>Default: false</p></li></ul><p>是否为 CSS 开启 source map。设置为 true 之后可能会影响构建的性能</p><h4 id="parallel" tabindex="-1"><a class="header-anchor" href="#parallel" aria-hidden="true">#</a> parallel</h4><ul><li><p>Type: boolean</p></li><li><p>Default: require(&#39;os&#39;).cpus().length &gt; 1</p></li></ul><p>是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建</p><h3 id="减少编译范围" tabindex="-1"><a class="header-anchor" href="#减少编译范围" aria-hidden="true">#</a> 减少编译范围</h3><h4 id="exclude-include、noparse" tabindex="-1"><a class="header-anchor" href="#exclude-include、noparse" aria-hidden="true">#</a> exclude/include、noParse</h4><p>这些方面的优化包含以下部分：</p><ul><li><p>配置 <code>Loader</code> 时合理得使用 <code>test</code>、 <code>exclude</code>、<code>include</code> 属性，优化要使用 Loader 的文件，尽可能少的让文件被Loader处理</p></li><li><p>合理配置 <code>resolve.modules</code>，告知 Webpack 从哪里在寻找第三方模块</p><p>Webpack 默认会在当前项目根目录的<code>node_modules</code> 下寻找第三方模块，如果当前 <code>node_modules</code> 没有找到对应的模块则去上一级目录下的<code>node_modules</code>中找，以此类推。</p></li><li><p>合理配置 <code>resolve.extensions</code>，便 Webpack 更精确得查找文件</p><p>默认情况下，Webpack 寻找没有带后缀的文件时，会自动带上后缀去寻找，默认是通过 <code>resolve.extension</code> 配置的后缀列表按顺序去寻找，默认是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">extensions</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.json&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>合理配置 <code>resolve.noParse</code></p><p>对于没有模块化的文件，通过这个配置让 Webpack 忽略对这些文件的递归解析，以此提高构建性能。比如 <code>JQuery</code>、<code>ChartJs</code> 等没用采用模块化的方式，让 Webpack 解析这些文件即耗时又没有意义</p></li></ul><p>eg:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vue.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token comment">//...</span>
   <span class="token literal-property property">configureWebpack</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">noParse</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(lodash|moment)$</span><span class="token regex-delimiter">/</span></span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//webpack.config.js</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js[x]?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这些能优化的空间很少，而且 vue-cli 在这这些方面该优化的都有优化了，比如 vue-cli 默认情况下 babel-loader 会忽略所有 <code>node_modules</code> 中的文件，而且大部分都是小优化， 所以这些就不深趴了</p><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><h4 id="dllplugin" tabindex="-1"><a class="header-anchor" href="#dllplugin" aria-hidden="true">#</a> DllPlugin</h4><p>就是事先把常用但又构建时间长的代码提前打包好（例如 react、react-dom）。 然后 Webpack 直接使用这些打包好的文件内容 。以达到缩短构建时间的目的</p><p>DllPlugin 配置需要先生成 dll，然后在 Webpack 中配置使用， 这个过程相比其它插件的使用真的相当繁琐的，所以可以使用 <code>autodll-webpack-plugin</code> 这个插件自动帮我们做 dll 的配置工作</p><p>但是在 Webpack4之后， 已经渐渐不使用 dllPlugin了，原因主要是因为一方面配置繁琐，维护成本高；另一方面 Webpack 4 之后在打包性能已经做了多大的优化，dll 带来的收益已经不明显</p>`,41),_={href:"https://www.cnblogs.com/skychx/p/webpack-dllplugin.html",target:"_blank",rel:"noopener noreferrer"},w=t(`<h4 id="cache-loader" tabindex="-1"><a class="header-anchor" href="#cache-loader" aria-hidden="true">#</a> cache-loader</h4><p>缓存加载器的编译的结果，避免重新编译. cache-loader 工作分两个阶段：pitch 和 loader</p><ul><li><p>pitch阶段的处理流程是：cache-loader -&gt; other-loader</p></li><li><p>loader阶段的处理流程是：other-loader -&gt; cache-loade</p></li></ul><p>pitch 阶段根据当前正在处理的文件，读取 .cache 目录中对应的 cache 文件，对比 mtime(基于目标文件最后修改时间) 判断是否可以复用</p><p>loader阶段依赖pitch阶段的判断，如果pitch阶段判断当前文件的缓存失效了，loader阶段就要重新生成缓存</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* config.module.rule(&#39;vue&#39;) */</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.vue$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;D:\\\\code\\\\work\\\\esg-cbm-core-spreadjs - 副本\\\\node_modules\\\\cache-loader\\\\dist\\\\cjs.js&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token string">&#39;D:\\\\code\\\\work\\\\esg-cbm-core-spreadjs - 副本\\\\node_modules\\\\.cache\\\\vue-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cacheIdentifier</span><span class="token operator">:</span> <span class="token string">&#39;2d61e554&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;vue-loader&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">whitespace</span><span class="token operator">:</span> <span class="token string">&#39;condense&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">preserveWhitespace</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cacheDirectory</span><span class="token operator">:</span> <span class="token string">&#39;D:\\\\code\\\\work\\\\esg-cbm-core-spreadjs - 副本\\\\node_modules\\\\.cache\\\\vue-loader&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">cacheIdentifier</span><span class="token operator">:</span> <span class="token string">&#39;2d61e554&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vue-cli 中 <code>vue-loader</code> 已经启动了 <code>cache-loader</code>, <code>babel-loader</code> 自己带了 cache 功能，所以这里也不需要自己去给内置的配置添加缓存，所以优化下项目中自己额外配置的 <code>loader</code></p><p>比如项目下的 <code>vue.config.js</code> 中配置了 <code>svg-sprite-loader</code> 来将 svg 图标生成的 iconfont ，打包 smp 打包耗时大约在 <code>13s</code> 左右，所以添加 <code>cache-lodaer</code> 添加缓存功能</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>config<span class="token punctuation">.</span>module
   <span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;icons&#39;</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/icons&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;cache-loader&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 添加 cache-loader</span>
   <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;cache-loader&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 添加 cache-loader</span>
   <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;svg-sprite-loader&#39;</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;svg-sprite-loader&#39;</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">symbolId</span><span class="token operator">:</span> <span class="token string">&#39;icon-[name]&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加前后的 svg-sprite-loader 执行耗时对比如下：</p><table><thead><tr><th style="text-align:center;">优化前</th><th style="text-align:right;">优化后</th></tr></thead><tbody><tr><td style="text-align:center;">12.77 s</td><td style="text-align:right;">2.39 s</td></tr></tbody></table><p>时间少了 60%， 效果还是非常明显的</p>`,12),j={href:"https://juejin.cn/post/6844904159670435847",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"hard-source-webpack-plugin",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hard-source-webpack-plugin","aria-hidden":"true"},"#"),a(" hard-source-webpack-plugin")],-1),q={href:"https://www.npmjs.com/package/hard-source-webpack-plugin",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>HardSourceWebpackPlugin 是 Webpack 插件，用于为模块提供中间缓存步骤。为了查看结果，您需要使用此插件运行两次 Webpack：第一次构建将花费正常时间。第二个版本将明显更快</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HardSourceWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;hard-source-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">HardSourceWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">优化前</th><th style="text-align:right;">优化后</th></tr></thead><tbody><tr><td style="text-align:center;">首次打包</td><td style="text-align:center;">201.73s</td><td style="text-align:right;">190.64s</td></tr><tr><td style="text-align:center;">重复打包</td><td style="text-align:center;">80 ~ 110</td><td style="text-align:right;">40s ~ 46s</td></tr></tbody></table><p>以上带有带有 smp 配置后最终在终端输出打包结果， smp 显示的优化前后的耗时信息如下：</p><p><code>General output time took 1 min, 8.98 secs ~ General output time took 12.18 secs</code> 可以发现时间缩短了 80%</p><p>:::waring 使用 HardSourceWebpackPlugin 热更新的速度会变慢 :::</p>`,6),z={href:"https://juejin.cn/post/7020647510322462756",target:"_blank",rel:"noopener noreferrer"},C=t('<h3 id="多进程工作" tabindex="-1"><a class="header-anchor" href="#多进程工作" aria-hidden="true">#</a> 多进程工作</h3><ul><li><p>使用 <code>terser-webpack-plugin</code> 多进程压缩</p></li><li><p>使用 HappyPack 或 thread-loader 开启多进程来对文件进行解析和转换</p></li></ul><p>vue-cli 对于耗时的 loader 默认有此优化</p><h3 id="使用更高效的loader-plugin" tabindex="-1"><a class="header-anchor" href="#使用更高效的loader-plugin" aria-hidden="true">#</a> 使用更高效的loader/plugin</h3>',4),D={id:"使用esbuild-loader-swc-loader替换-label-loader",tabindex:"-1"},P=n("a",{class:"header-anchor",href:"#使用esbuild-loader-swc-loader替换-label-loader","aria-hidden":"true"},"#",-1),M={href:"https://www.npmjs.com/package/esbuild-loader",target:"_blank",rel:"noopener noreferrer"},E=t('<p>优化前首次打包 label-loader 耗时</p><p><img src="'+r+`" alt=""></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> rule <span class="token operator">=</span> config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 清理自带的babel-loader</span>
rule<span class="token punctuation">.</span>uses<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加esbuild-loader</span>
rule<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.m?jsx?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;esbuild-loader&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">&#39;esbuild-loader&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;tsx&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;es2015&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化前首次打包 label-loader 耗时</p><p><img src="`+u+'" alt=""></p><p><img src="'+d+`" alt=""></p><p>smp:</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">label-loader</th><th style="text-align:center;">esbuild-loader</th><th style="text-align:center;">esbuild-loader+cache-loader</th></tr></thead><tbody><tr><td style="text-align:center;">首次打包</td><td style="text-align:center;">1 min, 0.226 secs</td><td style="text-align:center;">6.93 secs</td><td style="text-align:center;">18.61 secs</td></tr><tr><td style="text-align:center;">重复打包</td><td style="text-align:center;">24s ~ 36s</td><td style="text-align:center;">6s ~ 7s</td><td style="text-align:center;">4s ~ 7s</td></tr></tbody></table><p>时间为： <code>Done in 201.73s.</code> =&gt; <code>Done in 117.93s.</code></p><p>二次打包时间为 <code>80 ~ 110</code> 之间 <code>89~98</code></p><p>整体的打包耗时</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">优化前</th><th style="text-align:right;">优化后</th><th style="text-align:right;">esbuld-loader+cache-loader</th></tr></thead><tbody><tr><td style="text-align:center;">首次打包</td><td style="text-align:center;">201.73s</td><td style="text-align:right;">117.93s</td><td style="text-align:right;">118s</td></tr><tr><td style="text-align:center;">重复打包</td><td style="text-align:center;">91 ~ 110</td><td style="text-align:right;">69s ~ 80s</td><td style="text-align:right;">70s ~ 71s</td></tr></tbody></table><p>可以发现使用 esbuild-loader 首次打包的速度比 babel-loader 快了百分40，但是之后的打包后因为 babel-loader 已经有了缓存，之后的打包的时间没有存在很大的差距</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>要提醒的是esbuild-loader 只能编译到 es2015</p></div><h4 id="使用esbuild-minimize-plugin替换-terser-实现-css压缩" tabindex="-1"><a class="header-anchor" href="#使用esbuild-minimize-plugin替换-terser-实现-css压缩" aria-hidden="true">#</a> <strong>使用esbuild-minimize-plugin替换 terser 实现 CSS压缩</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除底层 terser, 换用 esbuild-minimize-plugin</span>
config<span class="token punctuation">.</span>optimization<span class="token punctuation">.</span>minimizers<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;terser&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
config<span class="token punctuation">.</span>optimization
    <span class="token punctuation">.</span><span class="token function">minimizer</span><span class="token punctuation">(</span><span class="token string">&#39;esbuild&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ESBuildMinifyPlugin<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;es2015&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">minify</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">默认(terser)</th><th style="text-align:center;">ESBuildMinifyPlugin</th></tr></thead><tbody><tr><td style="text-align:center;">首次打包</td><td style="text-align:center;">260.54s</td><td style="text-align:center;">136.43s</td></tr><tr><td style="text-align:center;">重复打包</td><td style="text-align:center;">83 ~ 96</td><td style="text-align:center;">95 ~ 98</td></tr></tbody></table><p>可以发现使用 esbuild 后首次打包的速度快了百分50，但是二次打包后因为 terser 已经有了缓存，所以时间没有差多少。</p><p>:::waring 需要额外注意的是使用 esbuild 压缩后的体积会比使用 terser 的大一点 :::</p><p><strong>esbuild 使用场景</strong></p><ul><li><p>没有使用一些自定义的 babel-plugin (如 babel-plugin-import)</p></li><li><p>不需要兼容一些低版本浏览器（esbuild 只能将代码转成 es6）</p></li></ul><h3 id="减少打包工作" tabindex="-1"><a class="header-anchor" href="#减少打包工作" aria-hidden="true">#</a> 减少打包工作</h3><ul><li><p>根据情况是否要使用 JS source map ？</p><ul><li><p>webpack 通过 devtool 设置</p></li><li><p>vue-cli 可以通过 productionSourceMap 属性进行配置</p></li></ul></li><li><p>是否要启用 CSS sourceMap ？</p><ul><li><p>webpack 通过对应 css(less..)-loader 进行配置(options: { sourceMap: true, })</p></li><li><p>vue-cli 通过 css.sourceMap属性进行配置</p></li></ul></li><li><p>生产环境是否要开启 eslint ？</p><ul><li>vue-cli 通过 lintOnSave属性进行配置</li></ul></li><li><p>使用 更少/更小 的库</p></li><li><p>移除不使用的代码</p></li><li><p>使用 CDN 来引入资源</p><p>如果文件真的非常大的话，可以一试</p></li></ul><h2 id="打包输出优化" tabindex="-1"><a class="header-anchor" href="#打包输出优化" aria-hidden="true">#</a> 打包输出优化</h2><p>首先使用 <code>webpack-bundle-analyzer</code> 插件来看当前项目的打包体积情况：</p><p><img src="`+k+'" alt=""><br><img src="'+h+`" alt=""></p><p>先回顾一些 Webpack 打包时的几个术语：</p><ul><li><p>runtime: 在浏览器运行过程中，webpack 用来连接模块化应用程序所需的所有代码。它包含：在模块交互时，连接模块所需的加载和解析逻辑。包括：已经加载到浏览器中的连接模块逻辑，以及尚未加载模块的延迟加载逻辑</p></li><li><p>manifest: 一旦你的应用在浏览器中以 index.html 文件的形式被打开，一些 bundle 和应用需要的各种资源都需要用某种方式被加载与链接起来。在经过打包、压缩、为延迟加载而拆分为细小的 chunk 这些 webpack 优化 之后，你精心安排的 /src 目录的文件结构都已经不再存在。所以 webpack 如何管理所有所需模块之间的交互呢？这就是 manifest 数据用途的由来……</p></li></ul><p>当 compiler 开始执行、解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合称为 &quot;manifest&quot;，当完成打包并发送到浏览器时，runtime 会通过 manifest 来解析和加载模块。无论你选择哪种 模块语法，那些 import 或 require 语句现在都已经转换为 <strong>webpack_require</strong> 方法，此方法指向模块标识符(module identifier)。通过使用 manifest 中的数据，runtime 将能够检索这些标识符，找出每个标识符背后对应的模块</p><ul><li><p>chunk: 数据块</p><ul><li><p>一种是非初始化的：例如在打包时，对于一些动态导入的异步代码，webpack 会帮你分割出共用的代码，可以是自己写的代码模块，也可以是第三方库（node_modules 文件夹里的），这些被分割的代码文件就可以理解为 chunk</p></li><li><p>还有一种是初始化的：就是写在入口文件处 (entry point) 的各种文件或者说模块依赖，就是 chunk ，它们最终会被捆在一起打包成一个 main.js （当然输出文件名你可以自己指定），这个 main.js 可以理解为 bundle，当然它其实也是 chunk</p></li></ul></li><li><p>bundle: 捆绑好的最终文件。如果说，chunk 是各种片段，那么 bundle 就是一堆 chunk 组成的“集大成者”，比如上面说的 main.js 就属于 bundle。</p></li><li><p>splitChunks 分割代码</p></li><li><p>compression-webpack-plugin gzip打包</p></li><li><p>externals &amp; cdn</p></li></ul><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree Shaking</h3><p>Webpack Tree Shaking 依赖 ES6 module，为能让 Webpapck 能高效所以为了避免导入全部模块平时应该使用 ES6 module 的引入方式</p><p>eg：项目用到了 echarts ，这个图表库本身的体积就很大，项目中确使用了 <code>commondJS</code> 的引入方式进行使用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> echarts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;echarts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> chartDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chartDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chartHeight<span class="token punctuation">;</span>
myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span> options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>require</code> 是动态引入模块的，这种方式是不能被 Webpack treeshraking，看下此打包后的大小：</p><p><img src="`+m+`" alt=""></p><p>接下改成 ES Module 的引入方式进行使用</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-chart</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chart<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:option</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>option<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chartClick<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> use <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;echarts/core&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> CanvasRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;echarts/renderers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TreeChart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;echarts/charts&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> VChart <span class="token keyword">from</span> <span class="token string">&quot;vue-echarts&quot;</span><span class="token punctuation">;</span>

<span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  CanvasRenderer<span class="token punctuation">,</span>
  TreeChart<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token literal-property property">option</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    VChart
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化后重新打包的结果为：</p><p><img src="`+v+'" alt=""></p><p>从 &#39;3.53M&#39; 减到 &#39;1.36M&#39;</p><p>但是总打包体积才减少了 <code>0.5M</code>，可能是因为其它的 chunk 额外引入了 <code>vue-echart</code> 的原因. 但是整体思路是正确的</p><h3 id="慎用体积大的第三方模块" tabindex="-1"><a class="header-anchor" href="#慎用体积大的第三方模块" aria-hidden="true">#</a> 慎用体积大的第三方模块</h3><p>以当前这个项目为例，项目中除了 Echart 还使用 antv 这个图表图，并且 echart 只在一个组件用到且只用了其中一种图表类型</p><p><img src="'+b+'" alt=""></p><p>这种情况是可以把 echart 给剔除掉</p><h3 id="优化sourcemap-todo" tabindex="-1"><a class="header-anchor" href="#优化sourcemap-todo" aria-hidden="true">#</a> 优化SourceMap todo</h3><p>我们在项目进行打包后，会将开发中的多个文件代码打包到一个文件中，并且经过压缩，去掉多余的空格，且babel编译化后，最终会用于线上环境，那么这样处理后的代码和源代码会有很大的差别，当有bug的时候，我们只能定位到压缩处理后的代码位置，无法定位到开发环境中的代码，对于开发不好调式，因此sourceMap出现了，它就是为了解决不好调式代码问题的</p><p>SourceMap的可选值如下：</p><p><img src="'+g+`" alt=""></p><ul><li><p>开发环境推荐： cheap-module-eval-source-map</p></li><li><p>生产环境推荐： cheap-module-source-map</p></li></ul><p>原因如下： 1. 源代码中的列信息是没有任何作用，因此我们打包后的文件不希望包含列相关信息，只有行信息能建立打包前后的依赖关系。因此不管是开发环境或生产环境，我们都希望添加cheap的基本类型来忽略打包前后的列信息。 2. 不管是开发环境还是正式环境，我们都希望能定位到bug的源代码具体的位置，比如说某个vue文件报错了，我们希望能定位到具体的vue文件，因此我们也需要module配置。 3. 我们需要生成map文件的形式，因此我们需要增加source-map属性。 4. 我们介绍了eval打包代码的时候，知道eval打包后的速度非常快，因为它不生成map文件，但是可以对eval组合使用 eval-source-map使用会将map文件以DataURL的形式存在打包后的js文件中。在正式环境中不要使用 eval-source-map, 因为它会增加文件的大小，但是在开发环境中，可以试用下，因为他们打包的速度很快。</p><h3 id="compression-webpack-plugin-todo" tabindex="-1"><a class="header-anchor" href="#compression-webpack-plugin-todo" aria-hidden="true">#</a> compression-webpack-plugin todo</h3><p><strong>Cannot read property &#39;tapPromise&#39; of undefined</strong></p><p>重新安装低版本的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm i compression<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin@<span class="token number">5.0</span><span class="token number">.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打包后看下最终的文件输出</p><p><img src="`+y+'" alt=""></p><p>可以看到压缩后的文件体积只有原文件的 1/3</p>',60),N={href:"https://segmentfault.com/a/1190000040268844",target:"_blank",rel:"noopener noreferrer"},T=t('<h2 id="优化总结" tabindex="-1"><a class="header-anchor" href="#优化总结" aria-hidden="true">#</a> 优化总结</h2><p>手脚架本身已经做了很多优化，而且使用手脚架本意就明为了节省这部分的构建配置的维护成本，所以最终留下优化配置为：</p><p>现在把上面的所有优化做下整合：</p><ul><li><p>如果加配了 loader 且耗时较长，可使用 cache-loader</p></li><li><p>如果项目的启动时间过长，且无法容忍，可以添加 hard-source-webpack-pulgin</p></li><li><p>如果第三方模块的体积很大，且该模块的使用频率非常高，可以考虑直接 CDN 引入</p></li><li><p>如果只考虑编译到 ES5，且想更进一步提高构建速度，可使用 esbuild-loader 代替 label-loader</p></li></ul>',4),V={href:"https://juejin.cn/post/7034316603890237477",target:"_blank",rel:"noopener noreferrer"},I={href:"https://guoyunhe.me/2022/01/24/front-end-build-tool-benchmark/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.webpackjs.com/guides/build-performance/#%E5%B8%B8%E8%A7%84",target:"_blank",rel:"noopener noreferrer"},L={href:"https://zhuanlan.zhihu.com/p/267875652",target:"_blank",rel:"noopener noreferrer"};function H(O,R){const s=l("ExternalLinkIcon");return o(),c("div",null,[f,n("p",null,[n("a",_,[a("你真的需要 Webpack DllPlugin 吗？"),e(s)])]),w,n("p",null,[n("a",j,[a("CI环境下cache-loader的局限性以及修复方式"),e(s)])]),S,n("p",null,[n("a",q,[a("hard-source-webpack-plugin"),e(s)])]),W,n("p",null,[n("a",z,[a("webpack构建提速-HardSourceWebpackPlugin-热重载不生效"),e(s)])]),C,n("h4",D,[P,a(),n("strong",null,[a("使用"),n("a",M,[a("esbuild-loader"),e(s)]),a("/swc-loader替换 label-loader")])]),E,n("p",null,[n("a",N,[a("compression-webpack-plugin实践"),e(s)])]),T,n("p",null,[n("a",V,[a("swc 快在哪？"),e(s)])]),n("p",null,[n("a",I,[a("前端构建工具测评"),e(s)])]),n("p",null,[n("a",B,[a("构建性能"),e(s)])]),n("p",null,[n("a",L,[a("Webpack 究竟解决了什么问题？"),e(s)])])])}const J=p(x,[["render",H],["__file","优化实践之Vue-Cli.html.vue"]]);export{J as default};
