import{_ as n,o as s,c as a,e}from"./app-QMonxybV.js";const p={},t=e(`<h1 id="vue-组件通信方式" tabindex="-1"><a class="header-anchor" href="#vue-组件通信方式" aria-hidden="true">#</a> Vue 组件通信方式</h1><h2 id="常规形式" tabindex="-1"><a class="header-anchor" href="#常规形式" aria-hidden="true">#</a> 常规形式</h2><h3 id="props-emit" tabindex="-1"><a class="header-anchor" href="#props-emit" aria-hidden="true">#</a> props/$emit</h3><p>父组件通过 <code>props</code> 的方式向子组件传递数据，而子组件通过 <code>$emit</code> 向父组件传递数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父向子组件传递title属性</span>
<span class="token operator">&lt;</span>comA <span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">&quot;title&quot;</span> @update<span class="token operator">=</span><span class="token string">&quot;updateTitle&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comA<span class="token operator">&gt;</span>

<span class="token comment">// 子组件向父组件传递数据</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newTitle&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-prop" tabindex="-1"><a class="header-anchor" href="#update-prop" aria-hidden="true">#</a> @update:[Prop]</h4><p><code>@update:myPropName</code> 相当于绑定事件的 <code>v-on</code> 的简写方式，省去了定义接收子组件更新的函数，可以直接对属性进行更新</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父向子组件传递title属性</span>
<span class="token operator">&lt;</span>comA @update<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">&quot;title = $event&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comA<span class="token operator">&gt;</span>
<span class="token comment">// 子组件向父组件传递数据</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newTitle&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prop-sync" tabindex="-1"><a class="header-anchor" href="#prop-sync" aria-hidden="true">#</a> :[Prop].sync</h3><p>相当于 <code>props/$emit</code> 的简写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父向子组件传递title组件</span>
<span class="token operator">&lt;</span>comA <span class="token operator">:</span>title<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comA<span class="token operator">&gt;</span>
<span class="token comment">// 子组件向父组件传递数据</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;newTitle&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>传递了一个 <code>title</code> 属性</p></li><li><p>绑定了一个 <code>v-on</code> 监听器</p></li></ul><p><strong>适合范围：相临父子组件</strong></p><h3 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> provide/inject</h3><p>这对选项需要一起使用，允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组件通过 provide 传递数擗</span>
<span class="token function">provide</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">provideData</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>provideData
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function-variable function">data</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">provideData</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lanjz&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子组件通过 inject 接收数据</span>
<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;provideData&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>provide</code>: 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的属性。在该对象中你可以使用 <code>Symbols</code> 作为 <code>key</code>，但是只在原生支持 <code>Symbol</code> 和 <code>Reflect.ownKeys</code> 的环境下可工作</p></li><li><p><code>inject</code>: 选项应该是:</p><ul><li><p>一个字符串数组</p></li><li><p>一个对象，对象的 <code>key</code> 是本地的绑定名，<code>value</code> 是：</p><ul><li><p>在可用的注入内容中搜索用的 <code>key</code> (字符串或 <code>Symbol</code> )</p></li><li><p>一个对象，该对象的：</p><ul><li><p><code>from</code> 属性是在可用的注入内容中搜索用的 <code>key</code> (字符串或 <code>Symbol</code>)</p></li><li><p><code>default</code> 属性是降级情况下使用的 <code>value</code></p></li></ul></li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父级组件提供 &#39;foo&#39;</span>
<span class="token keyword">var</span> Provider <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子组件注入 &#39;foo&#39;</span>
<span class="token keyword">var</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span> <span class="token comment">// =&gt; &quot;bar&quot;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 利用 \`ES2015 Symbols\`、函数 \`provide\` 和对象 \`inject\`</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> Provider <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">provide</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span> s <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token comment">//设置默认值</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 如果它需要从一个不同名字的 property 注入，则使用 from 来表示其源 property：</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 对非原始值使用一个工厂方法：</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 使用一个注入的值作为一个 property 的默认值：</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用一个注入的值作为数据入口：</span>
<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意点：</p><ul><li><p>如果 <code>provide</code> 里的属性要使用<strong>组件实例中的数据，则必需使用函数的形式</strong>，如果只是<strong>静态数据则可以使用对象的形式</strong></p></li><li><p>如果希望 <code>provide</code> 是响应式的，即子组件能跟着父组件的 <code>provide</code> 变化而变化，那么 <code>provide</code>的值需要是一个对象，那么这个对象里的属性将是可更新</p><blockquote><p>官方解释：<code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的</p></blockquote></li></ul><p><strong>通信范围:父传子，且可多层</strong></p><h2 id="跨组件通过" tabindex="-1"><a class="header-anchor" href="#跨组件通过" aria-hidden="true">#</a> 跨组件通过</h2><h3 id="eventbus" tabindex="-1"><a class="header-anchor" href="#eventbus" aria-hidden="true">#</a> eventBus</h3><p><code>eventBus</code> 又称为事件总线，在 Vue 中可以使用它来作为沟通桥梁的概念, 就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件， 所以组件都可以通知其他组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 初始化一个事件总线  event-bus.js</span>

<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 发送事件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>EventBus<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event-bus.js&#39;</span>
EventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 接收事件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>EventBus<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event-bus.js&#39;</span>
EventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token parameter">param</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 移除事件总线</span>
mport <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event-bus.js&#39;</span>
EventBus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//移除所有事件总线</span>
EventBus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>适合范围：任意位置的组件，可跨级</strong></p><h3 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> VueX</h3><h2 id="获取组件实例" tabindex="-1"><a class="header-anchor" href="#获取组件实例" aria-hidden="true">#</a> 获取组件实例</h2><p>通过获取组件实例的方式来访问这个实例中的属性和方法</p><h3 id="ref-refs" tabindex="-1"><a class="header-anchor" href="#ref-refs" aria-hidden="true">#</a> ref/$refs</h3><p><code>ref</code> 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。</p><ul><li><p>如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素</p></li><li><p>如果用在子组件上，引用就指向组件实例</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vm.$refs.p</span><span class="token template-punctuation string">\`</span></span> will be the <span class="token constant">DOM</span> node <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">&quot;p&quot;</span><span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">vm.$refs.child</span><span class="token template-punctuation string">\`</span></span> will be the child hllComponent instance <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>child<span class="token operator">-</span>component ref<span class="token operator">=</span><span class="token string">&quot;child&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">-</span>component<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意点</strong></p><ul><li><p>如果有同名的 <code>ref</code> 定义，则这个 <code>ref</code> 指向最后渲染出来的那个</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 初始时 show=false</span>
<span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;show&quot;</span><span class="token operator">&gt;</span>hi<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p ref<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token comment">// moutned 钩子中打印</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hi <span class="token comment">// &lt;p ref=&quot;hi&quot;&gt;hello&lt;/p&gt;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hi <span class="token comment">// &lt;p ref=&quot;hi&quot; v-if=&quot;show&quot;&gt;hi&lt;/p&gt;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token comment">// 销毁 dom 后，这个 refs.hi 并不会赋值成其它名为 \`hi\` 的元素，而是等于 undefind</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>hi <span class="token comment">// undefind</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;(item) in list&quot;</span> ref<span class="token operator">=</span><span class="token string">&quot;hi&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token comment">// this.$refs.hi // [&lt;span&gt;, ...]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="children-parent" tabindex="-1"><a class="header-anchor" href="#children-parent" aria-hidden="true">#</a> $children/$parent</h3><ul><li><p><code>$children</code> ：当前组件包含的子组件实例数组。需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。</p></li><li><p><code>$parent</code>: 当前组件对应的父组件实例</p></li></ul><p>使用 <code>$children</code> 和 <code>$parent</code> 要注意的点</p><ul><li><p>边界情况，如在 <code>#app</code> 上拿 <code>$parent</code> 得到的是 <code>new Vue()</code> 的实例，在这实例上再拿 <code>$parent</code> 得到的是 <code>undefined</code></p></li><li><p>在最底层的子组件拿 <code>$children</code> 是个空数组</p></li><li><p>也要注意得到 <code>$parent</code> 和 <code>$children</code> 的值不一样，<code>$children</code> 的值是数组，而 <code>$parent</code> 是个对象</p></li></ul><p><strong>适合范围：相临父子组件</strong></p><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><h3 id="attrs-listeners" tabindex="-1"><a class="header-anchor" href="#attrs-listeners" aria-hidden="true">#</a> $attrs/$listeners</h3><ul><li><p><code>$listeners</code>: 包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件——在创建更高层次的组件时非常有用</p></li><li><p><code>$attrs</code>: 包含了父作用域中不作为 <code>prop</code> 被识别 (且获取) 的 <code>attribute</code> 绑定 ( <code>class</code> 和 <code>style</code> 除外)。当一个组件没有声明任何 <code>prop</code> 时， 这里会包含所有父作用域的绑定 (<code>class</code> 和 <code>style </code>除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件——在创建高级别的组件时非常有</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父组中</span>
 <span class="token operator">&lt;</span>com 
   name<span class="token operator">=</span><span class="token string">&quot;lanjz&quot;</span>
   <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com&quot;</span>
   age<span class="token operator">=</span><span class="token string">&quot;18&quot;</span>
   @click<span class="token operator">=</span><span class="token string">&quot;callback&quot;</span>
   v<span class="token operator">-</span>on<span class="token operator">:</span>event<span class="token operator">-</span>one<span class="token operator">=</span><span class="token string">&quot;callback&quot;</span>
   v<span class="token operator">-</span>on<span class="token operator">:</span>event<span class="token operator">-</span>two<span class="token operator">=</span><span class="token string">&quot;callback&quot;</span>
  <span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token comment">// com组件</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">)</span> <span class="token comment">// {age: &quot;18&quot;, name: &quot;lanjz&quot;}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$listeners<span class="token punctuation">)</span> <span class="token comment">// {click: ƒ invoker(), event-one:ƒ invoker(),event-two: ƒ invoker()}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","组件通信.html.vue"]]);export{u as default};
