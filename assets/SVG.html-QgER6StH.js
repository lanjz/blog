import{_ as e,o,c as a,e as s}from"./app-WhMj9h_6.js";const t={},n=s(`<h1 id="svg" tabindex="-1"><a class="header-anchor" href="#svg" aria-hidden="true">#</a> SVG</h1><p>SVG 即可缩放矢量图形</p><p>SVG元素：<code>圆形</code>, <code>矩形</code>, <code>曲线</code></p><p>一个简单的SVG文档由<code>&lt;svg&gt;</code>根元素和基本的形状元素构成。另外还有一个<code>g元素</code>，它用来把若干个基本形状编成一个组</p><p>绘制SVG要注意几点：</p><ul><li><p>SVG是一种<code>XML</code>语言, SVG的元素和属性必须按标准格式书写，因为XML是区分大小写的（这一点和html不同）</p></li><li><p><code>XML</code>语言里的属性值必须用引号引起来，就算是数值也必须这样做</p></li><li><p>SVG的渲染顺序是“后来居上”，越后面的元素越可见</p></li><li><p><code>g</code> 包含的子元素如果使用 <code>transform</code> (无论是属性还是<code>style</code>设置的)，<code>g</code> 的大小将被受影响</p></li><li><p>SVG的使用方式</p><ul><li><p>如果HTML是XHTML并且声明类型为<code>application/xhtml+xml</code>，可以直接把SVG嵌入到XML源码中</p></li><li><p>如果HTML是HTML5并且浏览器支持HTML5，同样可以直接嵌入SVG。然而为了符合HTML5标准，可能需要做一些语法调整</p></li><li><p>可以通过 object 元素引用SVG文件：<code> &lt;object data=&quot;image.svg&quot; type=&quot;image/svg+xml&quot; /&gt;</code></p></li><li><p>类似的也可以使用 <code>iframe</code> 元素引用SVG文件：<code> &lt;iframe src=&quot;image.svg&quot;&gt;&lt;/iframe&gt;</code></p></li><li><p>理论上同样可以使用 img 元素，但是在低于4.0版本的Firefox 中不起作用</p></li><li><p>最后SVG可以通过JavaScript动态创建并注入到HTML DOM中。 这样具有一个优点，可以对浏览器使用替代技术，在不能解析SVG的情况下，可以替换创建的内容。</p></li></ul></li></ul><p>简单例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// demo.svg</span>
<span class="token operator">&lt;</span>svg version<span class="token operator">=</span><span class="token string">&quot;1.1&quot;</span>
     baseProfile<span class="token operator">=</span><span class="token string">&quot;full&quot;</span>
     width<span class="token operator">=</span><span class="token string">&quot;300&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>
     xmlns<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2000/svg&quot;</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>rect width<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span> height<span class="token operator">=</span><span class="token string">&quot;100%&quot;</span> fill<span class="token operator">=</span><span class="token string">&quot;red&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>circle cx<span class="token operator">=</span><span class="token string">&quot;150&quot;</span> cy<span class="token operator">=</span><span class="token string">&quot;100&quot;</span> r<span class="token operator">=</span><span class="token string">&quot;80&quot;</span> fill<span class="token operator">=</span><span class="token string">&quot;green&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>text x<span class="token operator">=</span><span class="token string">&quot;150&quot;</span> y<span class="token operator">=</span><span class="token string">&quot;125&quot;</span> font<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">&quot;60&quot;</span> text<span class="token operator">-</span>anchor<span class="token operator">=</span><span class="token string">&quot;middle&quot;</span> fill<span class="token operator">=</span><span class="token string">&quot;white&quot;</span><span class="token operator">&gt;</span><span class="token constant">SVG</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="svg-元素" tabindex="-1"><a class="header-anchor" href="#svg-元素" aria-hidden="true">#</a> SVG 元素</h2><h3 id="react-矩形" tabindex="-1"><a class="header-anchor" href="#react-矩形" aria-hidden="true">#</a> react-矩形</h3><p><code>&lt;rect x=&quot;60&quot; y=&quot;10&quot; rx=&quot;10&quot; ry=&quot;10&quot; width=&quot;30&quot; height=&quot;30&quot;/&gt;</code></p><ul><li><p><code>x</code>: 矩形左上角的<code>x位置</code></p></li><li><p><code>y</code>: 矩形左上角的<code>y位置</code></p></li><li><p><code>width</code>: 矩形的宽度</p></li><li><p><code>height</code>: 矩形的高度</p></li><li><p><code>rx</code>: 圆角的<code>x方位</code>的半径</p></li><li><p><code>ry</code>: 圆角的<code>i方位</code>的半径</p></li></ul><h3 id="circle-圆形" tabindex="-1"><a class="header-anchor" href="#circle-圆形" aria-hidden="true">#</a> circle-圆形</h3><p><code>&lt;circle cx=&quot;25&quot; cy=&quot;75&quot; r=&quot;20&quot;/&gt;</code></p><ul><li><p><code>r</code>: 圆的半径</p></li><li><p><code>cx</code>: 圆心的x位置</p></li><li><p><code>cy</code>: 圆心的y位置</p></li></ul><h3 id="ellipse-椭圆" tabindex="-1"><a class="header-anchor" href="#ellipse-椭圆" aria-hidden="true">#</a> Ellipse-椭圆</h3><p>Ellipse 给制椭圆</p><p><code>&lt;ellipse cx=&quot;75&quot; cy=&quot;75&quot; rx=&quot;20&quot; ry=&quot;5&quot;/&gt;</code></p><ul><li><p><code>rx</code>: 椭圆的x半径</p></li><li><p><code>ry</code>: 椭圆的y半径</p></li><li><p><code>cx</code>: 椭圆中心的x位置</p></li><li><p><code>cy</code>: 椭圆中心的y位置</p></li></ul><h3 id="line-线条" tabindex="-1"><a class="header-anchor" href="#line-线条" aria-hidden="true">#</a> line-线条</h3><p>Line 绘制直线。它取两个点的位置作为属性，指定这条线的起点和终点位置。</p><p><code>&lt;line x1=&quot;10&quot; x2=&quot;50&quot; y1=&quot;110&quot; y2=&quot;150&quot;/&gt;</code></p><ul><li><p><code>x1</code>: 起点的x位置</p></li><li><p><code>y1</code>: 起点的y位置</p></li><li><p><code>x2</code>: 终点的x位置</p></li><li><p><code>y2</code>: 终点的y位置</p></li></ul><h3 id="polyline-折线" tabindex="-1"><a class="header-anchor" href="#polyline-折线" aria-hidden="true">#</a> polyline-折线</h3><p>Polyline是一组连接在一起的直线。因为它可以有很多的点，折线的的所有点位置都放在一个points属性中：</p><p><code>&lt;polyline points=&quot;60 110, 65 120, 70 115, 75 130, 80 125, 85 140, 90 135, 95 150, 100 145&quot;/&gt;</code></p><ul><li><code>points</code>:点集数列。每个数字用空白、逗号、终止命令符或者换行符分隔开。每个点必须包含2个数字，一个是x坐标，一个是y坐标。 所以点列表 <code>(0,0)</code>, <code>(1,1)</code> 和<code>(2,2)</code>可以写成这样：“0 0, 1 1, 2 2”</li></ul><h3 id="polygon-多边形" tabindex="-1"><a class="header-anchor" href="#polygon-多边形" aria-hidden="true">#</a> polygon-多边形</h3><p>polygon和折线很像，它们都是由连接一组点集的直线构成。不同的是，polygon的路径在最后一个点处自动回到第一个点。需要注意的是，矩形也是一种多边形，如果需要更多灵活性的话，你也可以用多边形创建一个矩形</p><p><code>&lt;polygon points=&quot;50 160, 55 180, 70 180, 60 190, 65 205, 50 195, 35 205, 40 190, 30 180, 45 180&quot;/&gt;</code></p><ul><li><code>points</code>:</li></ul><h3 id="path-路径" tabindex="-1"><a class="header-anchor" href="#path-路径" aria-hidden="true">#</a> path-路径</h3><p>你可以用path元素绘制矩形（直角矩形或者圆角矩形）、圆形、椭圆、折线形、多边形，以及一些其他的形状，例如贝塞尔曲线、2次曲线等曲线。 因为path很强大也很复杂，所以会在下一章进行详细介绍。这里只介绍一个定义路径形状的属性</p><ul><li><p><code>d</code>: 是一个<code>命令+参数</code>的序列, 描述于如何绘制路径的信息,以下是在<code>d</code>中使用的命令：</p><ul><li><p><code>M x y</code>：表示的是“Move to”命令，当解析器读到这个命令时，它就知道你是打算移动到某个点,跟在命令字母后面的，是你需要移动到的那个点的x和y轴坐标 比如移动到(10,10)这个点的命令，应该写成<code>M 10 10</code></p></li><li><p><code>L x y</code>: L命令将会在当前位置和新位置（L前面画笔所在的点）之间画一条线段 <code>&lt;path d=&quot;M10 10 L90 90&quot; stroke=&quot;black&quot;/&gt;</code></p></li><li><p><code>H x</code>: 绘制水平线,只需一个参数</p></li><li><p><code>V y</code>: 绘制垂直线,只需一个参数</p></li><li><p><code>Z</code>: 闭合路径命令,Z命令会从当前点画一条直线到路径的起点, Z命令不用区分大小写</p></li></ul><p><code>&lt;path d=&quot;M 10 10 L 90 90 H 50 L 10 10&quot; stroke=&quot;black&quot; fill=&quot;transparent&quot;/&gt;</code>等同于：<code>&lt;path d=&quot;M 10 10 L 90 90 H 50 Z&quot; stroke=&quot;black&quot; fill=&quot;transparent&quot;/&gt;</code></p><ul><li><p><code>C</code>: 贝塞尔曲线,<code>C x1 y1, x2 y2, x y (or c dx1 dy1, dx2 dy2, dx dy)</code></p><ul><li>最后一个坐标(x,y)表示的是曲线的终点,(x1,y1)是起点的控制点，(x2,y2)是终点的控制点</li></ul></li><li><p><code>S</code>:</p></li></ul></li></ul><blockquote><p>每一个命令都有两种表示方式，一种是用大写字母，表示采用绝对定位。另一种是用小写字母，表示采用相对定位, 除了Z</p></blockquote><ul><li>\`\`</li></ul><h2 id="svg属性" tabindex="-1"><a class="header-anchor" href="#svg属性" aria-hidden="true">#</a> SVG属性</h2><ul><li><p><code>fill</code>：内容填充</p></li><li><p><code>stroke</code>: 线条的颜色</p></li><li><p><code>fill-opacity</code>:控制填充色的不透明度</p></li><li><p><code>stroke-opacity</code>: 控制描边的不透明度</p></li></ul><h2 id="svg和canvas区别" tabindex="-1"><a class="header-anchor" href="#svg和canvas区别" aria-hidden="true">#</a> svg和canvas区别</h2><ul><li><p>从图像类别区分，Canvas是基于像素的位图，而SVG却是基于矢量图形</p></li><li><p>从结构上说，Canvas没有图层的概念，所有的修改整个画布都要重新渲染，而SVG则可以对单独的标签进行修改</p></li><li><p>从操作对象上说，Canvas是基于HTML canvas标签，通过宿主提供的Javascript API对整个画布进行操作的，而SVG则是基于XML元素的。</p></li><li><p>从渲染模式上来说，Canvas属于 即时模式，而SVG则是 保留模式 ,这两种模式的区别可以参见 cshao 的博文： <code>http://www.lifelaf.com/blog/?p=354</code></p></li><li><p>从搜索引擎角度分析，由于svg是有大量标签组成，所以可以通过给标签添加属性，便于爬虫搜索</p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><p>Canvas 提供的绘图能力更底层，适合做到像素级的图形处理，能动态渲染和绘制大数据量的图形。而 SVG 抽象层次更高，声明描述式的接口功能更丰富，内置了大量的图形、滤镜和动画等，方便进行文档元素的维护，也能导出为文件脱离浏览器环境使用</p><h3 id="性能差异" tabindex="-1"><a class="header-anchor" href="#性能差异" aria-hidden="true">#</a> 性能差异</h3><p>之前网上有不少 Canvas 和 SVG 性能对比的文章，得出的结论大体是“Canvas 性能更好，适合更大量数据的渲染”。 其实这么说是有失偏颇的。性能对比要看场景。从底层来看，Canvas 的性能受画布尺寸影响更大，而 SVG 的性能受图形元素个数影响更大</p><h3 id="定制和交互" tabindex="-1"><a class="header-anchor" href="#定制和交互" aria-hidden="true">#</a> 定制和交互</h3><p>比较流行的看法是 SVG 做定制和交互更有优势，因为有类似 DOM 的结构，能快速应用浏览器底层的鼠标事件、CSS 样式、CSS3 动画等。不过基于 Canvas 做上层封装后也能实现类似的定制和交互，并且自由度更高</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>如果单就图表库的视角来看，选择 Canvas 和 SVG 各有千秋。小画布、大数据量的场景适合用 Canvas，譬如热力图、大数据量的散点图等。 如果画布非常大，有缩放、平移等高频的交互，或者移动端对内存占用量非常敏感等场景，可以使用 SVG 的方案。</p>`,48),l=[n];function p(c,i){return o(),a("div",null,l)}const r=e(t,[["render",p],["__file","SVG.html.vue"]]);export{r as default};
