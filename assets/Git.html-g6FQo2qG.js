import{_ as e,o as i,c as t,e as s}from"./app-QMonxybV.js";const n={},d=s(`<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><p>一直以为 Git、Github、Gitlab 是同一家，原来搞错了~~</p><p><strong>Git</strong> 是一个版本管理工具，是可以在你电脑不联网的情况下，只在本地使用的一个版本管理工具，其作用就是可以让你更好的管理你的程序，比如你原来提交过的内容，以后虽然修改了，但是通过 Git 这个工具，可以把你原来提交的内容重现出来，这样对于你后来才意识到的一些错误的更改，可以进行还原</p><p>同属版本控制系统软件还有 SVN,CVS 等</p><h2 id="git-1" tabindex="-1"><a class="header-anchor" href="#git-1" aria-hidden="true">#</a> Git+</h2><p><strong>GitHub</strong></p><p>GitHub 是代码托管平台,提供代码托管服务，即不用自己搭建git服务器，直接使用GitHub作为远程仓库，便可以使用 Git 管理自己的项目</p><p><strong>GitLab</strong></p><p>GitLab 是由 GitLabInc.开发，使用MIT许可证的基于网络的 Git 仓库管理工具，且具有 wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 Web 服务。也可以作为 git 托管平台</p><h3 id="git、github与gitlab的区别" tabindex="-1"><a class="header-anchor" href="#git、github与gitlab的区别" aria-hidden="true">#</a> Git、GitHub与GitLab的区别</h3><ul><li><p>Git是一种版本控制系统，是一种工具，用于代码的存储和版本控制。</p></li><li><p>GitHub是一个基于Git实现的在线代码仓库，是目前全球最大的代码托管平台，可以帮助程序员之间互相交流和学习。</p></li><li><p>GitLab是一个基于Git实现的在线代码仓库软件，你可以用GitLab自己搭建一个类似于GitHub一样的仓库，但是GitLab 有完善的管理界面和权限控制，一般用于在企业、学校等内部网络搭建Git私服</p></li></ul><p>类似的代码托管平台还有：</p><ul><li><p>国外：Bitbucket 、sourceforge</p></li><li><p>国内：码云 、coding 、csdn 、腾讯云TGit 、阿里云CRP、 百度效率云</p></li></ul><h2 id="ssh-key" tabindex="-1"><a class="header-anchor" href="#ssh-key" aria-hidden="true">#</a> SSH-KEY</h2><p><strong>是什么：</strong></p><p>SSH 指 secure shell（一种安全的网络协议），Git 使用这种协议进行远程加密登录。SSH 登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在 Git 中一般分别命名为 <code>id_rsa.pub</code> 和 <code>id_rsa</code></p><p><strong>作用</strong></p><p>SSH 方式单独使用非对称的秘钥进行认证和加密传输，和账号密码分离开来，所以平时可以不需要账号密码也可以访问仓库</p><p>Git 基于多种传输协议，其中最常用的就是 <code>https</code> 和 <code>ssh</code>。都是为了数据传输安全，那么设置 SSH 密钥的目的是为了节省输入用户名密码的过程，同时保证传输安全</p><h3 id="https和ssh的clone方式区别" tabindex="-1"><a class="header-anchor" href="#https和ssh的clone方式区别" aria-hidden="true">#</a> https和SSH的clone方式区别</h3><p>在 Github 中 克隆仓库有两种模式：HTTPS 和 SSH，它们的区别如下：</p><ul><li><p>HTTPS：不管是谁，拿到 <code>url</code> 随便 <code>clone</code>，但是在 <code>push</code> 的时候需要验证用户名和密码</p></li><li><p>SSH：<code>clone</code> 的项目你必须是拥有者或者管理员，而且需要在 <code>clone</code> 前添加 SSH Key。SSH 在 <code>push</code> 的时候，是不需要输入用户名的，如果配置SSH-Key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的</p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>所以平时配置 Github 时，才需要使用 <code>ssh-keygen -t rsa -c &quot;邮箱&quot;</code> 命令来生成 SSH-KEY，这为了方便我们使用 SSH 方法克隆项目时使用，但不是必需的</p><h2 id="配置小记" tabindex="-1"><a class="header-anchor" href="#配置小记" aria-hidden="true">#</a> 配置小记</h2><h3 id="同时配置-github-和-gitlab-的ssh-key" tabindex="-1"><a class="header-anchor" href="#同时配置-github-和-gitlab-的ssh-key" aria-hidden="true">#</a> 同时配置 Github 和 Gitlab 的SSH-KEY</h3><p>此时就要就要生成两份 SSH-KEY</p><p><strong>添加 github key</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh-keygen -t rsa -C &quot;github邮箱&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时默认生成 <code>id_rsa.pub</code> 和 <code>id_rsa</code> 两个文件</p><p><strong>添加 gitlab key</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitlab -C &quot;gitlab邮箱&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多了 <code>-f ~/.ssh/id_rsa_gitlab</code> 用于设置生成的 SSH 文件名，如果不设的时候就会覆盖之前生的 Github 的 SSH</p><p><strong>在<code>.ssh</code> 文件夹下里面创建一个 <code>config</code> 文件</strong></p><p>配置文件添加 Host 和 <code>IdentityFile</code> 的匹配关系，这样 Git 会根据当前操作的仓库地址自动使用对应在的 rsa 文件，内容参考：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># default-github                                                                       
Host github.com
HostName github.com
User lanjz
IdentityFile ~/.ssh/id_rsa
# git_lab_1                                                                         
Host git.xxx.com.cn
HostName git.xxx.com.cn
User lanjz
IdentityFile ~/.ssh/id_rsa_gitlab
# 也可以配置多个git_lab_2
Host git.xxxx.cn
HostName git.xxxx.cn
User lanjz
IdentityFile ~/.ssh/id_rsa_gitlab                               
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查是否成功 <code>ssh -T git@github</code></p><h3 id="使用账号密码clone项目" tabindex="-1"><a class="header-anchor" href="#使用账号密码clone项目" aria-hidden="true">#</a> 使用账号密码CLONE项目</h3><p>格式：<code>git clone http://邮箱(或用户名):密码@仓库</code></p><p>如：</p><ul><li><p>git账号： <code>lanjz</code></p></li><li><p>git密码：<code>123@</code></p></li><li><p>仓库：<code>https://git.test.com/abc/demo</code></p></li></ul><p>克隆命令：<code>git clone https://lanjz:123%40@git.test.com/abc/demo</code></p><p>%40 表示 @</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如果帐号密码存在特殊字符，需要进行转换，可以使用 <code>encodeURIComponent</code> 方法转换后的结果进行代替</p></div><h2 id="回滚命令" tabindex="-1"><a class="header-anchor" href="#回滚命令" aria-hidden="true">#</a> 回滚命令</h2><p><code>git reset</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 回滚到上次提交状态，保留本地修改。
git reset HEAD~1
git reset &lt;commit&gt;

// 回滚，但不保留本地修改。
git reset --hard &lt;commit&gt;

// 从暂存区移除特定文件，相当于 unstage 一个文件。
git reset file

// 重置暂存区，相当于 unstage all。
git reset

// 清除掉所有未提交更改。相当于 unstage all + 撤销所有更改。
git reset --hard
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>reset 后面的参数说明</strong></p><ul><li><p>hard：慎用！回滚到指定的版本，不保留修改的代码</p><ol><li><p>移动本地库HEAD指针</p></li><li><p>重置暂存区</p></li><li><p>重置工作区</p></li></ol></li><li><p>soft: 仅仅是把本地库的指针移动了，而暂存区和你本地的代码是没有做任何改变的</p><ol><li>移动本地库HEAD指针</li></ol></li><li><p>mixed: 回滚后，不仅移动了本地库的指针，同时暂存区的东西也没了，意思就是你上次添加到暂存区的文件没了</p><ol><li><p>移动本地库HEAD指针</p></li><li><p>重置暂存区</p></li></ol></li><li><p>keep: 回滚后，本地代码就是你回退版本的代码,而暂存区是没有做任何改变的</p><ol><li><p>移动本地库HEAD指针</p></li><li><p>暂存区不变</p></li><li><p>重置工作区</p></li></ol></li></ul><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><p><strong>OpenSSL SSL_connect: Connection was reset in connection to github.com:443</strong></p><ol><li>如果你开启了VPN，很可能是因为代理的问题，关掉VPN重试</li></ol><p><strong>OpenSSL SSL_read: Connection was reset, errno 10054</strong></p><p>git config lfs.https://github.com/lanjz/Hello-Word.git/info/lfs.locksverify false</p>`,54),a=[d];function l(c,r){return i(),t("div",null,a)}const p=e(n,[["render",l],["__file","Git.html.vue"]]);export{p as default};
