import{_ as c,r as n,o as d,c as t,b as e,d as r,a as o,e as i}from"./app-tEWqIxV0.js";const l={},s=i(`<h1 id="react-ssr" tabindex="-1"><a class="header-anchor" href="#react-ssr" aria-hidden="true">#</a> React SSR</h1><p><img src="https://img1.3s78.com/codercto/bac37e796d88613610eb0188e0d46ae0" alt=""></p><h2 id="react-同构的关键要素" tabindex="-1"><a class="header-anchor" href="#react-同构的关键要素" aria-hidden="true">#</a> React 同构的关键要素</h2><p>###　DOM 的一致性</p><p>前后端相同的 Component , 将输出一致地 DOM 结构</p><p>完善的 Component 属性及生命周期与客户端的 render 时机是 React 同构的关键</p><p>React 的虚拟 DOM 以对象树的形式保存在内存中，并且是可以在任何支持 JavaScript 的环境中生成的，所以可以在浏览器和 Node 中生成，这位前后端同构提供了先决条件</p><p><img src="https://img1.3s78.com/codercto/3934a8041495bba7d63267c4ba65caf8" alt=""></p><p>如上图：</p><ol><li><p>在Node 是可以生成虚拟 DOM 的</p></li><li><p>虚拟 DOM 可以直接转成 String</p></li><li><p>然后插入到 HTML 文件中输出给浏览器便可</p></li></ol><p>虚拟 Dom 在前后端都是以对象树的形式存在的，但在展露原型的方式确是不一样的</p><p><img src="https://img1.3s78.com/codercto/e3bb89b85a40c33a209ad2fd50884025" alt=""></p><ol><li><p>在浏览器里，React 通过 ReactDom 的 render 方法将虚拟 Dom 渲染到真实的 Dom 树上，生成网页</p></li><li><p>但是在 Node 环境下是没有渲染引擎的，所以 React 提供了另外两个方法：<code>ReactDOMServer.renderToString</code>, <code>ReactDOMServer.renderToStaticMarkup</code></p></li></ol><ul><li><p><code>ReactDOMServer.renderToString</code>: 大多数情况应该使用这个方法，这样会为组件增加 <code>checksum</code></p><p><img src="https://img1.3s78.com/codercto/f964a6a81ffd1345af6a8b6b434c91b3" alt=""></p><p>React 在客户端通过 <code>checksum</code> 判断是否需要重新<code>render</code> 相同则不重新<code>render</code>，省略创建 DOM 和挂 载DOM 的过程， 接着触发 <code>componentDidMount</code> 等事件来处理服务端上的未尽事宜(事件绑定等)，从而加快了交互时间；不同时，组件将客户端上被重新挂载 <code>render</code></p><p>checknum 实际上是 HTML 片段的 adler32 算法值，实际上调用 <code>React.render(&lt;MyComponent /&gt;, container)</code>; 时候做了下面一些事情：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>container
data-react-checksum
var MOD = 65521;

// This is a clean-room implementation of adler32 designed for detecting
// if markup is not what we expect it to be. It does not need to be
// cryptographically strong, only reasonably good at detecting if markup
// generated on the server is different than that on the client.
function adler32(data) {
  var a = 1;
  var b = 0;
  for (var i = 0; i &lt; data.length; i++) {
    a = (a + data.charCodeAt(i)) % MOD;
    b = (b + a) % MOD;
  }
  return a | (b &lt;&lt; 16);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>ReactDOMServer.renderToStaticMarkup</code>: <code>renderToStaticMarkup</code> 则不会生成与 <code>react</code> 相关的 <code>data-*</code> ，也不存在 <code>checksum</code>，输出的 html 如下</p><p><img src="https://img1.3s78.com/codercto/ff5605d3dd006471e8e2c30be214d4b0" alt=""></p><p>在客户端时组件会被重新挂载，所以该方法只当服务端上所渲染的组件在客户端不需要时才使用</p></li></ul><h3 id="不同的生命周期" tabindex="-1"><a class="header-anchor" href="#不同的生命周期" aria-hidden="true">#</a> 不同的生命周期</h3><p>在服务端上 Component 生命周期只会到 <code>componentWillMount</code> ，客户端则是完整的</p><p>同构时，服务端结合数据将 Component 渲染成完整的 HTML 字符串并将数据状态返回给客户端，客户端会判断是否可以直接使用或需要重新挂载</p><p>以上便是 React 在同构/服务端渲染的提供的基础条件。在实际项目应用中，还需要考虑其他边角问题，例如 服务器 端没有 window 对象，需要做不同处理等</p>`,18),p={href:"https://www.codercto.com/a/21069.html",target:"_blank",rel:"noopener noreferrer"};function m(v,h){const a=n("ExternalLinkIcon");return d(),t("div",null,[s,e("p",null,[e("a",p,[r("React 服务端渲染原理及过程"),o(a)])])])}const b=c(l,[["render",m],["__file","服务端渲染.html.vue"]]);export{b as default};
