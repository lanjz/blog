import{_ as e,o as a,c as n,e as c}from"./app-ly5YjvTc.js";const o={},d=c(`<h1 id="package管理" tabindex="-1"><a class="header-anchor" href="#package管理" aria-hidden="true">#</a> Package管理</h1><h2 id="npm-命令" tabindex="-1"><a class="header-anchor" href="#npm-命令" aria-hidden="true">#</a> NPM 命令</h2><p><strong>查看模块包信息</strong></p><ul><li><p><code>npm list</code>: 查看所有已安装的 npm 软件包（包括它们的依赖包）的最新版本</p></li><li><p><code>npm list -g</code>: 查看所有已安装的全局 npm 包</p></li><li><p><code>npm list -g --depth=0</code>: 仅获取顶层的软件包</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>├── gitbook<span class="token operator">-</span>cli@<span class="token number">2.3</span><span class="token number">.2</span>
├── npm@<span class="token number">6.13</span><span class="token number">.4</span>
├── nrm@<span class="token number">1.2</span><span class="token number">.1</span>
└── yarn@<span class="token number">1.19</span><span class="token number">.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>npm list -g yarn</code>: 可以通过指定名称来获取特定软件包的版本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>└── yarn@<span class="token number">1.19</span><span class="token number">.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>npm view [package_name] version</code>: 查看软件包在 npm 仓库上最新的可用版本</p></li><li><p><code>npm view [package_name] versions</code>: 查看软件包在 npm 仓库上所有的以前的版本</p></li></ul><p><strong>安装模块包</strong></p><ul><li><p><code>npm install</code>: 根据 <code>package.json</code> 配置安装模块到 <code>node_modules</code>，并自动添加到在 <code>package.json</code> 文件中的 <code>dependencies</code> 列表下（在 npm 5 之前：必须手动指定 <code>--save</code>）</p><p>当添加了 <code>-D</code> 或 <code>--save-dev</code> 标志时，则会将其安装为开发依赖项（会被添加到 <code>devDependencies</code> 列表）</p><p>当投入生产环境时，如果输入 <code>npm install</code> 且该文件夹包含 <code>package.json</code> 文件时，则会安装它们(<code>devDependencies</code> 列表和 <code>dependencies</code> 列表)，因为 npm 会假定这是开发部署</p><p>需要设置 <code>--production</code> 标志（<code>npm install --production</code>），以避免安装这些开发依赖项</p></li><li><p><code>npm install &lt;packagename&gt;</code>: 安装最新的可用版本并放入 <code>node_modules</code> 文件夹中，并且还会将相应的条目添加到当前文件夹中存在的 <code>package.json</code> 和 <code>package-lock.json</code> 文件中</p></li><li><p><code>npm install &lt;package&gt;@&lt;version&gt;</code>: 可以使用 <code>@</code> 语法来安装 npm 软件包的旧版本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install cowsay
<span class="token comment">// 以上命令会安装 1.3.1 版本（在撰写本文时）</span>

<span class="token comment">// 使用以下命令可以安装 1.2.0 版本：</span>
npm install cowsay@<span class="token number">1.2</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>npm update</code>: 更新已安装的模块版本，并且 <code>package-lock.json</code> 文件会被新版本填充，<code>package.json</code> 则保持不变</p></li><li><p><code>npm outdated {-g}</code>: 列出已安装模块与相应可使用的最新版本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm outdated <span class="token operator">-</span>g

Package  Current  Wanted  Latest  Location
npm       <span class="token number">6.13</span><span class="token number">.4</span>  <span class="token number">6.14</span><span class="token number">.7</span>  <span class="token number">6.14</span><span class="token number">.7</span>  global
yarn      <span class="token number">1.19</span><span class="token number">.1</span>  <span class="token number">1.22</span><span class="token number">.4</span>  <span class="token number">1.22</span><span class="token number">.4</span>  global
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="语义版本控制" tabindex="-1"><a class="header-anchor" href="#语义版本控制" aria-hidden="true">#</a> 语义版本控制</h2><p>语义版本控制的概念很简单：所有的版本都有 3 个数字：<code>x.y.z</code></p><ul><li><p>第一个数字是主版本</p></li><li><p>第二个数字是次版本</p></li><li><p>第三个数字是补丁版本</p></li></ul><p>当发布新的版本时，不仅仅是随心所欲地增加数字，还要遵循以下规则：</p><ul><li><p>当进行不兼容的 API 更改时，则升级主版本</p></li><li><p>当以向后兼容的方式添加功能时，则升级次版本</p></li><li><p>当进行向后兼容的缺陷修复时，则升级补丁版本</p></li></ul><p>npm 设置了一些规则，可用于在 package.json 文件中选择要将软件包更新到的版本（当运行 npm update 时）</p><p>这些规则的详情如下：</p><ul><li><p><code>^</code> : 如果写入的是 <code>^0.13.0</code>，则当运行 <code>npm update</code> 时，会更新到补丁版本和次版本：即 <code>0.13.1</code>、<code>0.14.0</code>、依此类推</p></li><li><p><code>~</code>: 如果写入的是 <code>〜0.13.0</code>，则当运行 <code>npm update</code> 时，会更新到补丁版本：即 <code>0.13.1</code> 可以，但 <code>0.14.0</code> 不可 以</p></li><li><p><code>&gt;</code>: 接受高于指定版本的任何版本</p></li><li><p><code>&gt;=</code>: 接受等于或高于指定版本的任何版本</p></li><li><p><code>&lt;=</code>: 接受等于或低于指定版本的任何版本</p></li><li><p><code>&lt;</code>: 接受低于指定版本的任何版本</p></li><li><p><code>=</code>: 接受确切的版本</p></li><li><p><code>-</code>: 接受一定范围的版本。例如：<code>2.1.0 - 2.6.2</code></p></li><li><p><code>||</code>: 组合集合。例如 <code>&lt; 2.1 || &gt; 2.6</code></p></li></ul><p>可以合并其中的一些符号，例如 <code>1.0.0 || &gt;=1.1.0 &lt;1.2.0</code>，即使用 <code>1.0.0</code> 或从 <code>1.1.0</code> 开始但低于 <code>1.2.0</code> 的版本</p><ul><li><p>无符号: 仅接受指定的特定版本（例如 <code>1.2.1</code>）</p></li><li><p><code>latest</code>: 使用可用的最新版本</p></li></ul><p><strong>卸载 npm 软件包</strong></p><ul><li><p><code>npm uninstall &lt;package-name&gt;</code>: 卸载之前在本地安装</p><p>如果使用 <code>-S</code> 或 <code>--save</code> 标志，则此操作还会移除 <code>package.json</code> 文件中的引用</p><p>如果使用 <code>-D</code> 或 <code>--save-dev</code> 标志，则此操作还会移除 <code>package.json</code> 文件中的引用( <code>devDependencies</code>中)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm uninstall <span class="token operator">-</span><span class="token constant">S</span> <span class="token operator">&lt;</span><span class="token keyword">package</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>
npm uninstall <span class="token operator">-</span><span class="token constant">D</span> <span class="token operator">&lt;</span><span class="token keyword">package</span><span class="token operator">-</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>npm uninstall -g &lt;package-name&gt;</code>: 卸载已安装的全局模块</p></li></ul><h2 id="package-json-package-lock-json" tabindex="-1"><a class="header-anchor" href="#package-json-package-lock-json" aria-hidden="true">#</a> package.json/package-lock.json</h2><p><code>package.json</code> 文件是项目的清单。 它可以做很多完全互不相关的事情。 例如，它是用于工具的配置中心。 它也是 <code>npm</code> 和 <code>yarn</code> 存储所有已安装软件包的名称和版本的地方</p><p><code>package-lock.json</code> 旨在跟踪被安装的每个软件包的确切版本，以便产品可以以相同的方式被 100％ 复制（即使软件包的维护者更新了软件包）</p><p>当运行 <code>npm update</code> 时，<code>package-lock.json</code> 文件中的依赖的版本会被更新</p><h2 id="yarn-命令" tabindex="-1"><a class="header-anchor" href="#yarn-命令" aria-hidden="true">#</a> YARN 命令</h2><ul><li><code>yarn init</code>: 初始化一个新项目</li></ul><p><strong>安装</strong></p><ul><li><p><code>yarn or yarn install</code>: 安装 <code>package.json</code> 中的所有依赖</p></li><li><p><code>yarn add [模块] --dev</code>: 安装依赖并添加到 <code>devDependencies</code></p></li><li><p><code>yarn add [模块] --peer</code>: 安装依赖并添加到 <code>peerDependencies</code></p></li><li><p><code>yarn add [模块] --optional</code>: 安装依赖并添加到 <code>optionalDependencies</code></p></li><li><p><code>yarn upgrade [package | package@tag | package@version | --scope @scope]... [--ignore-engines] [--pattern]</code>: 此命令更新指定版本的依赖将依赖项更新到 <code>package.json</code> 和 <code>yarn.lock</code></p></li><li><p><code>yarn install --force</code>: 强制重新下载所有软件包</p></li><li><p><code>yarn install --production</code>: 仅安装生产依赖项</p></li></ul><p><strong>移除</strong></p><ul><li><code>yarn remove &lt;package...&gt;</code>: 移除模块</li></ul><h2 id="镜像管理" tabindex="-1"><a class="header-anchor" href="#镜像管理" aria-hidden="true">#</a> 镜像管理</h2><h3 id="查看一下镜像源" tabindex="-1"><a class="header-anchor" href="#查看一下镜像源" aria-hidden="true">#</a> 查看一下镜像源</h3><p><code>yarn config get registry</code></p><h3 id="切换为淘宝源" tabindex="-1"><a class="header-anchor" href="#切换为淘宝源" aria-hidden="true">#</a> 切换为淘宝源</h3><p><code>yarn config set registry https://registry.npm.taobao.org</code></p><h3 id="nrm" tabindex="-1"><a class="header-anchor" href="#nrm" aria-hidden="true">#</a> nrm</h3><p>使用 <code>nrm</code> 可以方便我们管理多个镜像源</p><p>安装<code>nrm</code>：<code>npm install nrm -g</code></p><ul><li><p>测试已有的源速度：<code>nrm test</code></p></li><li><p>查看源：<code>nrm ls</code></p></li><li><p>切换源：<code>nrm use taobao</code></p></li><li><p>添加源：<code>nrm add mypaas https://registry-npm.mypaas.com.cn</code></p></li></ul>`,37),s=[d];function p(l,i){return a(),n("div",null,s)}const t=e(o,[["render",p],["__file","index.html.vue"]]);export{t as default};
