import{_ as n,o as s,c as e,e as a}from"./app-quQJY7jk.js";const t={},i=a(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h2 id="接口和类型别名" tabindex="-1"><a class="header-anchor" href="#接口和类型别名" aria-hidden="true">#</a> 接口和类型别名</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 类型别名</span>
<span class="token keyword">type</span> <span class="token class-name">Alias</span> <span class="token operator">=</span> <span class="token punctuation">{</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>

<span class="token comment">// 接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>
    num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>两者都可以用来描述对象或函数的类型。与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组</p></li><li><p>类型别名不能被 <code>extends</code> 和 <code>implements</code>。也就是接口可以扩展，类型别名不行</p></li><li><p>类型别名不能参与 声明合并，但接口可以</p></li><li><p>接口只能用于 <code>声明对象的形状</code>，不能重命名基本类型.</p></li><li><p>接口名称将始终以其原始形式出现在错误消息中，但只有在按名称使用时才会出现</p></li></ul>`,4),c=[i];function p(l,o){return s(),e("div",null,c)}const r=n(t,[["render",p],["__file","index.html.vue"]]);export{r as default};
