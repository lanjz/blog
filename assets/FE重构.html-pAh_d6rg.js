import{_ as p,o as e,c as i,e as l}from"./app-quQJY7jk.js";const o={},c=l('<h1 id="重构内容分享" tabindex="-1"><a class="header-anchor" href="#重构内容分享" aria-hidden="true">#</a> 重构内容分享</h1><p>各位同事们下午好，前段时间对结算组这边的前端base框架的代码做了下重构. 重构的对象主要是以 <code>src</code> 目录里的代码为主。因为内容包含一些代码的展示，PPT 排版不方便，所以这次就以文档形式给大家分享.</p><p>这次分享内容主要是讲下这次修改的地方，同时对于改动的地方也会分享一下之所以这么修改的原因</p><p>所以这次的重构多少会带有一些自己的主观成分，还有个人编码习惯的喜好因素在里面</p><p>所以呆会儿在介绍具体改动的时候，如果大家觉得有不一样的建议和想法，都可以随时中断我，然后一起讨论一下。最后如果大家觉得还有其它可以优化的地方，都可以提起来，之后都会安排优化进去</p><h2 id="重构-重构的好处和目的" tabindex="-1"><a class="header-anchor" href="#重构-重构的好处和目的" aria-hidden="true">#</a> 重构？重构的好处和目的</h2><p>不懂大家平时是怎么理解重构这个词的，应该有人觉得重构是指对系统非常大的修改才叫重构，比如更换编程语言、更换项目整体架构啥的</p><p>但实际上重构的本意是对软件内部结构的一种调整，目的是在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构， 提高其可理解性，降低其修改成本</p><p>所以重构是可大可小的，不是只给项目大修大补才叫重构，日常修复bug、修复缺陷也是重构</p><h3 id="重构的目的" tabindex="-1"><a class="header-anchor" href="#重构的目的" aria-hidden="true">#</a> 重构的目的</h3><p>所以重构有什么好外呢？</p><ul><li><p>第一点是为了改进软件设计</p><p>代码结构的流失是累积性的，一开始从0到1开发的时候往往会认真得去设计我们的代码。但随着平时的不断迭代、开发的过程中，程序渐渐就失去了原本的结构，所以有时重构很像是整理代码，把所有的东西放回到应处的位置上</p></li><li><p>第二点好处可以使程度更容易理解</p></li></ul><p>我们平时迭代开发的时候，往往注意力全在完成功能上，不会为未来的接盘侠做考虑，换句话说就是不考虑代码的易理解性。 此时重构就是为了改善代码，让代码更好地表达自己的用途。 增加代码易理解性，方便未来的修改。</p><ul><li>第三点就是可以帮助找bug</li></ul><p>重构一方面可以改善代码，另一方面可以帮助我们更加熟悉代码，这些都可以帮助我们更快定位 bug</p><ul><li>最后就是提高编程速度</li></ul><p>如果我们编写的代码更简单更容易理解，那么开发者就能将更多精力集中在需求功能上，提高工作效率</p><h3 id="何时需要重构" tabindex="-1"><a class="header-anchor" href="#何时需要重构" aria-hidden="true">#</a> 何时需要重构</h3><p>那么什么时候需要重构代码呢？</p><ul><li><p>添加功能时原有的代码设计无法帮助我们轻松添加新功能时</p><p>这种情况有可能是之前代码扩展性低、也有可能是之前的代码设计太简单已经不能满足新功能了</p></li><li><p>当发生 bug，回想代码却没能清晰到让你马上定位到 bug 位置时</p><p>这可能是原有功能设计太复杂等原因</p></li><li><p>代码难以理解的时候</p><p>比如当回头看自己之前的写的代码却看不懂的时候，自己都看不懂的时候，别人更不容易看懂了</p></li></ul><p>这里就大概举这么个例子. 反正当出现这些场景的时候就说明代码需要改善了</p><p>这次之所以会去想重构前端 base 框架，原因入职后就开始使用这个框架来开发项目了，在项目开始开发的时候花了些时间去看了代码和功能，然后觉得有几点问题：</p><ul><li><p>作为一个模板性质的框架，仍然存在冗余的代码，没用的代码都没删掉，这些多余的代码和功能个人看着非常难受</p></li><li><p>项目包括目录结构、代码组织，就个人而言有点凌乱，设计得不够简洁明了</p></li><li><p>有些功能点的设计和代码编写差点意思，比如权限控制那块</p></li></ul><p>所以花时间重构下，当然还有一些细节还需要继续完善，所以趁着这次交流一下，之后再安排时间改进</p><p>那现在就步入正题</p><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录" aria-hidden="true">#</a> 目录</h2><p>目录结构建议先分大类再具体分小类，如右边的例子。 sf-icon 里面放的是字体图标 svg-icon 里面是 svg 格式的图标，这两个再一放在 icon 目录下</p><p>所以这次项目的根目录做了如下的调整</p><ul><li><p><code>icons</code> 和 <code>style</code> 两个目录移到 <code>assets</code> 目录下</p></li><li><p><code>layout</code> 和 <code>login</code> 都是属于页面，所以他们应该放在 <code>view</code> 目录下面</p></li><li><p><code>permission.js</code> 移到了 <code>router</code> 目录里面.</p><p>以前使用纯 JS 且没用框架开发的项目会把权限控制放在根目录下面. 但是现在使用框架开发的项目跟之前还是有区别的，这个 <code>permission.js</code> 里面的内容是路由拦截器配置，本质他是属于 <code>vue-router</code> 配置项之一</p></li><li><p><code>setting.js</code> 这个文件我删掉了. 框架预留了一些布局和一些简单的功能选项，这个文件的作用是控制这些配置的开关. 我之所以删掉的原因主以下几点：</p><ol><li><p>这些预留的配置基本属于一次性的功能，剩余配置在后期大概率是用不到的</p></li><li><p>项目为了实现这些可选的功能，代码无疑需要做一些适配工作，适配的方式无外乎是通过 <code>if</code> 和样式类名取舍来控制，没用到部分基本属于永久性的冗余代码</p></li><li><p>代码越多越复杂，反而增加了这部份的理解成本和维护维度</p></li><li><p>代码越少运行越快、更容易看得懂，保持代码的简洁性，在项目启动的时候根据需要再去修改就行了</p></li></ol></li><li><p><code>api</code> 这个目录是用于统一管理接口 <code>api</code> 的地方，目录我是想删除的. 理由为：</p><ul><li><p>以样式管理作为参考，以前的样式的管理也是抽离到单独的文件进行管理。但是后来组件化的开发思想流行之后反而是建议把样式也放集中写在组件当中，因为这样组件独立性更强，维护起来也更容易定位到位置.</p></li><li><p>关于可能存在的批量修改问题，现在我们使用的编辑器提供了很强大的搜索和替换功能，所以批量修改重复出现的 api 也不难操作</p></li><li><p>随便要管理的 api 数量增加，这种方式是否真能有利于维护，我是持保留态度</p></li></ul></li></ul>',29),d=[c];function a(r,s){return e(),i("div",null,d)}const n=p(o,[["render",a],["__file","FE重构.html.vue"]]);export{n as default};
