import{_ as n,o as s,c as a,e as p}from"./app-ly5YjvTc.js";const t={},e=p(`<h1 id="页面鉴权" tabindex="-1"><a class="header-anchor" href="#页面鉴权" aria-hidden="true">#</a> 页面鉴权</h1><p>本文主要记录一下基于 Vue 开发的页面鉴权</p><p>首先关于页面鉴权这块需要考虑哪些问题：</p><h3 id="路由结构" tabindex="-1"><a class="header-anchor" href="#路由结构" aria-hidden="true">#</a> 路由结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> menuRoutes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 菜单路由</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> reoutes <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> Index<span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> menuRoutes
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> Login<span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;login&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设粟子中的 <code>Index.vue</code> 页面包含 <code>菜单组件+&lt;router-view&gt;</code> 两个组件 ，这个 <code>&lt;router-view&gt;</code> 是用来显示菜单路由的，从页面结构来说所有的菜单路由都是这个 <code>Index.vue</code> 的子路由。</p><p>要注意的是菜单数据的结构只是用于菜单组件的显示，不要跟路由配置混在一起，假设当前有一个菜单为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>        ┌ 页面一
- 菜单  -|
        └ 页面一
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 <code>menuRoutes</code> 的路由配置应该是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> menuRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/menu/page1&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> Page1<span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;page1&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/menu/page2&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> Page2<span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;page2&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>     
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这个错误的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> menuRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span>
      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/menu&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">component</span><span class="token operator">:</span> Menu<span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;menu&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
         <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;page1&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> Page1<span class="token punctuation">,</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;page1&#39;</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token punctuation">{</span>
            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;page2&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">component</span><span class="token operator">:</span> Page2<span class="token punctuation">,</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;page2&#39;</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何控制用户可访问的页面" tabindex="-1"><a class="header-anchor" href="#如何控制用户可访问的页面" aria-hidden="true">#</a> 如何控制用户可访问的页面</h3><p>在登录后获取到用户可访问的菜单，一般来说这个菜单结构是树形的，但是只我们关心页面组别的菜单，然后通过遍历得到页面级别的菜单项再匹配得到对应的路由，然后通过 <code>addRoute(&#39;index&#39;, config)</code> 动态添加为 <code>Index.vue</code> 的子路由</p><p>动态添加完成之后就判断当前访问的路径是否是有效的路由，如果不是则跳到其它任一页面中</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>可以通过 <code>router.getRoutes()</code> 获取当前已经注册的所有路由</p></div><h3 id="在哪里做鉴权判断" tabindex="-1"><a class="header-anchor" href="#在哪里做鉴权判断" aria-hidden="true">#</a> 在哪里做鉴权判断</h3><p>经过实践在 <code>router.beforeEach</code> 中做鉴权判断是最佳的方式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token function-variable function">doNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">tar<span class="token operator">=</span><span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 执行这个方法，说明已经登录，之后就是判断目标路由是否是已经注册的路由</span>
    <span class="token keyword">let</span> isValidRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>path <span class="token operator">===</span> to<span class="token punctuation">.</span>path<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isValidRoute<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> similarRoute <span class="token operator">=</span> router<span class="token punctuation">.</span><span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token comment">// 如果没有匹配到当前路由，则尝试跳转到类似路径开头的路由，比如当前路径为 \`/menu\`，那么可以直接跳到 \`/menu/page1\` 中</span>
      <span class="token function">next</span><span class="token punctuation">(</span>similarRoute <span class="token operator">?</span> similarRoute<span class="token punctuation">.</span>path<span class="token operator">:</span> <span class="token string">&#39;/404&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">退出登录后要做的事情</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>已经登录<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 已经登录</span>
    <span class="token function">doNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span> err <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">静默登录</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 通过未过期的cookie等方式，尝试直接登录</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token function">doNext</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">)</span> <span class="token comment">// 使用 next(to.path) 而不是使用 next()，重新进入路由进行匹配</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 跳到登录页，如果 静默登录() 包含了前端登录页的逻辑，这里可以直接忽略</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的静默登录成功后，执行的是 <code>next(to.path)</code> 面不是 <code>next()</code>，因为如果当前从浏览器直接访问需要鉴权的页面，此时还没鉴权，也就意味着当前匹配不到目标路由，那么页面匹配到一个空白页面获者 404 页面，之后即使 <code>addRoute</code> 执行成功后， <code>next()</code> 也不会进行路由的重新匹配，所以使用 <code>next(to.path)</code>，再次跳到相同页面来激活路由匹配</p><p><strong>为什么不在app.vue中做鉴权</strong></p><p>考虑这个场景：点击退出后 <code>push</code> 到登录页，再点击返回到首页，此哪并不会重新触发鉴权，<code>app.vue</code> 是根页面，并不会重新执行 <code>mounted</code> 钩子</p><p><strong>为什么不在Index.vue中做鉴权</strong></p><p>考虑这个场景：因为当用户直接进入到需要鉴权的页面，需要通过异步鉴权后，无法直接匹配页面组件产生页面空白</p>`,24),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","页面鉴权.html.vue"]]);export{r as default};
