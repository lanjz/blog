import{_ as a,r as e,o as p,c as t,b as n,d as o,a as l,e as c}from"./app-QMonxybV.js";const i="/lanjz/assets/w5_1-aAQeBiaX.jpeg",r="/lanjz/assets/w5_2-UyZlOIWK.jpeg",d="/lanjz/assets/w5_3-euEHobb6.jpeg",u="/lanjz/assets/w5_1-c0xVFbGg.png",k="/lanjz/assets/w5_2-I7rQK5Nm.png",v={},m=c(`<h1 id="webpack5-新特性" tabindex="-1"><a class="header-anchor" href="#webpack5-新特性" aria-hidden="true">#</a> Webpack5 新特性</h1><p>在使用webpack的时候，我们常常会做一些优化，比如：</p><ol><li><p>构建速度优化</p></li><li><p>代码体积优化</p></li><li><p>持久化缓存优化</p></li><li><p>Module Federation</p></li></ol><p>到了webpack5，这些优化措施都变得更加的简单和效果显著了</p><h2 id="构建速度优化" tabindex="-1"><a class="header-anchor" href="#构建速度优化" aria-hidden="true">#</a> 构建速度优化</h2><p>在webpack4中，为了让我们的构建速度更快，我们通常需要借助一些插件或一些额外的配置来达到目的. eg:</p><ol><li><p><code>cache-loader</code>，针对一些耗时的工作进行缓存。比如缓存 <code>babel-loader</code> 的工作</p></li><li><p><code>terser-webpack-plugin</code> 或 <code>uglifyjs-webpack-plugin</code> 的 cache 以及 parallel。（默认开启）</p></li></ol><p>比如我们会借助 <code>cache-loader</code> 去对我们构建过程中消耗性能比较大的部分进行缓存，缓存会存放到硬盘中 <code>node_modules/.cache/cache-loader</code>，缓存的读取和存储是会消耗性能的，所以只推荐用在性能开销大的地方</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 对babel-loader的工作进行缓存</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;cache-loader&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>terserPlugin 继承自 uglifyjsPlugin，我们可以开启插件的 <code>cache</code> 以及 <code>parallel</code> 特性来加快压缩。（ terserPlugin 是 Webpack 推荐及内置的压缩插件，<code>cache</code> 与 <code>parallel</code> 默认为开启状态）缓存路径在 <code>node_modules/.cache/terser-webpack-plugin</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">minimizer</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">TerserPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">// 开启该插件的缓存，默认缓存到node_modules/.cache中</span>
      <span class="token literal-property property">parallel</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 开启“多线程”，提高压缩效率</span>
      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到了 Webpack5 ，可以通过 <code>cache</code> 特性来将 Webpack 工作缓存到硬盘中。存放的路径为 <code>node_modules/.cache/webpack</code></p><ol><li><p>开发环境默认值为 <code>cache.type = &quot;memory&quot;</code></p></li><li><p>生产环境可手动设为 <code>cache.type = &quot;filesystem&quot;</code></p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;filesystem&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;your_version&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="持久化缓存的优化" tabindex="-1"><a class="header-anchor" href="#持久化缓存的优化" aria-hidden="true">#</a> 持久化缓存的优化</h2><p>在日常开发中我们会尽量减少文件 <code>hash</code> 发生变化的情况，以最大化的利用缓存，节省流量。这就是我们常说的“优化持久化缓存”。首先最简单的措施就是使用 <code>contenthash</code> 来作为文件哈希后缀，只有当文件内容发生变化的时候，哈希才会发生改变。但是这样并不够。我们还是会遇到这样的问题：</p><p><img src="`+i+`" alt=""></p><p>当我们新增一个模块时：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在入口文件index.js新增了模块demo</span>
<span class="token comment">// ...</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./demo&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ... </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><p>所有文件的哈希后缀都发生了改变，不符合期望，vender～xxx.js的hash不应发生变化</p><p>继续当我们新增一个入口的时候：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token literal-property property">index2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./src/index2.js&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt=""></p><p>同样的所有文件的哈希后缀都发生了改变，不符合期望，原有文件hash不应发生变化。</p><p><strong>问题原因</strong></p><p>在 Webpack4 中，chunkId 与 <code>moduleId</code> 都是自增 <code>id</code>。也就是只要我们新增一个模块，那么代码中 <code>module</code> 的数量就会发生变化，从而导致 <code>moduleId</code> 发生变化，于是文件内容就发生了变化。<code>chunkId 也是如此，新增一个入口的时候，</code>chunk<code> 数量的变化造成了</code>chunkId \`的变化，导致了文件内容变化</p><p><strong>解决方法</strong></p><p>Webpack4可以通过设置 <code>optimization.moduleIds = &#39;hashed&#39;</code> 与 <code>optimization.namedChunks=true</code> 来解决这写问题，但都有性能损耗等副作用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">moduleIds</span><span class="token operator">:</span> <span class="token string">&#39;hashed&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">namedChunks</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 Webpack5 在 <code>production</code> 模式下 <code>optimization.chunkIds</code> 和 <code>optimization.moduleIds</code> 默认会设为 <code>&#39;deterministic&#39;</code> ，Webpack会采用新的算法来计算确定性的 chunkId 和 moduleId。默认即可避免上述情况发生。</p><p><img src="`+u+`" alt=""></p><h2 id="包代码体积的优化" tabindex="-1"><a class="header-anchor" href="#包代码体积的优化" aria-hidden="true">#</a> 包代码体积的优化</h2><p>为了让我们的打出来的包体积更加小，颗粒度更加明确。我们经常会用到 Webpack 的代码分割 splitchunk 以及 tree shaking。在 Webpack5 中，这两者也得到了优化与加强</p><h3 id="splitchunks" tabindex="-1"><a class="header-anchor" href="#splitchunks" aria-hidden="true">#</a> SplitChunks</h3><p>SplitChunks 配置示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">javascript</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
     <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 默认配置</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token comment">// https://github.com/webpack/changelog-v5#changes-to-the-configuration</span>
  <span class="token comment">// https://webpack.js.org/plugins/split-chunks-plugin/</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">splitChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">chunks</span><span class="token operator">:</span> <span class="token string">&#39;async&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 只对异步加载的模块进行处理</span>
      <span class="token literal-property property">minSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">javascript</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> <span class="token comment">// 模块要大于30kb才会进行提取</span>
        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token number">50000</span><span class="token punctuation">,</span> <span class="token comment">// 模块要大于50kb才会进行提取</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minRemainingSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 代码分割后，文件size必须大于该值    （v5 新增）</span>
      <span class="token literal-property property">maxSize</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// 被提取的模块必须被引用1次</span>
      <span class="token literal-property property">maxAsyncRequests</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 异步加载代码时同时进行的最大请求数不得超过6个</span>
      <span class="token literal-property property">maxInitialRequests</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件加载时最大同时请求数不得超过4个</span>
      <span class="token literal-property property">automaticNameDelimiter</span><span class="token operator">:</span> <span class="token string">&#39;~&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 模块文件名称前缀</span>
      <span class="token literal-property property">cacheGroups</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token comment">// 分组，可继承或覆盖外层配置</span>
        <span class="token comment">// 将来自node_modules的模块提取到一个公共文件中 （又v4的vendors改名而来）</span>
        <span class="token literal-property property">defaultVendors</span><span class="token operator">:</span> <span class="token punctuation">{</span>                                                                      
          <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\\\/]node_modules[\\\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">10</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token comment">// 其他不是node_modules中的模块，如果有被引用不少于2次，那么也提取出来</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">minChunks</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
          <span class="token literal-property property">priority</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span>
          <span class="token literal-property property">reuseExistingChunk</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking" aria-hidden="true">#</a> Tree Shaking</h3><p>同时tree shaking也得到了加强，可以覆盖更多场景</p><ul><li><p>Nested tree-shaking</p></li><li><p>Inner-module tree-shaking</p></li></ul><h3 id="node-js-polyfills" tabindex="-1"><a class="header-anchor" href="#node-js-polyfills" aria-hidden="true">#</a> Node.js Polyfills</h3><p>webpack5之前，Webpack 会自动的帮我们项目引入 Node 全局模块 polyfill。我们可以通过 node 配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// false: 不提供任何方法（可能会造成bug），&#39;empty&#39;:  引入空模块, &#39;mock&#39;: 引入一个mock模块，但功能很少</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">console</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">process</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是 Webpack 团队认为，现在大多数工具包多是为前端用途而编写的，所以不再自动引入 polyfill。我们需要自行判断是否需要引入 polyfill，当我们用Webpack5 打包的时候，Webpack会给我们类似如下的提示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 在项目中我使用到了 crypto 模块，webpack5会询问是否引入对应的 polyfill。
Module not found: Error: Can&#39;t resolve &#39;crypto&#39; in &#39;/Users/xxx/Documents/private-project/webpack/ac_repair_mobile_webpack_5/node_modules/sshpk/lib/formats&#39;

BREAKING CHANGE: webpack &lt; 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need these module and configure a polyfill for it.

If you want to include a polyfill, you need to:
        - add an alias &#39;resolve.alias: { &quot;crypto&quot;: &quot;crypto-browserify&quot; }&#39;
        - install &#39;crypto-browserify&#39;
If you don&#39;t want to include a polyfill, you can use an empty module like this:
        resolve.alias: { &quot;crypto&quot;: false }

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Webpack5 中，增加了 <code>resolve.alias</code> 配置项来告诉 Webpack 是否需要引入对应 polyfill。node 配置项也做了调整</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">crypto</span><span class="token operator">:</span> <span class="token string">&#39;crypto-browserify&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// ..</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>  
  <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// https://webpack.js.org/configuration/node/#root</span>
    <span class="token comment">// 只能配置这三个</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__filename</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__dirname</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说到了 Webpack5，我们需要清楚自己的项目需要引入哪些 node polyfill。更加了配置的门槛，但是减少了代码的体积。</p><p>webpack5 中将 <code>path</code>、<code>crypto</code>、<code>http</code>、<code>stream</code>、<code>zlib</code>、<code>vm</code> 的 node polyfill取消后效果如下图：</p><p><img src="`+k+`" alt=""></p><h2 id="module-federation" tabindex="-1"><a class="header-anchor" href="#module-federation" aria-hidden="true">#</a> Module Federation</h2><p>模块联邦制，使 JavaScript 应用得以从另一个 JavaScript 应用中动态地加载代码 —— 同时共享依赖。项目分为Host（消费者），remote（被消费者）。功能实现主要依靠 ModuleFederationPlugin 插件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>， <span class="token comment">// 名称，唯一id</span>
       <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 以什么形式暴露，比如umd </span>
       <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>  <span class="token comment">// 输出的入口文件名称</span>
       <span class="token literal-property property">exposes</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 要输出的组件或方法</span>
       <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 要共享的依赖</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如 app1， 输出log方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;app1&#39;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;var&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;app1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;appOneEntry.js&#39;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">exposes</span><span class="token operator">:</span> <span class="token punctuation">{</span>
           <span class="token string-property property">&#39;./log&#39;</span><span class="token operator">:</span> <span class="token string">&#39;./util/logSomething&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>app2 使用 app1 中的 <code>logSomething</code> 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;app2&quot;</span><span class="token punctuation">,</span>
       <span class="token literal-property property">remotes</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">app1</span><span class="token operator">:</span> <span class="token string">&#39;app1@http://127.0.0.1:8887/demo-federation-1/dist/appOneEntry.js&#39;</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token literal-property property">shared</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),b={href:"https://github.com/HolyZheng/holyZheng-blog/issues/48",target:"_blank",rel:"noopener noreferrer"};function y(g,h){const s=e("ExternalLinkIcon");return p(),t("div",null,[m,n("blockquote",null,[n("p",null,[n("a",b,[o("webpack5新特性一览"),l(s)])])])])}const x=a(v,[["render",y],["__file","Webpack5新特性.html.vue"]]);export{x as default};
