import{_ as n,o as e,c as a,e as s}from"./app-quQJY7jk.js";const c={},t=s(`<h1 id="generater应用" tabindex="-1"><a class="header-anchor" href="#generater应用" aria-hidden="true">#</a> Generater应用</h1><h2 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h2><p>&quot;协程&quot;（coroutine），意思是多个线程互相协作，完成异步任务。协程有点像函数，又有点像线程。它的运行流程大致如下</p><ul><li><p>第一步，协程 A 开始执行</p></li><li><p>第二步，协程 A 执行到一半，进入暂停，执行权转移到协程 B</p></li><li><p>第三步，（一段时间后）协程 B 交还执行权</p></li><li><p>第四步，协程 A 恢复执行</p></li></ul><p>上面流程的协程 A，就是异步任务，因为它分成两段（或多段）执行。</p><p>举例来说，读取文件的协程写法如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">asyncJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...其他代码</span>
  <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span>fileA<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...其他代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的函数 <code>asyncJob</code> 是一个协程，它的奥妙就在其中的 <code>yield</code> 命令。它表示执行到此处，执行权将交给其他协程。也就是说，<code>yield</code> 命令是异步两个阶段的分界线。</p><p>协程遇到 <code>yield</code> 命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除 <code>yield </code>命令，简直一模一样</p>`,9),o=[t];function i(p,l){return e(),a("div",null,o)}const r=n(c,[["render",i],["__file","Generater应用.html.vue"]]);export{r as default};
