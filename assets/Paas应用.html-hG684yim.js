import{_ as e}from"./vue-render-xjCETQy-.js";import{_ as o,r as c,o as l,c as i,b as n,d as s,a as p,e as t}from"./app-p5-cwF4Z.js";const u={},r=n("h1",{id:"paas应用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#paas应用","aria-hidden":"true"},"#"),s(" PAAS应用")],-1),k=n("h2",{id:"render",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#render","aria-hidden":"true"},"#"),s(" render")],-1),d={href:"https://v2.cn.vuejs.org/v2/api/#render",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"render",-1),m=t('<p><img src="'+e+`" alt=""></p><p>上面提到了 <code>redner</code> 方法是字符串模板模板的代替方法，所以我们先理解一下这句话是什么意思</p><h2 id="template-模板到-dom" tabindex="-1"><a class="header-anchor" href="#template-模板到-dom" aria-hidden="true">#</a> Template 模板到 DOM</h2><p>通过一个例子来了解一下 Template 模板到真实 DOM 都做了哪些事实：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	{{name}}的列表:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, index) in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板解析" tabindex="-1"><a class="header-anchor" href="#模板解析" aria-hidden="true">#</a> 模板解析</h3><p>模板解析就是通过正则手段对模板字符串进行解析，生成 AST 抽象语法树，我们例子解析完成得到以下 AST：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">attrsList</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">attrsMap</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token keyword">class</span><span class="token operator">:</span><span class="token string">&quot;page&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">rawAttrsMap</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plain</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
	<span class="token literal-property property">staticClass</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span>page<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">type</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
			<span class="token literal-property property">expression</span><span class="token operator">:</span><span class="token string">&quot;_s(name)+&quot;</span><span class="token literal-property property">的列表</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tokens</span><span class="token operator">:</span><span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					@binding<span class="token operator">:</span><span class="token string">&quot;name&quot;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token string">&quot;的列表：&quot;</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;{{name}}的列表:&quot;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">attrsList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">attrsMap</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token string-property property">&quot;:key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
				<span class="token string-property property">&quot;v-for&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(item, index) in list&quot;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					<span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&quot;_s(item)&quot;</span>
					<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;{{item}}&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token punctuation">{</span>
							@binding<span class="token operator">:</span> <span class="token string">&quot;item&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token keyword">for</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span>
			<span class="token literal-property property">forProcessed</span><span class="token operator">:</span> <span class="token boolean">true</span>
			<span class="token literal-property property">iterator1</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token punctuation">(</span>父级的引用<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">plain</span><span class="token operator">:</span> <span class="token boolean">false</span>
			<span class="token literal-property property">pre</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">rawAttrsMap</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;span&quot;</span>
			<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将ast转换成函数字符串" tabindex="-1"><a class="header-anchor" href="#将ast转换成函数字符串" aria-hidden="true">#</a> 将AST转换成函数字符串</h3><p>根据上文的 AST 转换成一个函数字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span>
            <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span> <span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;page&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span>
                 <span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;的列表:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                 <span class="token function">_l</span><span class="token punctuation">(</span>
                    <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">key</span><span class="token operator">:</span>index<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
                  <span class="token punctuation">)</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>new Function</code> 方法将函数字符串转换成可执行函数，也就是 <code>render</code> 方法</p><p>上文的 <code> _c</code>， <code>_v</code> 都是 Vue 内置的一些方法，作用都是生成 <code>VNode</code><br> 比如例子中一开始要渲染的一个 DOM 节点 <code>&lt;div class=&quot;page&quot;&gt;&lt;/div&gt;</code>， 那么这个节点将转换成 <code>_c(&#39;div&#39;,{staticClass:&quot;page&quot;}，[])</code> 字符串,通过 <code>_c</code> 方法生成一个 <code>VNode</code> 节点</p><p>再比如 <code>v-for</code> 则使用 <code>_l</code> 方法进行渲染, <code>_l</code> 表示使用列表渲染，它将循环生成 <code>VNode</code>，从上文的转换结果可以看 <code>_l</code> 的第一个参数就是渲染源数据 <code>list</code>，每二个参数则是一个具体渲染子节点 <code>VNode</code> 的方法</p><p>除了 <code>_c</code> 、 <code>_l</code>，<code>Vue</code> 中还内置其它的生成 <code>VNode</code> 方法，如 <code>_v</code> 对应 <code>createTextVNode</code> 创建文本 <code>VNode</code>、<code>_s</code> 是生成字符串方法等等等等等等等</p><p><strong>总而言之：到一步就是为了生成 Render 方法</strong></p><h3 id="通过render方法-创建vnode" tabindex="-1"><a class="header-anchor" href="#通过render方法-创建vnode" aria-hidden="true">#</a> 通过<code>render</code>方法，创建VNode</h3><p>上文中 <code>render</code> 方法开始是 <code>with(this)</code> 语句<br><code>with</code> 的作用是设置当前上下文的作用域链，上面函数中的变量来源就是通过 <code>with</code> 来设置的 ，<code>with(this)</code> 中的 <code>this</code> 是指向 Vue 实例的（也就是 <code>date</code>、 <code>methods</code> 之类的）</p><p>使用 Demo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TONY&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment">//</span>
<span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 <code>redner</code> 方法生成的 <code>VNode</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>VNode<span class="token punctuation">{</span>
	<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;page&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		VNode<span class="token punctuation">{</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;lanjz的列表:&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		VNode<span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;__vlist_1_0__&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">0</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				VNode<span class="token punctuation">{</span>
					<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		VNode<span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;__vlist_1_1__&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				VNode<span class="token punctuation">{</span>
					<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 VNode 对象做了简化，可以看到其实结构跟之前 AST 对象有点相似，都是使用JS对象表示 <code>DOM</code> 元素节点，他们具体的区别是什么呢？</p><ul><li><p>AST只是模板的对象表示，并没结合具体的 <code>data</code> 值进行渲染</p></li><li><p><code>VNode</code> 是结合了 <code>vue指令</code> 和 <code>data</code> 值最终渲染出的 <code>DOM</code> 的对象描述</p></li></ul><h3 id="渲染成真实dom" tabindex="-1"><a class="header-anchor" href="#渲染成真实dom" aria-hidden="true">#</a> 渲染成真实DOM</h3><p>这一步就是遍历 <code>VNode</code> 转生成真实DOM，并插入到浏览器视图中</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p><code>template =&gt; AST =&gt; Render =&gt; VNode =&gt; DOM</code></p><h2 id="createelement-使用" tabindex="-1"><a class="header-anchor" href="#createelement-使用" aria-hidden="true">#</a> createElement 使用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// @returns {VNode}</span>
<span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token comment">// {String | Object | Function}</span>
  <span class="token comment">// 一个 HTML 标签名、组件选项对象，或者</span>
  <span class="token comment">// resolve 了上述任何一种的一个 async 函数。必填项。</span>
  <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>

  <span class="token comment">// {Object}</span>
  <span class="token comment">// 一个与模板中 attribute 对应的数据对象。可选。</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// (详情见下一节)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// {String | Array}</span>
  <span class="token comment">// 子级虚拟节点 (VNodes)，由 \`createElement()\` 构建而成，</span>
  <span class="token comment">// 也可以使用字符串来生成“文本虚拟节点”。可选。</span>
  <span class="token punctuation">[</span>
    <span class="token string">&#39;先写一些文字&#39;</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;一则头条&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">someProp</span><span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 <code>createElement()</code> 用法跟之前解析的模板例子非常的相似，再结合 VUE 对 <code>Redner</code> 方法的说明，就可以理解为什么说 Render 是可以代替字符串模板模板了</p><p><strong>因为我们平时编写的Vue模板最终也会转换成 Render 方法</strong></p><h2 id="配置化组件" tabindex="-1"><a class="header-anchor" href="#配置化组件" aria-hidden="true">#</a> 配置化组件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;region&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;活动区域&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;区域一&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;shanghai&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;区域二&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;beijing&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;region&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;是否默认&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;radio&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;是&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;shanghai&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;否&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;beijing&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;region&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;datePicker&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;活动区域&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常的封装方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>el<span class="token operator">-</span>form ref<span class="token operator">=</span><span class="token string">&quot;form&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;item in formConfig&quot;</span> <span class="token operator">:</span>label<span class="token operator">=</span><span class="token string">&quot;item.label&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;item.prop&quot;</span><span class="token operator">&gt;</span>
    
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;item.render===&#39;input&#39;&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;formModel[item.prop]&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">&gt;</span>
    
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>select v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;item.render===&#39;select&#39;&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;formModel[item.prop]&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;item.child&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;item.value&quot;</span> <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">&quot;item.value&quot;</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>option<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>select<span class="token operator">&gt;</span>
    
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>date<span class="token operator">-</span>picker v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;item.render===&#39;datePicker&#39;&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;date&quot;</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">&quot;formModel[item.prop]&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>date<span class="token operator">-</span>picker<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 还有<span class="token constant">N</span>多个 v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>问题：</strong></p><ul><li><p>以 elementUI 为例，有 15 个表单组件，如果得全支持的话就得写 15 个 <code>v-else-if</code>，如果需要支持更多自定义的组件话，那我们写的 <code>v-else-if</code> 会更多<br> 也就是意味着，这个配置化表单所支持的组件是需要手动维护的</p></li><li><p>单项组件独有的特性都得在代码中显性实现，比如 el-select 的 el-option，插槽等</p></li></ul><h3 id="使用-render-方法来实现" tabindex="-1"><a class="header-anchor" href="#使用-render-方法来实现" aria-hidden="true">#</a> 使用 Render 方法来实现</h3><p><strong>封装createElement</strong></p><p>为了更方便使用 <code>createElement</code>，先封装一下</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> noVModel</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> prop<span class="token punctuation">,</span> render<span class="token punctuation">,</span> child<span class="token punctuation">,</span> onEvent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token operator">...</span>attrs <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> render <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>
        render<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token operator">!</span>noVModel <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> ctx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>form<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 根据 noVModel 是否添加 V-MODEL 语法糖</span>
          <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token operator">!</span>noVModel <span class="token operator">?</span><span class="token punctuation">{</span><span class="token function-variable function">input</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>form<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> render <span class="token operator">===</span> <span class="token string">&#39;el-input&#39;</span> <span class="token operator">?</span> <span class="token punctuation">(</span>event<span class="token operator">||</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> event<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">...</span>onEvent<span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">...</span>onEvent<span class="token punctuation">}</span><span class="token punctuation">,</span>
          attrs
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        child<span class="token operator">&amp;&amp;</span>child<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">attrs</span><span class="token operator">:</span> item<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> ctx<span class="token punctuation">.</span>props<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>props<span class="token punctuation">.</span>form<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;CFormRender&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">functional</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">form</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">render</span><span class="token operator">:</span> createElement
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个组件将自动帮我们自动使用 <code>createElement</code> 方法渲染组件</p><p>上面只是简单的封装，<code>createElement</code> 方法中还有很多属性没有处理，但已经跢满足决大部分的使用场景</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>
      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elForm<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$attrs<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$listeners<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;c-form&#39;, formClass]<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span>
          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(column, index) in column<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>column.itemFormAttr<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>column.prop<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>column.label<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>render</span>
            <span class="token attr-name">:form</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>column<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">/&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就完成一个配置化表单组件<br> 配置的JSON也稍微改造一下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;el-input&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;region&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;活动区域&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;el-select&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">child</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;区域一&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;shanghai&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;el-option&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;区域二&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;beijing&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;el-option&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;region&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;是否默认&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;个性化的组件&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;region&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token string">&#39;el-datePicker&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;活动区域&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个配置化表单要渲染的组件将全部由组件外进行控制，也不需要进行个别的个性化特殊处理</p><h2 id="动态生成页面" tabindex="-1"><a class="header-anchor" href="#动态生成页面" aria-hidden="true">#</a> 动态生成页面</h2><p>基于上面的配置化表单，我们可以将这种实现思路进一步进行扩展，就是动态生成页面</p><p>因为我们的页面其实就是一个组件，只要是组件我们就可以直接使用 render 方法来创建，那么对于一些简单的页面我们可以省去页面的创建，直接动态渲染</p><h2 id="paas" tabindex="-1"><a class="header-anchor" href="#paas" aria-hidden="true">#</a> PAAS</h2><p>PAAS 应用的主要特点是页面是根据配置动态生成的</p><h3 id="运行过程" tabindex="-1"><a class="header-anchor" href="#运行过程" aria-hidden="true">#</a> 运行过程</h3><p>要实现动态渲染页面（组件），依靠的就是 VUE 提供的 <code>render</code> 方法</p><h2 id="render-1" tabindex="-1"><a class="header-anchor" href="#render-1" aria-hidden="true">#</a> render</h2>`,56),b={href:"https://cn.vuejs.org/v2/api/#paas%E6%B8%B2%E6%9F%93%E5%BA%94%E7%94%A8%E5%8E%9F%E7%90%86.md",target:"_blank",rel:"noopener noreferrer"},g={href:"http://doc.vue-js.com/v2/guide/render-function.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<ul><li><p>类型: <code>(createElement: () =&gt; VNode) =&gt; VNode</code></p></li><li><p>详细：</p><p>字符串模板的代替方案，允许你发挥 <code>JavaScript</code> 最大的编程能力。该渲染函数接收一个 <code>createElement</code> 方法作为第一个参数用来创建 <code>VNode</code>。</p><p>如果组件是一个函数组件，渲染函数还会接收一个额外的 <code>context</code> 参数，为没有实例的函数组件提供上下文信息。</p><p>Vue 选项中的 <code>render</code> 函数若存在，则Vue构造函数不会从 <code>template</code> 选项或通过 <code>el</code> 选项指定的挂载元素中提取出的 <code>HTML</code> 模板编译渲染函数。</p></li></ul><p><strong>简单来说 <code>render</code> 中的参数 <code>createElement方法</code> 就是创建VNode的方法</strong></p><p>我们来简单例子演示一下 <code>render</code> 方法的使用</p><p><strong>模板形式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> components1 <span class="token keyword">from</span> <span class="token string">&#39;./components1.vue&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;components-1&#39;</span><span class="token punctuation">,</span> components1<span class="token punctuation">)</span>

<span class="token comment">// components1.vue</span>
<span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>components<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>render形式</strong></p><p>使用 <code>render()</code> 方法实现上面的 <code>components1.vue</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;components-2&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
      <span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&#39;components-1&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>为什么可以使用<code>render</code>方法创建组件?</strong></p><p>这里简单介绍一下Vue的渲染机制</p><p><img src="https://raw.githubusercontent.com/lanjz/Hello-Word/master/_static/images/1578393221966_微信截图_20200107181533A.png" alt="avatar"></p><p>回顾一下下面几个使用场景</p><ol><li>初始时 Vue 项目</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span> <span class="token comment">// id为app的DOM元素</span>
<span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用字符串注册组件</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>Vue.component(&#39;components-1&#39;, {template: &#39;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>components-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>&#39;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>使用Vue模板注册组件</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>Vue.component(&#39;components-1&#39;, components1)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Vue 会将上面例子的组件使用一系列的方法转换成 <code>render</code> 函数，这个 <code>render</code> 方法的作用是生成 <code>VNode</code></p><p>这也是为什么官网介绍 <code>render</code> 时有这么一句话 <strong>render 比模板更接近编译器</strong> 的原因</p><p>也就是说当实例组件时，如果有 <code>render</code> 方法那么就直接使用这个 <code>render</code> 方法，接下再看 <code>render</code> 的参数 <code>createElement</code> 的使用</p><h3 id="createelement" tabindex="-1"><a class="header-anchor" href="#createelement" aria-hidden="true">#</a> createElement</h3><p><code>createElement</code>接收参数如下：</p><ul><li><p><code>tag</code>: {String | Object | Function}表示一个 HTML 标签名、组件选项对象</p></li><li><p><code>data</code>: 可选参数，表示 <code>VNode</code> 的数据，完整的数据对象如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token punctuation">{</span>
    <span class="token comment">// 和\`v-bind:class\`一样的 API</span>
    <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 和\`v-bind:style\`一样的 API</span>
    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;14px&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 正常的 HTML 特性</span>
    <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 组件 props</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">myProp</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// DOM 属性</span>
    <span class="token literal-property property">domProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">innerHTML</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 事件监听器基于 &quot;on&quot;</span>
    <span class="token comment">// 所以不再支持如 v-on:keyup.enter 修饰器</span>
    <span class="token comment">// 需要手动匹配 keyCode。</span>
    <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">click</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clickHandler
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。</span>
    <span class="token literal-property property">nativeOn</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">click</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nativeClickHandler
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 自定义指令. 注意事项：不能对绑定的旧值设值</span>
    <span class="token comment">// Vue 会为您持续追踨</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;my-custom-directive&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;2&#39;</span>
        <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&#39;1 + 1&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">modifiers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 如果子组件有定义 slot 的名称</span>
    <span class="token literal-property property">slot</span><span class="token operator">:</span> <span class="token string">&#39;name-of-slot&#39;</span>
    <span class="token comment">// 其他特殊顶层属性</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;myKey&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ref</span><span class="token operator">:</span> <span class="token string">&#39;myRef&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>children</code>：{String | Array} 表示子节点</p></li></ul><p>这里着重了解一下 <code>createComponent</code> 第一个参数 <code>tag</code> ， <code>tag</code> 可以有的类型以及对应的内部处理大致如下</p><ul><li><p>如果是 <code>String</code> 类型</p><ul><li><p>选判断如果是内置的一些节点，则直接创建一个普通 <code>VNode</code></p></li><li><p>如果是为已注册的组件名，则通过 <code>createComponent</code> 创建一个组件类型的 <code>VNode</code></p></li></ul></li><li><p>如果是 <code>tag </code>一个 Component 类型，则直接调用 <code>createComponent</code> 创建一个组件类型的 <code>VNode</code> 节点</p></li><li><p>其它值暂不讨论</p></li></ul><p>例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  {{ message }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相当于我们编写的如下 <code>render</code> 函数:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;app&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上文的 <code>createElement</code> 方法，表示创建一个 <code>id=app</code> 的 <code>div</code>，这个 <code>div</code> 内部有一个节点 <code>this.message</code>, <code>this.message</code> 在这里表示是一个文本节点</p><p>对 <code>render</code> 方法有了一些了解之后，接下来我们开始正入正createElement题</p><h2 id="paas应用创建" tabindex="-1"><a class="header-anchor" href="#paas应用创建" aria-hidden="true">#</a> PaaS应用创建</h2><p>看下 PAAS 引擎中的主组件的部分代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive <span class="token operator">:</span>exclude<span class="token operator">=</span><span class="token string">&quot;exclude&quot;</span> <span class="token operator">:</span>include<span class="token operator">=</span><span class="token string">&quot;include&quot;</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>router<span class="token operator">-</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;router-view&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">appMeta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">meta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> oldMeta <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
                    <span class="token comment">// 注册元数据所有的视图路由</span>
                    <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>meta<span class="token punctuation">.</span>views<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    	<span class="token comment">// 遍历配置的路由信息，生成一条Vue路由信息</span>
                        meta<span class="token punctuation">.</span>views<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">view</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                            <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> alias <span class="token punctuation">}</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>
                            <span class="token comment">// 获取路由额外配置属性：页面标题、是否子路由、是否需要登录、别名、当前角色 </span>
                            <span class="token keyword">const</span> routeMeta <span class="token operator">=</span> <span class="token function">getRouteMeta</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>isDynamicTitle<span class="token punctuation">,</span> self<span class="token punctuation">.</span>role<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">const</span> routeView <span class="token operator">=</span> <span class="token punctuation">{</span>
                                name<span class="token punctuation">,</span>
                                path<span class="token punctuation">,</span>
                                <span class="token literal-property property">meta</span><span class="token operator">:</span> routeMeta<span class="token punctuation">,</span>
                                <span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token keyword">return</span> <span class="token punctuation">{</span>
                                        <span class="token literal-property property">view</span><span class="token operator">:</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">router-view-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
                                    beforeRouteLeave<span class="token punctuation">,</span>
                                    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;view&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                    <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
                                        <span class="token keyword">return</span> <span class="token function">renderView</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>view<span class="token punctuation">,</span> self<span class="token punctuation">.</span>appMeta<span class="token punctuation">)</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span><span class="token punctuation">;</span>
                            <span class="token comment">// 如果已经包含这个路由，则不添加到routes中</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>routeView<span class="token punctuation">)</span>
                            <span class="token punctuation">}</span>
                            self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> view<span class="token punctuation">;</span>
                            <span class="token comment">// 如果存在children，则遍历并获取子路由，内容跟上面差不多</span>
                            <span class="token punctuation">(</span>view<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                                <span class="token keyword">const</span> childRouteView <span class="token operator">=</span> <span class="token punctuation">{</span>
                                    <span class="token literal-property property">name</span><span class="token operator">:</span> child<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
                                    <span class="token literal-property property">path</span><span class="token operator">:</span> child<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
                                    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token function">getRouteMeta</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>isDynamicTitle<span class="token punctuation">,</span> self<span class="token punctuation">.</span>role<span class="token punctuation">,</span> child<span class="token punctuation">,</span> routeMeta<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    <span class="token function">props</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        <span class="token keyword">return</span> <span class="token punctuation">{</span>
                                            <span class="token literal-property property">view</span><span class="token operator">:</span> self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>child<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                                    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                                        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">router-view-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>child<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
                                        beforeRouteLeave<span class="token punctuation">,</span>
                                        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;view&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                                        <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                            <span class="token keyword">return</span> <span class="token function">renderView</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>view<span class="token punctuation">,</span> self<span class="token punctuation">.</span>appMeta<span class="token punctuation">)</span>
                                        <span class="token punctuation">}</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span><span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>child<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>childRouteView<span class="token punctuation">)</span>
                                <span class="token punctuation">}</span>
                                self<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>child<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> child
                            <span class="token punctuation">}</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
    
                    <span class="token comment">// 最后动态生成路由</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>routes <span class="token operator">&amp;&amp;</span> routes<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        routes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;home&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        self<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>appMeta</code> 就是元数据，<code>handler</code> 函数主要功能就是遍历元数据中的页面信息，动态生成 Vue 路由</p><p>重点需要注意的是以下几点</p><ol><li>元数据中一条路由信息的结构信息如下</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span>39f228fd<span class="token operator">-</span>66cb<span class="token operator">-</span>0b40<span class="token operator">-</span>bffd<span class="token operator">-</span>e1d1829f4aab<span class="token punctuation">,</span> <span class="token comment">// 路由名称</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span><span class="token operator">/</span>39f228fd<span class="token operator">-</span>66cb<span class="token operator">-</span>0b40<span class="token operator">-</span>bffd<span class="token operator">-</span>e1d1829f4aab， <span class="token comment">// 路由路径</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">header</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 当前页面的头部信息。如：页面标题，是否显示页面标题等</span>
        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 当前页面包含的哪些组件</span>
                <span class="token punctuation">{</span>
                    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;b2c-search&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 组件名称</span>
                    <span class="token literal-property property">_key</span><span class="token operator">:</span> <span class="token string">&#39;b453edb8-439b-498f-ba8b-bc5c9165b01c&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 唯一标识</span>
                    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 组件配置信息，通过props传入当前组件中</span>
                        
                    <span class="token punctuation">}</span>
                    <span class="token literal-property property">routeAlias</span><span class="token operator">:</span> <span class="token string">&#39;/alias&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 路由别名</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span> <span class="token punctuation">,</span> 
        <span class="token punctuation">}</span>，
        <span class="token literal-property property">isLogin</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 进入页面前是否必须先登录</span>
        <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 别名</span>
        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>	
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>一个路由信息要加载的组件 <code>component</code> 也是通过 <code>render</code> 方法创建的</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">router-view-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>child<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            beforeRouteLeave<span class="token punctuation">,</span>
            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;view&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">renderView</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>view<span class="token punctuation">,</span> self<span class="token punctuation">.</span>appMeta<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>上面代码中的 <code>render</code> 方法执行的是 <code>renderView</code> 函数，看下 <code>renderView</code> 方法的定义</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node_modules/webapp/src/emulator/src/utils/renderView.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderView</span><span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> view<span class="token punctuation">,</span> appMeta</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isTabView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> tabIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>appMeta<span class="token punctuation">.</span>tabs <span class="token operator">&amp;&amp;</span> appMeta<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tabIndex <span class="token operator">=</span> appMeta<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">tabItem</span> <span class="token operator">=&gt;</span> tabItem<span class="token punctuation">.</span>href <span class="token operator">&amp;&amp;</span> tabItem<span class="token punctuation">.</span>href<span class="token punctuation">.</span>name <span class="token operator">===</span> view<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tabIndex <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isTabView <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> globalHeader <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>appMeta<span class="token punctuation">,</span> <span class="token string">&#39;common.body.header&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">&#39;body.header&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> footer <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">&#39;body.footer&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> showHeader <span class="token operator">=</span> <span class="token function">isShowHeader</span><span class="token punctuation">(</span>globalHeader<span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>
        <span class="token string">&#39;Page&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                showHeader<span class="token punctuation">,</span>
                <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">get</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token literal-property property">showHeaderBack</span><span class="token operator">:</span> <span class="token operator">!</span>isTabView<span class="token punctuation">,</span>
                <span class="token literal-property property">showFooter</span><span class="token operator">:</span> <span class="token operator">!</span>footer<span class="token punctuation">.</span>hide<span class="token punctuation">,</span>
                <span class="token literal-property property">pageStyle</span><span class="token operator">:</span> view<span class="token punctuation">.</span>style<span class="token punctuation">,</span>
                <span class="token literal-property property">headerStyle</span><span class="token operator">:</span> header<span class="token punctuation">.</span>style<span class="token punctuation">,</span>
                <span class="token literal-property property">footerStyle</span><span class="token operator">:</span> footer<span class="token punctuation">.</span>style
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token function">renderViewHeader</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> header<span class="token punctuation">,</span> showHeader<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token function">renderViewArea</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> view<span class="token punctuation">,</span> appMeta<span class="token punctuation">,</span> renderAreaList<span class="token punctuation">)</span><span class="token punctuation">,</span>
            isTabView <span class="token operator">?</span> <span class="token function">renderTabFooter</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> appMeta<span class="token punctuation">,</span> tabIndex<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>renderView</code>方法接收的参数：</p><ul><li><p><code>h</code>: <code>render</code> 的方法参数</p></li><li><p><code>view</code>: 路由信息</p></li><li><p><code>appMeta</code>: 元数据</p></li><li><p><code>options</code>：额外配置</p></li></ul><p><code>renderView</code> 方法首先是从元数据获取一些配置信息，最后返回并执行 <code>h()</code> 方法，分析下传入的参数：</p><ul><li><p>第一个参数字符串 <code>page</code>，结合上文的 <code>h</code> 方法的介绍，可以知道 <code>page</code> 应该是个已经注册好的组件</p></li><li><p>第二参数是给这个 <code>page</code> 组件传入的 <code>props</code> 属性</p></li><li><p>第三个参数表示这个 <code>page</code> 组件中包含哪些子组件,这些子组件分别使用 <code>renderViewHeader(h, header, showHeader)</code>、<code> renderViewArea(h, view, appMeta, renderAreaList)</code>、<code>renderTabFooter(h, appMeta, tabIndex)</code> 生成</p></li></ul><p><img src="https://raw.githubusercontent.com/lanjz/Hello-Word/master/_static/images/1578314228749_1578314178.jpg" alt="avatar"></p><p><code>renderViewHeader</code>、 <code>renderViewArea</code>、 <code>renderTabFooter</code> 这些方法内部也是调用传入的 <code>h</code> 方法生成的组件</p><p><strong>这里唯一让人困惑的是 <code>h</code>方法的第一参数是要已经定义好的组件，那么这些组件在什么时候注册的呢？</strong>*</p><h2 id="注册组件" tabindex="-1"><a class="header-anchor" href="#注册组件" aria-hidden="true">#</a> 注册组件</h2><p>paas 中的组件在这里分为两类，一类是内置的基础组件，一类是我们开发的业务组件（包括钩子组件）</p><p><strong>注册基础组件</strong></p><p>内置的基础组件在入口文件 <code>node_modules/webapp/src/engine/src/main.js</code> 中注册的，我们要下具体代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> InnerComponents <span class="token keyword">from</span> <span class="token string">&#39;@engine/components&#39;</span>
<span class="token keyword">import</span> BaseComponents <span class="token keyword">from</span> <span class="token string">&#39;@components&#39;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>InnerComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>BaseComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>BaseComponents</code>在<code>node_modules/webapp/src/engine/src/components/index.js</code>目录下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 全局注册内置组件
 */</span>
<span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">&#39;./Page&#39;</span>
<span class="token keyword">import</span> TabMenu <span class="token keyword">from</span> <span class="token string">&#39;./TabMenu&#39;</span>

<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">[</span>
    Page<span class="token punctuation">,</span>
    TabMenu<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        components<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">component</span> <span class="token operator">=&gt;</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>
    Page<span class="token punctuation">,</span>
    TabMenu
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件是把所有内置组件导入并使用 <code>Vue.component</code> 方法注册成全局组件，可以也看到上文中我们看到<code>page</code>组件也是在这里注册的</p><p><code>InnerComponents</code> 也是同理，它定义在 <code>node_modules/webapp/src/component/packages/index.js</code> 目录下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 全局注册内置组件
 */</span>
<span class="token keyword">import</span> Banner <span class="token keyword">from</span> <span class="token string">&#39;./banner&#39;</span>
<span class="token keyword">import</span> MenuGrid <span class="token keyword">from</span> <span class="token string">&#39;./menu-grid&#39;</span>
<span class="token comment">// 就不一一列举了</span>

<span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">[</span>
    Banner<span class="token punctuation">,</span>
    MenuGrid<span class="token punctuation">,</span>
    <span class="token comment">// 就不一一列举了</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        components<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">component</span> <span class="token operator">=&gt;</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>name<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span>
    Banner<span class="token punctuation">,</span>
    MenuGrid<span class="token punctuation">,</span>
    <span class="token comment">// 就不一一列举了</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也是使用的 <code>Vue.component(component.name, component)</code> 注册的组件</p><p><strong>注册业务组件</strong></p><p>我们业务组件在引擎的 <code>src</code> 目录下并没有直接找到引用的地方，因为它们是通过 <code>webpack</code> 构建项目时处理的</p><p>我们查看 <code>webpack</code> 配置文件 <code>module</code> 部分有定义一个 <code>rules</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// node_modules/webapp/build/webpack.base.conf.js</span>
 <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">register\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// node_modules/webapp/src/biz/register.js</span>
                <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span>resolveUtils<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/biz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;biz-loader&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token operator">...</span><span class="token punctuation">.</span>
        <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置会使用自定义 <code>loader</code> <code>biz-loader</code> 处理 <code>node_modules/webapp/src/biz/register.js</code> 文件，这个 <code>loader</code> 就是注册业务组件的关键</p><p>首先我们先看下 <code>register.js</code> 的内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@platform/router&#39;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;@platform/store&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">BODY_PARSER_PROPS</span> <span class="token keyword">as</span> bodyProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@utils/variable&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@platform/log&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 根据 VueJS 组件特殊属性判断
 * <span class="token keyword">@param</span> <span class="token parameter">options</span>
 * <span class="token keyword">@returns</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isVueOptions</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>template <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>render <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getOptionItems</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">?</span> options <span class="token operator">:</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>items <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerBody</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> <span class="token punctuation">{</span> body<span class="token punctuation">,</span> component<span class="token punctuation">,</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> routeBody <span class="token operator">=</span> body <span class="token operator">||</span> component<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>routeBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> routeBody <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 异步组件</span>
            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parsed&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> routeBody<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            bodyProps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">prop</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">getOptionItems</span><span class="token punctuation">(</span>routeBody<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 增加 parsed 前缀，方便识别</span>
                    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parsed&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVueOptions</span><span class="token punctuation">(</span>routeBody<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parsed&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> routeBody<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* eslint-disable */</span>
<span class="token keyword">function</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>module <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>install<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">钩子组件</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">不符合规范</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/* eslint-disable */</span>
<span class="token keyword">function</span> <span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> <span class="token punctuation">{</span> component<span class="token punctuation">,</span> routes<span class="token punctuation">,</span> storeModule <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> <span class="token punctuation">{</span> body<span class="token punctuation">,</span> component <span class="token punctuation">}</span> <span class="token operator">=</span> route<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">||</span> <span class="token keyword">typeof</span> component <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> bodyProps<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">prop</span> <span class="token operator">=&gt;</span> component <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>component<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">registerBody</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> route<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>route<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">const</span> hasDefined <span class="token operator">=</span> storeModule <span class="token operator">&amp;&amp;</span> store <span class="token operator">&amp;&amp;</span> store<span class="token punctuation">.</span>_modules
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDefined <span class="token operator">&amp;&amp;</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>get <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> storeModule<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文件只是定义了一些函数</p><p>我们先看下 <code>biz-loade</code> 的作用，根据 <code>webpack</code> 配置可找到自定义 <code>loader</code> 的配置位置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token literal-property property">resolveLoader</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./loader&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是 <code>biz-loade.js</code> 的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> argv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../argv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argv<span class="token punctuation">;</span>
<span class="token keyword">const</span> loadJSON <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../helper&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loadJSON<span class="token punctuation">;</span>
<span class="token keyword">const</span> parseComponents <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../parseComponents&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pluginIds <span class="token operator">=</span> <span class="token keyword">typeof</span> argv<span class="token punctuation">.</span>pluginIds <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> argv<span class="token punctuation">.</span>pluginIds<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> clients <span class="token operator">=</span> <span class="token keyword">typeof</span> argv<span class="token punctuation">.</span>clients <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">?</span> argv<span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> withMp <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;miniprogram&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>

<span class="token comment">//开发者业务组件列表</span>
<span class="token keyword">let</span> componentList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> devComponentMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 业务组件开发模式</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;argv&#39;</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>devmode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">parseComponents</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> parsedDir <span class="token operator">=</span> data<span class="token punctuation">.</span>dir<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        componentList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parsedDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        devComponentMap<span class="token punctuation">[</span>parsedDir<span class="token punctuation">]</span> <span class="token operator">=</span> data
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    componentList <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../src/biz/list&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getComponentId</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> argv<span class="token punctuation">.</span>devmode <span class="token operator">?</span> <span class="token function">loadJSON</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>component<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">:</span> component
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>componentList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token string">&#39;[Biz components include list]\\n&gt;&#39;</span><span class="token punctuation">,</span>
        componentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> component <span class="token operator">+</span> <span class="token punctuation">(</span>pluginIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token function">getComponentId</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&#39;[hook]&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&gt; &#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> argv<span class="token punctuation">.</span>devmode <span class="token operator">?</span>
        fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>
        fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../node_modules&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../../node_modules&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">,</span> <span class="token string">&#39;index.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">tryBlock</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> argv<span class="token punctuation">.</span>devmode <span class="token operator">?</span> code <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
try {
    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
} catch (e) {
    error(e, {tags: { component: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> component <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39; }})
}</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getPluginCode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> componentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">exists</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">tryBlock</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">registerPlugin(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> componentId <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;, require(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> component<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;).default || {})</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        componentId
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getComponentCode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> componentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">exists</span><span class="token punctuation">(</span>component <span class="token operator">+</span> <span class="token string">&#39;/src&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">tryBlock</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">registerComponent(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> componentId <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;, require(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> component<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src&#39;).default || {})</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        componentId
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">genRegisterComponentCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;componentList&#39;</span><span class="token punctuation">,</span>componentList<span class="token punctuation">)</span>
    <span class="token keyword">return</span> componentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> componentId <span class="token operator">=</span> <span class="token function">getComponentId</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 非业务组件、钩子组件，忽略</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>devmode <span class="token operator">&amp;&amp;</span> devComponentMap<span class="token punctuation">[</span>component<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>devComponentMap<span class="token punctuation">[</span>component<span class="token punctuation">]</span><span class="token punctuation">.</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pluginIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>componentId<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span>
            <span class="token function">getComponentCode</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> componentId<span class="token punctuation">)</span> <span class="token operator">:</span>
            <span class="token function">getPluginCode</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> componentId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getWxmlCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> target <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;../MiniProgram/wxml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;__dirname&#39;</span><span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>
    <span class="token comment">// 非最终构建，即引用组件或清除引擎缓存之后的构建</span>
    <span class="token keyword">const</span> emulatorUse <span class="token operator">=</span> argv<span class="token punctuation">.</span>devmode <span class="token operator">===</span> <span class="token string">&#39;biz&#39;</span>
        <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">buildDesigner\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">&#39;$0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token operator">||</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">buildBiz\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">&#39;$0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>emulatorUse <span class="token operator">||</span> withMp<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\
const MpComponents = require(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;).default;
Vue.use(MpComponents);\\n
</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;source&#39;</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span>
    <span class="token keyword">return</span> source <span class="token operator">+</span> <span class="token string">&#39;;\\n&#39;</span> <span class="token operator">+</span> <span class="token function">getWxmlCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">genRegisterComponentCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先定义了一个数组 <code>componentList</code>，这个数组就是存放我们的业务组件和钩子组件信息的地方，在开发环境下 <code>componentList</code> 通过 <code>parseComponents</code> 方法进行填充，它实际又调用了 <code>utils.parseComponents(path.join(__dirname, &#39;../../..&#39;), callback)</code> 方法，这里给 <code>utils.parseComponents</code> 传递一下参数，这个参数是一下路径，就是我们项目根目录的路径</p><p>接下来我们看下 <code>utils.parseComponents</code> 的定义</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> deepDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;packages&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;workspace&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;modules&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">parseComponents</span><span class="token punctuation">(</span><span class="token parameter">rootDir<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> isNotDeep<span class="token punctuation">,</span> checkFiles<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootDir <span class="token operator">&amp;&amp;</span> fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> dirList <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dirList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">biz</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> currentPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span> biz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isComponentDir</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">,</span> checkFiles<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>biz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token function">parseComponent</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNotDeep <span class="token operator">&amp;&amp;</span> deepDirs<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>biz<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">parseComponents</span><span class="token punctuation">(</span>currentPath<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> isNotDeep<span class="token punctuation">,</span> checkFiles<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> biz<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parseComponents</code> 函数中先是根据路径获取该路径下的所有文件并遍历他们，通过 <code>isComponentDir(currentPath, checkFiles)</code> 方法判断是否是业务组件或钩子组件（通过文件下是否包含 <code>index.js</code> 或者 <code>package.json</code> ），如果符合的话执行 <code>cb(parseComponent(currentPath, parent))</code> 方法，如果文件夹且名字是 <code>[&#39;packages&#39;, &#39;workspace&#39;, &#39;modules&#39;]</code> 中的一个则继续执行自身函数获取文件，这些是我们开发的组件存放的地方，接下来我们看下<code>parseComponent()</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">parseComponent</span><span class="token punctuation">(</span><span class="token parameter">dir<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> packagePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&#39;package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> packageInfo <span class="token operator">=</span> <span class="token function">loadJSON</span><span class="token punctuation">(</span>packagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span>name <span class="token operator">||</span> dir<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\\\</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">title</span><span class="token operator">:</span> packageInfo<span class="token punctuation">.</span>description <span class="token operator">||</span> id
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        packageInfo<span class="token punctuation">.</span>componentConfig<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token literal-property property">dir</span><span class="token operator">:</span> dir<span class="token punctuation">,</span>
            <span class="token literal-property property">id</span><span class="token operator">:</span> id<span class="token punctuation">,</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;biz&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">visible</span><span class="token operator">:</span> pluginIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token literal-property property">isComponent</span><span class="token operator">:</span> parent <span class="token operator">!==</span> <span class="token string">&#39;modules&#39;</span> <span class="token operator">||</span> pluginIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parseComponent</code> 方法则是通过读取 <code>package.json</code>文件，然后返回当前组件目录的一些基本信息 <code>dir</code>（目录路径）、<code>id</code>、<code>isComponent</code>（是否是业务组件或钩子组件）等</p><p>回到 <code>biz-loader</code>，这些组件信息就存入 <code>componentList</code> 数组中了</p><p>最后看下 <code>biz-loader</code> 的导出结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> source <span class="token operator">+</span> <span class="token string">&#39;;\\n&#39;</span> <span class="token operator">+</span> <span class="token function">getWxmlCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">genRegisterComponentCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接返回 <code>register.js</code> 内容加上两个函数 <code>getWxmlCodes()</code>、<code>genRegisterComponentCodes()</code> 的返回结果,这里我们重点关注一下 <code>genRegisterComponentCodes()</code> 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">genRegisterComponentCodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> componentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> componentId <span class="token operator">=</span> <span class="token function">getComponentId</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 非业务组件、钩子组件，忽略</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>devmode <span class="token operator">&amp;&amp;</span> devComponentMap<span class="token punctuation">[</span>component<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>devComponentMap<span class="token punctuation">[</span>component<span class="token punctuation">]</span><span class="token punctuation">.</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> pluginIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>componentId<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span>
            <span class="token function">getComponentCode</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> componentId<span class="token punctuation">)</span> <span class="token operator">:</span>
            <span class="token function">getPluginCode</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> componentId<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>genRegisterComponentCodes()</code> 方法中遍历 <code>componentList</code> ，即上文收集到所以组件信息，然后根据钩子组件还是业务组件执行不同的方法</p><p>这里我们先看业务组件的处理，它是执行 <code>getComponentCode(component, componentId)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getComponentCode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> componentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">exists</span><span class="token punctuation">(</span>component <span class="token operator">+</span> <span class="token string">&#39;/src&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">tryBlock</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">registerComponent(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> componentId <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;, require(&#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> component<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/src&#39;).default || {})</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        componentId
    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里返回的一个执行函数的字符串，这些函数将在 <code>register.js</code> 文件被读取时执行。</p><p><code>register.js</code> 被 <code>loader</code> 处理后代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">&#39;@platform/router&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;@platform/store&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">BODY_PARSER_PROPS</span> <span class="token keyword">as</span> bodyProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@utils/variable&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@platform/log&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">isVueOptions</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>template <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> options<span class="token punctuation">.</span>render <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getOptionItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> options <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">?</span> options <span class="token operator">:</span> options<span class="token punctuation">.</span>items <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerBody</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> _ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> body <span class="token operator">=</span> _ref<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
        component <span class="token operator">=</span> _ref<span class="token punctuation">.</span>component<span class="token punctuation">,</span>
        name <span class="token operator">=</span> _ref<span class="token punctuation">.</span>name<span class="token punctuation">;</span>

    <span class="token keyword">var</span> routeBody <span class="token operator">=</span> body <span class="token operator">||</span> component<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>routeBody<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> routeBody <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parsed&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> routeBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            bodyProps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">getOptionItems</span><span class="token punctuation">(</span>routeBody<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parsed&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVueOptions</span><span class="token punctuation">(</span>routeBody<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;parsed&#39;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> routeBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>module <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>install<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        modules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;\\u94A9\\u5B50\\u7EC4\\u4EF6&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>id <span class="token operator">?</span> <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;\\u4E0D\\u7B26\\u5408\\u89C4\\u8303&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> _ref2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> component <span class="token operator">=</span> _ref2<span class="token punctuation">.</span>component<span class="token punctuation">,</span>
        routes <span class="token operator">=</span> _ref2<span class="token punctuation">.</span>routes<span class="token punctuation">,</span>
        storeModule <span class="token operator">=</span> _ref2<span class="token punctuation">.</span>storeModule<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>routes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            routes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">var</span> body <span class="token operator">=</span> route<span class="token punctuation">.</span>body<span class="token punctuation">,</span>
                    component <span class="token operator">=</span> route<span class="token punctuation">.</span>component<span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">||</span> <span class="token keyword">typeof</span> component <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">||</span> bodyProps<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> component <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>component<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">registerBody</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>route<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> hasDefined <span class="token operator">=</span> storeModule <span class="token operator">&amp;&amp;</span> store <span class="token operator">&amp;&amp;</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasDefined <span class="token operator">&amp;&amp;</span> store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span>get <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>store<span class="token punctuation">.</span>_modules<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> storeModule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 下面是loader处理添加的代码</span>
<span class="token keyword">const</span> MpComponents <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/node_modules/webapp/build/MiniProgram/wxml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MpComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token string">&#39;b2c-jssdk&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/modules/b2c-jssdk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">registerPlugin</span><span class="token punctuation">(</span><span class="token string">&#39;broker-common&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/modules/broker-common&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>



<span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token string">&#39;b2c-bespeak-house&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/packages/b2c-bespeak-house/src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token string">&#39;b2c-broadcast&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/packages/b2c-broadcast/src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token string">&#39;b2c-my-listmenu&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/packages/b2c-my-listmenu/src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token string">&#39;b2c-search&#39;</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;D:/Project/p_qudao/xxxx-paas/packages/b2c-search/src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么 <code>register.js</code> 被调用时，将执行这些 <code>registerPlugin</code>、<code>registerComponent</code> 方法，在 <code>registerComponent</code> 函数的定义中,终于找到了 <code>Vue.component(id, component)</code>，在这里注册我们编写的业务组件的同时还处理组件中的路由和<code>store</code>等</p><p>回到PAAS应用的入口函数可以找到<code>register</code>确实会引入了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> modules <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@root/biz/register&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>致此，原来我们的业务是这么注册进来~</p><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><p>这例子需要实现的功能</p><ul><li><p>结合<code>webpack</code>配置注册全局</p></li><li><p>使用<code>render方法</code>渲染组件</p></li><li><p>异步获取元数据，并动态更新组件</p></li></ul><p>例子使用<code>Vue-cli</code>初始的项目，首页添加<code>register.js</code>文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// src/biz/register.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">function</span> <span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token parameter">com</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;com&#39;</span><span class="token punctuation">,</span> com<span class="token punctuation">)</span>
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;page1&#39;</span><span class="token punctuation">,</span> com<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;加载了register&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>register</code> 内容很简单，提供一个注册组件的方法</p><p>然后给 <code>webpack</code> 添加处理 <code>register.js</code> 的 <code>Loader</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// build/loader/biz-loader.js</span>
<span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">registerComponent(require(&#39;../page/index.vue&#39;).default)</span><span class="token template-punctuation string">\`</span></span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> abc <span class="token operator">=</span> source <span class="token operator">+</span> <span class="token string">&#39;;\\n&#39;</span> <span class="token operator">+</span> fn
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;source&#39;</span><span class="token punctuation">,</span> abc<span class="token punctuation">)</span>
  <span class="token keyword">return</span> abc
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>biz-loader</code>Loader的内容也很简单，就是添加一个<code>registerComponent(require(&#39;../page/index.vue&#39;).default)</code>的执行方法， 这里直接传入我们要动态注册的组件的路径</p><p>然后添加loader配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// build/webpack.base.conf.js</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">register\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src/biz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;biz-loader&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token comment">// ....</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在入口函数中引入 <code>register.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> register <span class="token keyword">from</span> <span class="token string">&#39;./biz/register&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在挂载组件<code>App.vue</code>使用<code>setTimeout</code>方法模拟异步更新数据，并加载组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>comment <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">&quot;view&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comment<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token string">&#39;是谁&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this.meta&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>meta<span class="token punctuation">)</span>
        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">createElement</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;Page&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
              <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">meta</span><span class="token operator">:</span> vm<span class="token punctuation">.</span>meta
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>meta <span class="token operator">=</span> <span class="token string">&#39;lanjz&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后页面将显示如下效果</p><p><img src="https://raw.githubusercontent.com/lanjz/Hello-Word/master/_static/images/1578400055111_微信截图_20200107202720.png" alt="avatar"></p><p>两秒页面将更新</p><p><img src="https://raw.githubusercontent.com/lanjz/Hello-Word/master/_static/images/1578400104137_微信截图_20200107202725.png" alt="avatar"></p>`,113);function f(w,h){const a=c("ExternalLinkIcon");return l(),i("div",null,[r,k,n("p",null,[s("Vue 对 "),n("a",d,[v,p(a)]),s(" 方法的说明：")]),m,n("blockquote",null,[n("p",null,[n("a",b,[s("render Api"),p(a)]),n("a",g,[s("render说明"),p(a)])])]),y])}const j=o(u,[["render",f],["__file","Paas应用.html.vue"]]);export{j as default};
