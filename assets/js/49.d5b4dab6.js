(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{533:function(t,s,a){t.exports=a.p+"assets/img/jiagou-1.387a939c.jpg"},714:function(t,s,a){"use strict";a.r(s);var n=a(58),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),n("p",[t._v("事件循环是 Node.js 处理非阻塞 I/O 操作的机制，但是关于事件循环大致只是明白其运行过程，还有很细节存在疑惑：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Node 架构总结为 "),n("code",[t._v("V8 + Libuv")]),t._v(", 事件循环在哪 Node 架构中的哪个位置？")])]),t._v(" "),n("li",[n("p",[t._v("事件循环中的每一次 Tick 是 "),n("code",[t._v("判断队列是否为空+取回调执行")]),t._v("？ 还是 "),n("code",[t._v("检查是否完成的任务+添加回调到队列+执行回调")]),t._v(" ？")])]),t._v(" "),n("li",[n("p",[t._v("基于上一点的问题，线程池跟事件循环到底是怎么配合动作的")])]),t._v(" "),n("li",[n("p",[t._v("pending callbacks 和 poll，傻傻分不清到底是谁执行 I/O 回调")])])]),t._v(" "),n("h2",{attrs:{id:"事件循环在哪里"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环在哪里"}},[t._v("#")]),t._v(" 事件循环在哪里")]),t._v(" "),n("p",[t._v("回顾一个 Node 架构")]),t._v(" "),n("p",[n("img",{attrs:{src:a(533),alt:""}})]),t._v(" "),n("ul",[n("li",[n("p",[t._v("我们编写的JavaScript代码会经过V8引擎，再通过Node.js的Bindings（Node.js API），将任务派发到Libuv的事件循环中；")])]),t._v(" "),n("li",[n("p",[t._v("Libuv提供了事件循环、文件系统读写、网络IO、线程池等等内容；Libuv是使用C语言编写的库；")])])]),t._v(" "),n("p",[t._v("所以第一个问题 "),n("strong",[t._v("事件循环是 Libuv 中的一环")])]),t._v(" "),n("h2",{attrs:{id:"node中的事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node中的事件循环"}},[t._v("#")]),t._v(" Node中的事件循环")]),t._v(" "),n("p",[t._v("Node 中的 Event Loop 和浏览器中的是完全不相同的东西。Node.js采用V8作为js的解析引擎，而I/O处理方面使用了自己设计的 libuv，libuv 是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现")]),t._v(" "),n("p",[t._v("Node 中事件循环可以分为以下阶段：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n")])])]),n("p",[t._v("每个阶段都有一个要执行的回调 FIFO 队列。 尽管每个阶段都有其自己的特殊方式，但是通常，当事件循环进入给定阶段时，它将执行该阶段特定的任何操作，然后在该阶段的队列中执行回调，直到队列耗尽或执行回调的最大数量为止。 当队列已为空或达到回调限制时，事件循环将移至下一个阶段，依此类推。")]),t._v(" "),n("h3",{attrs:{id:"事件循环的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件循环的实现"}},[t._v("#")]),t._v(" 事件循环的实现")]),t._v(" "),n("p",[t._v("libuv 源码关于事件循环部分的代码：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("int "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv_run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("uv_loop_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uv_run_mode mode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  int timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  int r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  int ran_pending"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__loop_alive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("stop_flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_timers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ran_pending "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_pending")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_idle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_prepare")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UV_RUN_ONCE")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("ran_pending"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UV_RUN_DEFAULT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv_backend_timeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__io_poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_check")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_closing_handles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UV_RUN_ONCE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* UV_RUN_ONCE implies forward progress: at least one callback must have\n       * been invoked when it returns. uv__io_poll() can return without doing\n       * I/O (meaning: no callbacks) when its timeout expires - which means we\n       * have pending timers that satisfy the forward progress constraint.\n       *\n       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from\n       * the check.\n       */")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_timers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    r "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__loop_alive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UV_RUN_ONCE")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UV_RUN_NOWAIT")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The if statement lets gcc compile it to a conditional store. Avoids\n   * dirtying a cache line.\n   */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("stop_flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("stop_flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("可以看到 "),n("code",[t._v("uv_run")]),t._v(" 内部就是一个 "),n("code",[t._v("while")]),t._v(" 循环，并且循环内执行的方法可以与上面列出的流程图相对应：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("timer 阶段： "),n("code",[t._v("uv__run_timers(loop)")])])]),t._v(" "),n("li",[n("p",[t._v("pending callbacks 阶段："),n("code",[t._v("uv__run_pending(loop)")])])]),t._v(" "),n("li",[n("p",[t._v("idle 阶段："),n("code",[t._v("uv__run_idle(loop)")])])]),t._v(" "),n("li",[n("p",[t._v("poll 阶段："),n("code",[t._v("uv__io_poll(loop, timeout)")])])]),t._v(" "),n("li",[n("p",[t._v("check 阶段："),n("code",[t._v("uv__run_check(loop)")])])]),t._v(" "),n("li",[n("p",[t._v("close callbacks 阶段："),n("code",[t._v("uv__run_closing_handles(loop)")])])])]),t._v(" "),n("p",[n("strong",[t._v("uv__run_timers")])]),t._v(" "),n("p",[t._v("先看下 "),n("code",[t._v("Timer")]),t._v("阶段的 "),n("code",[t._v("uv__run_timers()")]),t._v(" 的实现")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv__run_timers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("uv_loop_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" loop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  struct heap_node"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" heap_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  uv_timer_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    heap_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("heap_min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer_heap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("heap_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    handle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("container_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("heap_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uv_timer_t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" heap_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv_timer_stop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("uv_timer_again")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    handle"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer_cb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("读 libuv 的源码不是本篇文章的目的，只是想通过网上大神们对 Libuv 源码的分析找出自己想要的正确信息")])]),t._v(" "),n("p",[t._v("从 "),n("code",[t._v("uv__run_timers()")]),t._v(" 实现整体可以归纳为：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("当定时器时间大于当前事件循环 tick 的开始时间时，即表示还没有到执行时机，直接 "),n("code",[t._v("break")]),t._v(" 退出")])]),t._v(" "),n("li",[n("p",[t._v("当该值小于当前事件循环 tick 的开始时间时，表示至少存在一个过期的计时器，并调用该计时器所对应的回调函数")])])]),t._v(" "),n("p",[t._v("这里可以知道 "),n("strong",[t._v("定时器的判断是事件循环中处理的，且回调是也在事件循环中直接执行")])]),t._v(" "),n("p",[n("strong",[t._v("uv__io_poll")])]),t._v(" "),n("p",[t._v("根据网上搜索到的关于 "),n("a",{attrs:{href:"https://blog.butonly.com/posts/node.js/libuv/5-libuv-io-watcher/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("uv__io_poll")]),n("OutboundLink")],1),t._v(" 源码分析的文章，可以知道在这个阶段的事情")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("计算 Poll 阶段阻塞的时间")])]),t._v(" "),n("li",[n("p",[t._v("获取监听的事件，说白了就是获取完成的 I/O 事件")])]),t._v(" "),n("li",[n("p",[t._v("执行这些 I/O 事件回调")])])]),t._v(" "),n("p",[t._v("所以在 "),n("code",[t._v("poll phase")]),t._v(" 也是 "),n("code",[t._v("检查是否完成的任务+添加回调到队列+执行回调")])]),t._v(" "),n("p",[t._v("所以 "),n("strong",[t._v("事件循环的作用包括检查是否完成的I/O事件 + 执行回调的")])]),t._v(" "),n("h2",{attrs:{id:"各阶段详细解释"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#各阶段详细解释"}},[t._v("#")]),t._v(" 各阶段详细解释")]),t._v(" "),n("p",[t._v("上面的图例中，将事件循环分为了 6 个不同的阶段")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("Timers")]),t._v(": 用来处理 "),n("code",[t._v("setTimeout()")]),t._v(" 和 "),n("code",[t._v("setInterval()")]),t._v(" 的回调")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("pending callbacks")]),t._v(": 虽然大部分 I/O 回调都是在 "),n("code",[t._v("poll")]),t._v(" 阶段执行，但是会存在一些被延迟调用的 I/O 回调函数。这个阶段就是执行推迟到下一个循环迭代的 I/O 回调")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("idel, prepare")]),t._v(": 仅仅在内部使用，不管它")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Poll")]),t._v(":  检索新的 I/O 事件，执行与 I/O 相关的回调（除了关闭回调，计时器调度的回调和 setImmediate 之外，几乎所有这些回调） 适当时，node 将在此处阻塞")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Check")]),t._v("：处理 "),n("code",[t._v("setImmediate()")]),t._v(" 事件的回调")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Close callbacks")]),t._v(": 执行一些关闭的回调函数，例如 "),n("code",[t._v("cocket.on('close')")])])])]),t._v(" "),n("h3",{attrs:{id:"timer-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#timer-phase"}},[t._v("#")]),t._v(" Timer Phase")]),t._v(" "),n("p",[t._v("任何过期的计时器回调都会在事件循环的这个阶段中运行")]),t._v(" "),n("p",[t._v("定时器的回调会在触发后尽可能早地被调用，这表示实际的延时可能会比定时器规定的时间要长")]),t._v(" "),n("p",[t._v("如果事件循环，此时正在执行一个比较耗时的 "),n("code",[t._v("callback")]),t._v("，例如处理一个比较耗时的循环，那么定时器的回调只能等待当前回调执行结束了才能被执行，即被阻塞。事实上，"),n("code",[t._v("timer")]),t._v(" 阶段的执行受到 "),n("code",[t._v("poll")]),t._v(" 阶段控制")]),t._v(" "),n("p",[t._v("例如，假设您调度了一个在 "),n("code",[t._v("100 毫秒")]),t._v(" 后超时的定时器，然后您的脚本开始异步读取会耗费 "),n("code",[t._v("95 毫秒")]),t._v("的文件:")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("someAsyncOperation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("callback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Assume this takes 95ms to complete")]),t._v("\n  fs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path/to/file'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" timeoutScheduled "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" delay "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" timeoutScheduled"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("delay"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("ms have passed since I was scheduled")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do someAsyncOperation which takes 95 ms to complete")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("someAsyncOperation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startCallback "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something that will take 10ms...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" startCallback "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do nothing")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),n("p",[t._v("执行过程：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("当事件循环进入 "),n("code",[t._v("poll")]),t._v(" 阶段时，它有一个空队列（此时 "),n("code",[t._v("fs.readFile()")]),t._v(" 尚未完成），因此它将等待直到达到最快的计时器 "),n("code",[t._v("timer")]),t._v(" 阈值为止")])]),t._v(" "),n("li",[n("p",[t._v("当它等待 "),n("code",[t._v("95 毫秒")]),t._v(" 过后时，"),n("code",[t._v("fs.readFile()")]),t._v(" 完成读取文件，它的那个需要 "),n("code",[t._v("10 毫秒")]),t._v(" 才能完成的回调将被添加到 "),n("code",[t._v("poll")]),t._v(" 队列中并执行")])]),t._v(" "),n("li",[n("p",[t._v("当循环结束时，"),n("code",[t._v("poll")]),t._v(" 队列中不再有回调，因此事件循环机制将查看最快到达阈值的计时器，然后将回到 "),n("code",[t._v("Timer")]),t._v(" 阶段，执行定时器的回调")])])]),t._v(" "),n("p",[t._v("但是需要注意的是调度计时器到它的回调被执行之间的总延迟将为 "),n("code",[t._v("105")]),t._v(" 毫秒")]),t._v(" "),n("h3",{attrs:{id:"pending-callbacks阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pending-callbacks阶段"}},[t._v("#")]),t._v(" pending callbacks阶段")]),t._v(" "),n("p",[t._v("在某些情况下 IO 观察者绑定的回调函数并不是立即调用的，而是被延迟到下一次事件循环的固定阶段调用的，也就是 "),n("code",[t._v("pedding callbacks")]),t._v(" 阶段。如 TCP 错误的回调")]),t._v(" "),n("p",[t._v("按 "),n("a",{attrs:{href:"https://gist.github.com/trevnorris/1f3066ccb0fed9037afa",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://gist.github.com/trevnorris/1f3066ccb0fed9037afa"),n("OutboundLink")],1),t._v(" 这里分析， "),n("code",[t._v("pending callback")]),t._v(" 阶段 是从 "),n("code",[t._v("pending-queue")]),t._v(" 中取回调的，而向 "),n("code",[t._v("pending-queue")]),t._v(" 中插入回调，只能通过 "),n("code",[t._v("uv_io_feed 函数")]),t._v("，而调用 "),n("code",[t._v("uv_io_feed")]),t._v(" 只有以下四个函数是列出四个函数")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("- uv__run_pending(): Run all callbacks on the pending_queue. Remove each item from the queue when run.\n\nNote: uv__io_feed() is the only function to insert onto pending_queue.\n\nNote: The following use uv__io_feed():\n\n- uv_pipe_connect(), but only in the case of an error.\n\n- uv__write_req_finish(), part of stream.c\n\n- uv_tcp_connect(), but only in the case of an error.\n\n- uv__udp_send_msg(), for all sent messages.\n")])])]),n("p",[t._v("具体的场景就不是很明确了~ 总之绝大部分的 I/O 事件回调还是在 "),n("code",[t._v("poll")]),t._v(" 阶段执行的")]),t._v(" "),n("h3",{attrs:{id:"poll阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#poll阶段"}},[t._v("#")]),t._v(" poll阶段")]),t._v(" "),n("p",[n("code",[t._v("poll")]),t._v(" 阶段的首要职责是：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("计算因处理 I/O 需要阻塞当前事件循环 tick 的时间；该阻塞表示当前事件循环 tick 应该在当前 "),n("code",[t._v("poll")]),t._v(" 阶段停留多久，这个时间一般是根据最小的 "),n("code",[t._v("setTimeout/setInterval")]),t._v(" 的时间阈值等多个因素来确定。在到达阻塞时间后，会经历当前事件循环 tick 的后续阶段，并最终进入下一个事件循环 tick 的 "),n("code",[t._v("timer")]),t._v(" 阶段，此时，过期的计时器的回调函数得以执行")])]),t._v(" "),n("li",[n("p",[t._v("处理 I/O 事件回调，事件循环可能会在 "),n("code",[t._v("poll")]),t._v(" 阶段阻塞")])])]),t._v(" "),n("p",[t._v("当事件循环进入 "),n("code",[t._v("poll")]),t._v(" 阶段可能发生以下几种情况：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果轮询队列 (poll queue) 不为空，则事件循环将遍历其回调队列，使其同步执行，直到队列用尽或达到与系统相关的硬限制为止")])]),t._v(" "),n("li",[n("p",[t._v("如果轮询队列 (poll queue) 为空,事件循环将检查哪些计时器 "),n("code",[t._v("timer")]),t._v(" 已经到时间")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("若不存在任何计时器，那么当前事件循环 "),n("code",[t._v("tick")]),t._v(" 中的 "),n("code",[t._v("poll")]),t._v(" 阶段将无限制阻塞。以实现一旦存在 I/O 回调函数加入到 "),n("code",[t._v("poll queue")]),t._v(" 中即可立即得到执行")])]),t._v(" "),n("li",[n("p",[t._v("若存在已经完成的计时器，则结束当前事件循环 "),n("code",[t._v("tick")]),t._v("。这样就可以马上进入下一次事件循环然后在 "),n("code",[t._v("timer")]),t._v(" 阶段执行完成的计时器回调")])]),t._v(" "),n("li",[n("p",[t._v("如果发现有 "),n("code",[t._v("setImmediate")]),t._v(" 设置的回调，则会结束当前 "),n("code",[t._v("poll")]),t._v(" 阶段，并继续执行 "),n("code",[t._v("check")]),t._v(" 阶段以执行 "),n("code",[t._v("setImmediate")]),t._v(" 设置的回调")])])]),t._v(" "),n("p",[n("code",[t._v("poll")]),t._v(" 阶段的本质")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("为了尽可能快的处理异步 I/O 事件，那么事件循环 tick 总有一种维持 "),n("code",[t._v("poll")]),t._v(" 状态的倾向")])]),t._v(" "),n("li",[n("p",[t._v("当前 "),n("code",[t._v("poll")]),t._v(" 阶段应该维持（阻塞）多长时间是由 "),n("strong",[t._v("后续 tick 各个阶段是否存在不为空的回调函数队列")]),t._v(" 和 "),n("strong",[t._v("最近的计时器时间节点")]),t._v(" 决定。若所有队列为空且不存在任何计时器，那么事件循环将无限制地维持在 "),n("code",[t._v("poll")]),t._v(" 阶段。")])])])])]),t._v(" "),n("p",[n("strong",[t._v("poll 对 timer 的影响")])]),t._v(" "),n("p",[t._v("事件循环总是有一种维持在 "),n("code",[t._v("poll")]),t._v(" 阶段的倾向，那么在没有满足 "),n("code",[t._v("poll")]),t._v(" 阶段的结束条件时，就无法进入到下一个事件循环 tick 的 "),n("code",[t._v("timer")]),t._v(" 阶段，就无法执行 "),n("code",[t._v("timer queue")]),t._v(" 中到期计时器的回调函数。所以才会存在 "),n("strong",[t._v("poll 阶段控制了计时器回调函数的执行时机")]),t._v(" 的说法。")]),t._v(" "),n("p",[t._v("另外，如果无限制的处理 "),n("code",[t._v("poll")]),t._v(" 阶段的回调函数，会导致完全不会清空 "),n("code",[t._v("poll")]),t._v(" 的回调函数队列，进而永远都不会执行之后阶段的回调导致拖垮整个事件循环迭代。libuv 在其内部设定了一个依赖于系统的最大执行数。当 "),n("code",[t._v("poll")]),t._v(" 阶段超过这个指定时间的时候，将会执行之后的阶段的回调。所以"),n("strong",[t._v("计时器无法保证准确的执行回调函数，而是尽快的执行回调函数的原因之一")])]),t._v(" "),n("h3",{attrs:{id:"check-阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#check-阶段"}},[t._v("#")]),t._v(" check 阶段")]),t._v(" "),n("p",[t._v("此阶段允许在轮询 "),n("code",[t._v("poll")]),t._v(" 阶段完成后立即执行回调，使用 "),n("code",[t._v("setImmediate()")]),t._v(" 方法的回调将会添加这个阶段")]),t._v(" "),n("h3",{attrs:{id:"close-阶段"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#close-阶段"}},[t._v("#")]),t._v(" close 阶段")]),t._v(" "),n("p",[t._v("如果套接字或处理函数突然关闭（例如 "),n("code",[t._v("socket.destroy()")]),t._v("），则 "),n("code",[t._v("close")]),t._v("  事件将在这个阶段发出。否则它将通过 "),n("code",[t._v("process.nextTick()")]),t._v(" 发出。")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("Nodejs 为了防止某个 Phase 任务太多, 导致后续的 Phase 发生饥饿的现象, 所以消息循环的每一个迭代(iterate) 中, 每个 Phase 执行回调都有个最大数量. 如果超过数量的话也会强行结束当前 Phase 而进入下一个 Phase. 这一条规则适用于消息循环中的每一个 Phase")])]),t._v(" "),n("h2",{attrs:{id:"process-nexttick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick"}},[t._v("#")]),t._v(" process.nextTick()")]),t._v(" "),n("p",[n("code",[t._v("process.nextTick")]),t._v(" 的意思就是定义出一个异步动作，并且这个动作在事件循环当前阶段结束后执行")]),t._v(" "),n("p",[t._v("例如下面代码，将打印 "),n("code",[t._v("first")]),t._v("的操作放在"),n("code",[t._v("nextTick")]),t._v("的回调中执行")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'first'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'next'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// next")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// first")]),t._v("\n")])])]),n("p",[n("code",[t._v("process.nextTick")]),t._v(" 其实不是事件循环的一部分，但是它的回调也是由事件循环调用的，该方法的回调会放在 "),n("code",[t._v("nextTictQueue")]),t._v(" 中，在事件循环的如果 "),n("code",[t._v("nextTictQueue")]),t._v(" 不为空，都会在当前阶段操作结束后优先执行 "),n("code",[t._v("nextTickQueue")]),t._v(" 中的回调函数，当 "),n("code",[t._v("nextTickQueue")]),t._v(" 中的回调方法被执行完毕后，事件循环才会继续向下执行,所以如果 "),n("code",[t._v("process.nextTick")]),t._v(" 回调函数出现了阻塞操作，事件循环后面的阶段也会被阻塞")]),t._v(" "),n("div",{staticClass:"custom-block warning"},[n("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),n("p",[t._v("Node限制了 "),n("code",[t._v("nextTickQueue")]),t._v(" 的大小，如果递归调用了 "),n("code",[t._v("process.nextTick")]),t._v(" ，那么当 "),n("code",[t._v("nextTickQueue")]),t._v(" 达到最大限制后会抛出一个错误")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recerse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recerse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后置运算符，参数永远传的 0")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recerse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//RangeError:Maxium call stack size exceeded")]),t._v("\n")])])]),n("p",[n("code",[t._v("process.nextTick")]),t._v(" 在事件循环的位置:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("           ┌───────────────────────────┐\n        ┌─>│           timers          │\n        │  └─────────────┬─────────────┘\n        │           nextTickQueue\n        │  ┌─────────────┴─────────────┐\n        │  │     pending callbacks     │\n        │  └─────────────┬─────────────┘\n        │           nextTickQueue\n        │  ┌─────────────┴─────────────┐\n        |  |     idle, prepare         │\n        |  └─────────────┬─────────────┘\n  nextTickQueue     nextTickQueue\n        |  ┌─────────────┴─────────────┐\n        |  │           poll            │\n        │  └─────────────┬─────────────┘\n        │           nextTickQueue\n        │  ┌─────────────┴─────────────┐\n        │  │           check           │\n        │  └─────────────┬─────────────┘\n        │           nextTickQueue\n        │  ┌─────────────┴─────────────┐\n        └──┤       close callbacks     │\n           └───────────────────────────┘\n")])])]),n("h3",{attrs:{id:"微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),n("p",[t._v("微任务会在主线之后和事件循环的每个阶段之后立即执行，像 "),n("code",[t._v("process.nextTick()")]),t._v(" 设置的回调就属性微任务")]),t._v(" "),n("p",[t._v("在 Node 领域，微任务是来自以下对象的回调：")]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("process.nextTick()")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("promise.then")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("queueMicrotask")]),t._v(" 方法")])])]),t._v(" "),n("p",[t._v("优先级 "),n("code",[t._v("process.nextTick()")]),t._v(" > "),n("code",[t._v("promise.then()")]),t._v(" = "),n("code",[t._v("queueMicrotask()")])]),t._v(" "),n("h2",{attrs:{id:"setimmediate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setimmediate"}},[t._v("#")]),t._v(" setImmediate()")]),t._v(" "),n("p",[n("code",[t._v("setImmediate")]),t._v(" 的事件会在当前事件循环中的 "),n("code",[t._v("check")]),t._v(" 阶段被执行")]),t._v(" "),n("p",[n("strong",[t._v("setImmediate和nextTick")])]),t._v(" "),n("p",[n("code",[t._v("nextTick")]),t._v(" 的回调是在事件循环任何阶段结束后就会被执行，而 "),n("code",[t._v("setImmediate")]),t._v(" 是在事件循环的末尾 "),n("code",[t._v("check")]),t._v(" 阶段执行，所以总是先执行 "),n("code",[t._v("nextTick")]),t._v(" 后执行 "),n("code",[t._v("setImediate")])]),t._v(" "),n("p",[t._v("当有递归的异步操作时只能使用 "),n("code",[t._v("setImmediate")]),t._v("，不能使用 "),n("code",[t._v("process.Tick")]),t._v("，")]),t._v(" "),n("p",[t._v("前面展示过了如果过多循环调用 "),n("code",[t._v("nextTick")]),t._v(" 会出现错误，下是使用 "),n("code",[t._v("setImmediate")]),t._v(" 来试试看：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recurse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Done'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("recurse"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("recurse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("99999999")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h3",{attrs:{id:"settimeout-vs-setimmediate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-vs-setimmediate"}},[t._v("#")]),t._v(" setTimeout vs setImmediate")]),t._v(" "),n("p",[t._v("在现行的 nodejs 环境中，有且仅有两种计时器，一种是 "),n("code",[t._v("setTimeout/setInterval")]),t._v("，另一种是 "),n("code",[t._v("setImmediate")])]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("setTimeout/setInterval")]),t._v(": 目的在于经历一段最小时间阈值后尽快调用指定的回调函数, 已超过设置的定时时间的回调将在 "),n("code",[t._v("timer")]),t._v(" 阶段执行")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("setImmediate")]),t._v("： 作为特殊的计时器而存在，其设计目的是给予用户能在 "),n("code",[t._v("poll")]),t._v(" 阶段结束后（即 "),n("code",[t._v("check")]),t._v(" 阶段）能够立即执行代码的机会，而不用在 "),n("code",[t._v("timer")]),t._v(" 阶段执行")])])]),t._v(" "),n("p",[t._v("那么如果两个都存在的情况下，哪个更快呢？")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* setTimeoutCallback */")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'from setTimeout'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* setImmediateCallback */")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'from setImmediate'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("答案是顺序不固定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 可能是\nfrom setTimeout\nfrom setImmediate\n// 也可能是\nfrom setImmediate\nfrom setTimeout\n\n")])])]),n("p",[t._v("当执行到 "),n("code",[t._v("timer")]),t._v(" 阶段时, 会发生两种可能. 因为每一轮迭代刚刚进入 "),n("code",[t._v("timer")]),t._v(" 阶段 时会取系统时间保存起来, 以 "),n("code",[t._v("ms(毫秒)")]),t._v(" 为最小单位")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果 "),n("code",[t._v("timer 阶段中回调预设的时间 > 消息循环所保存的时间")]),t._v(", 则 "),n("code",[t._v("timer")]),t._v(" 阶段将执行 "),n("code",[t._v("setTimeout")]),t._v(" 的回调，然后在进入 "),n("code",[t._v("Check")]),t._v(" 阶段时，将执行 "),n("code",[t._v("setImmediate")]),t._v(" 的回调")])]),t._v(" "),n("li",[n("p",[t._v("如果运行比较快, "),n("code",[t._v("timer")]),t._v(" 阶段回调预设的时间可能刚好小于消息循环所保存的时间, 这种情况下 "),n("code",[t._v("timer")]),t._v(" 阶段中的回调不会执行, 则继续下一个阶段. 直到 "),n("code",[t._v("Check")]),t._v(" 阶段执行 "),n("code",[t._v("setImmediate")]),t._v(" 的回调. 然后等下一轮迭代的 "),n("code",[t._v("timer")]),t._v(" 阶段, 这时的时间一定是满足 "),n("code",[t._v("timer 阶段中回调预设的时间 > 消息循环所保存的时间")]),t._v(", 所以 "),n("code",[t._v("setTimeout")]),t._v(" 的回调将得到执行\n结果就是 "),n("code",[t._v("2 1")]),t._v(".")])])]),t._v(" "),n("p",[t._v("所以, 输出不稳定的原因就取决于进入 "),n("code",[t._v("timer")]),t._v(" 阶段的时间是否和执行 "),n("code",[t._v("setTimeout")]),t._v(" 的时间在 "),n("code",[t._v("1ms")]),t._v(" 内。 如果把代码改成如下, 则一定会得到稳定的输出:")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'from setTimeout'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'from setImmediate'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from setImmediate")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// from setTimeout")]),t._v("\n")])])]),n("p",[t._v("基于先前的分析，在一次循环中当没有可执行的 "),n("code",[t._v("setTimeout/setInterval")]),t._v(" 计时器回调时，先前事件循环 "),n("code",[t._v("tick")]),t._v(" 总会在 "),n("code",[t._v("poll")]),t._v(" 阶段所阻塞。"),n("code",[t._v("poll")]),t._v(" 阶段的下一阶段始终是 "),n("code",[t._v("check")]),t._v(" 阶段，那么在 "),n("code",[t._v("poll")]),t._v(" 阶段将执行的 I/O  回调即上面例中的 "),n("code",[t._v("setTimeout")]),t._v(" 和 "),n("code",[t._v("setImmediate")]),t._v(" 回调，然后进入下一阶段 （"),n("code",[t._v("check")]),t._v(" 阶段）执行包含 "),n("code",[t._v("setImmediate")]),t._v(" 回调然后再进入到下一事件循环 "),n("code",[t._v("tick")]),t._v(" 的 "),n("code",[t._v("timer")]),t._v(" 阶段执行 "),n("code",[t._v("setTimeout")]),t._v(" 回调。")]),t._v(" "),n("p",[t._v("所以在 I/O 回调中注册的 "),n("code",[t._v("setTimeout/setInterval")]),t._v(" 回调函数始终在 "),n("code",[t._v("setImmediate")]),t._v(" 的回调函数之后执行")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Node 架构总结为 "),n("code",[t._v("V8 + Libuv")]),t._v(", 事件循环在 Node 架构中的哪个位置？")]),t._v(" "),n("p",[t._v("Libuv")])]),t._v(" "),n("li",[n("p",[t._v("事件循环中的每一次 Tick 是 "),n("code",[t._v("判断队列是否为空+取回调执行")]),t._v("？ 还是 "),n("code",[t._v("检查是否完成的任务+添加回调到队列+执行回调")]),t._v(" ？")]),t._v(" "),n("p",[t._v("判断队列是否为空+取回调执行")])]),t._v(" "),n("li",[n("p",[t._v("基于上一点的问题，线程池跟事件循环到底是怎么配合动作的")]),t._v(" "),n("p",[t._v("根据《深入浅出Nodejs》中的描述：线程池中的 I/O 操作调用完毕之后，会调用 "),n("code",[t._v("PostQueuedCompletionStatus()")]),t._v(" 通知 IOCP（即 Libuv），然后在事件循环的 Tick 执行中可以通过 "),n("code",[t._v("GetQueuedCompletiontatus()")]),t._v(" 方法获取是否有执行完的请求，如果存在，会将请求对象加入到 I/O 观察者的队列中，然后将其当做事件处理")])]),t._v(" "),n("li",[n("p",[t._v("pending callbacks 和 poll，傻傻分不清到底是谁执行 I/O 回调")]),t._v(" "),n("p",[t._v("主要还是在 Poll 阶段检查和执行 I/O 的回调，部分特别的 I/O "),n("code",[t._v("pending callbacks")]),t._v(" 阶段执行")])])]),t._v(" "),n("h3",{attrs:{id:"q-a"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[t._v("#")]),t._v(" Q&A")]),t._v(" "),n("p",[t._v("事件循环是 Node 处理非阻塞I/O操作的机制。 事件循环是尽可能的将相应的操作分担给操作系统，从而让单线程的 node 专注于非阻塞式的I/O操作")]),t._v(" "),n("p",[n("strong",[t._v("如果你的计算机只有一单核的CPU（暂先不考虑超线程程技术，即在一个CPU上同时执行两个线程），还能做到并行吗？")])]),t._v(" "),n("p",[t._v("就算把代码写出花来，也不能获得真正的并行")]),t._v(" "),n("p",[n("strong",[t._v("是事件循环提供了并行的能力吗？")])]),t._v(" "),n("p",[t._v("事件循环也是运行在单线程环境中，这表示一个时刻只能处理一个事件，没法提供并行支持")]),t._v(" "),n("p",[n("strong",[t._v("如果存在并行，那么应该位于Node的哪个层面？")])]),t._v(" "),n("p",[t._v("并行存在于 libuv 的线程池中，实现的并行为线程级别的并行（需要多核CPU）")]),t._v(" "),n("p",[n("strong",[t._v("与浏览器实现对比")])]),t._v(" "),n("p",[t._v("在 nodejs 中事件循环不再是由单一个 "),n("code",[t._v("task queue")]),t._v(" 和 "),n("code",[t._v("micro-task queue")]),t._v(" 组成，而是由多个阶段 "),n("code",[t._v("phase")]),t._v(" 的多个回调函数队列 "),n("code",[t._v("callbacks queues")]),t._v(" 组成一次事件循环 "),n("code",[t._v("tick")]),t._v("。 并且在每一个单独的阶段都存在一个单独的回调函数 "),n("code",[t._v("FIFO")]),t._v(" 队列。")]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://learnku.com/articles/38802",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js 事件循环-比官方更全面"),n("OutboundLink")],1)])]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://set.sh/post/200317-how-nodejs-event-loop-works",target:"_blank",rel:"noopener noreferrer"}},[t._v("从 libuv 看 nodejs 事件循环"),n("OutboundLink")],1)])]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://blog.butonly.com/archives/",target:"_blank",rel:"noopener noreferrer"}},[t._v("libuv 源码分析"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);