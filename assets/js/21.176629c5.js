(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{518:function(_,v,e){_.exports=e.p+"assets/img/tcp_1.dc84424c.png"},519:function(_,v,e){_.exports=e.p+"assets/img/tcp_2.8aa7c993.png"},520:function(_,v,e){_.exports=e.p+"assets/img/tcp_3.1bcbb0e5.png"},709:function(_,v,e){"use strict";e.r(v);var o=e(54),c=Object(o.a)({},(function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("h1",{attrs:{id:"tcp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[_._v("#")]),_._v(" TCP")]),_._v(" "),o("p",[_._v("TCP（Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的"),o("strong",[_._v("传输层")]),_._v("通信协议")]),_._v(" "),o("h2",{attrs:{id:"tcp特性"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tcp特性"}},[_._v("#")]),_._v(" TCP特性")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("TCP是对面连接、可靠的字节流服务")])]),_._v(" "),o("li",[o("p",[_._v("在一次TCP连接中，仅有两方进行通信。广播和多播不能用TCP")])]),_._v(" "),o("li",[o("p",[_._v("TCP使用校验和，确认和重传机制来保证可靠传输")])]),_._v(" "),o("li",[o("p",[_._v("TCP给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复")])]),_._v(" "),o("li",[o("p",[_._v("TCP使用滑动窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制")])])]),_._v(" "),o("p",[_._v("需要注意的是：TPC并不能保证数据一定能百分百传输成功，TCP能做的只是，如果有可能就把数据传递给对方，否则就（通过放弃重传且中断连接的方式）通过用户。因此准备的说TCP不是百分百可靠的协议，它所能提供是数据的可靠传送或故障的通知")]),_._v(" "),o("h2",{attrs:{id:"三次握手与四次挥手"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三次握手与四次挥手"}},[_._v("#")]),_._v(" 三次握手与四次挥手")]),_._v(" "),o("p",[_._v("每次主动建立一次TCP连接，客户端和服务端需要共交换三个数据包，即三次握手")]),_._v(" "),o("p",[_._v("每次主动断开一次TCP连接，客户端和服务端需要共交换四个数据包，即四次挥手")]),_._v(" "),o("p",[_._v("TCT报文中有6种标志位：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("SYN：建立连接")])]),_._v(" "),o("li",[o("p",[_._v("ACK：是对收到的数据包的确认，值是"),o("code",[_._v("Acknowledge number")])])]),_._v(" "),o("li",[o("p",[_._v("PSH：发送")])]),_._v(" "),o("li",[o("p",[_._v("FIN：结束")])]),_._v(" "),o("li",[o("p",[_._v("RST：重置")])]),_._v(" "),o("li",[o("p",[_._v("URG：紧急")])]),_._v(" "),o("li",[o("p",[_._v("Sequence number：序列号，为了建立连接以后传送数据的位置")])]),_._v(" "),o("li",[o("p",[_._v("Acknowledge number：表示期望对方（接收方）的下一次"),o("code",[_._v("sequence number")]),_._v("是多少")])])]),_._v(" "),o("h3",{attrs:{id:"三次握手"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[_._v("#")]),_._v(" 三次握手")]),_._v(" "),o("p",[_._v("三次握手的目的是连接服务器的指定端口，建立TCP连接，并同步双方的序列号和确认号交换TCP窗口大小信息,在Socket编程中客户端执行"),o("code",[_._v("connect()")]),_._v("时，将触发三次握手。")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("第一次握手: "),o("code",[_._v("SYN(同步序列编号)=1")]),_._v(";"),o("code",[_._v("seq(序号)=x")])]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("SYN=1")]),_._v(": 告诉服务器，这是一个希望建立连接请求")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("seq=x")]),_._v(": 一个随机的初始顺列号")])])]),_._v(" "),o("p",[_._v("发送完毕后，客户端进入"),o("code",[_._v("SYN_SEND")]),_._v("状态。")])]),_._v(" "),o("li",[o("p",[_._v("第二次握手: "),o("code",[_._v("ACK=1")]),_._v("; "),o("code",[_._v("ACKnum=x+1")]),_._v("; "),o("code",[_._v("seq=y")]),_._v("; "),o("code",[_._v("SYN=1")])]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("ACK=1")]),_._v("：用来确认收到客户端的SYN包")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("ACKnum=x+1")]),_._v("：准备接收序列号为"),o("code",[_._v("x+1")]),_._v("的包")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("SYN=1")]),_._v("：表明服务端也希望建立TCP连接")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("seq=y")]),_._v(": 发送自己的初始顺列号")])])]),_._v(" "),o("p",[_._v("发送完毕后，服务器端进入"),o("code",[_._v("SYN_RCVD")]),_._v("状态")])]),_._v(" "),o("li",[o("p",[_._v("第三次握手: "),o("code",[_._v("ACK=1")]),_._v("; "),o("code",[_._v("ACKnum=y+1")]),_._v("；"),o("code",[_._v("seq=x+1")])]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("ACK=1")]),_._v("：用来确认收到服务端的包")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("seq=x+1")]),_._v(": 此时序列号为"),o("code",[_._v("x+1")]),_._v("(对应上一步上的"),o("code",[_._v("ACKnum=x+1")]),_._v(")")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("ACKnum=y+1")]),_._v("：表示客户端准备接收服务端序列号为"),o("code",[_._v("y+1")]),_._v("的数据包")])])]),_._v(" "),o("p",[_._v("发送完毕后，客户端和服务端都进入"),o("code",[_._v("ESTABLISEND")]),_._v("状态，TCP握手结束。")])])]),_._v(" "),o("p",[_._v("三次握手图示：")]),_._v(" "),o("p",[o("img",{attrs:{src:e(518),alt:""}})]),_._v(" "),o("h2",{attrs:{id:"四次挥手"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[_._v("#")]),_._v(" 四次挥手")]),_._v(" "),o("p",[_._v("TCP的连接的解除需要发送四个包，因此称为四次挥手。客户端和服务端均可以主动发起挥手动作，在"),o("code",[_._v("socket")]),_._v("编程中，任何一方执行"),o("code",[_._v("close()")]),_._v("操作即可产生挥手操作。")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("第一次挥手: "),o("code",[_._v("FIN=1")]),_._v("; "),o("code",[_._v("seq=x")])]),_._v(" "),o("p",[_._v("以客户端想要关闭连接为例")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("FIN_WAIT_1")]),_._v(":表示自己已经没有数据可以发送了(但是仍然可以接受数据)")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("seq=x")]),_._v(": 序列号")])])]),_._v(" "),o("p",[_._v("发送完毕后，客户端"),o("code",[_._v("FIN_WAIT_1")]),_._v("状态")])]),_._v(" "),o("li",[o("p",[_._v("第二次挥手: "),o("code",[_._v("ACK=1")]),_._v("; "),o("code",[_._v("ACKnum=x+1")]),_._v("; "),o("code",[_._v("seq=y")])]),_._v(" "),o("ul",[o("li",[o("p",[_._v("ACK=1：确认收到包（但还没有准备好关闭连接）")])]),_._v(" "),o("li",[o("p",[_._v("ACKnum=x+1：准备接收"),o("code",[_._v("x+1")]),_._v("位置的包")])]),_._v(" "),o("li",[o("p",[_._v("seq=y： 发送自己的顺列号")])])])])]),_._v(" "),o("p",[_._v("发送完毕后，服务器进入"),o("code",[_._v("CLOSE_WAIT")]),_._v("状态，客户端接收到这个确认包之后，进入"),o("code",[_._v("FIN_WAIT2")]),_._v("状态，等待服务器关闭连接")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("第三次挥手："),o("code",[_._v("FIN=1")]),_._v("; "),o("code",[_._v("ACK=1")]),_._v("; "),o("code",[_._v("seq=z")]),_._v("; "),o("code",[_._v("ACKnumber=x+1")])]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("FIN=1")]),_._v(": 服务器端准备好关闭连接时，向客户端发送结束连接请求")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("ACK")]),_._v(": 继续之前的确认？")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("seq=z")]),_._v("：再发一个序咧号？")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("ACKnumber=x+1")]),_._v("：准备接收"),o("code",[_._v("x+1")]),_._v("位置的包")])])]),_._v(" "),o("p",[_._v("发送完毕后，服务器进入"),o("code",[_._v("LAST_ACK")]),_._v("状态，等待来自客户端的最后一个ACK")])]),_._v(" "),o("li",[o("p",[_._v("第四次挥手："),o("code",[_._v("ACK=1")]),_._v("; "),o("code",[_._v("seq=x+1")]),_._v("; "),o("code",[_._v("ACKnum=z+1")])]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("ACK=1")]),_._v(": 确认收到包")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("seq=x+1")]),_._v("：包的位置（对应上面的"),o("code",[_._v("ACKnumber=x+1")]),_._v("）")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("ACKnum=z+1")]),_._v(": 准备接收"),o("code",[_._v("z+1")]),_._v("的位置的包")])])])])]),_._v(" "),o("p",[_._v("客户端接收来自服务器端的关闭请求，发送一个确认包，并进入"),o("code",[_._v("TIME_WAIT")]),_._v("状态，等待可能出现的要求重传的"),o("code",[_._v("ACK包")])]),_._v(" "),o("p",[_._v("服务器端接收到这个确认包之后，关闭连接，进入"),o("code",[_._v("close")]),_._v("状态")]),_._v(" "),o("p",[_._v("客户端等待了某个固定时间之后，没有收到服务器端的"),o("code",[_._v("ACK")]),_._v("，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入"),o("code",[_._v("CLOSED")]),_._v("状态。")]),_._v(" "),o("p",[_._v("四次挥手的示意图如下：")]),_._v(" "),o("p",[o("img",{attrs:{src:e(519),alt:""}})]),_._v(" "),o("h2",{attrs:{id:"seq和acknum"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#seq和acknum"}},[_._v("#")]),_._v(" Seq和ACKnum")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("seq")]),_._v(":表示当前要传输的数据在包中的位置")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("ACKnum")]),_._v(": 表示希望下次对方传数据过来时，数据在包中的位置")])])]),_._v(" "),o("p",[_._v("拿下完整的TCP连接-HTTP请求-TCP断开列子来理解一下")]),_._v(" "),o("p",[o("strong",[_._v("ACK仅仅表示确认的意思，下面图中的ACK表示的是 ACKnum")])]),_._v(" "),o("p",[o("img",{attrs:{src:e(520),alt:""}})]),_._v(" "),o("ol",[o("li",[o("p",[_._v("=》包1：TCP会话的任何一端开始的序列号可能是随机也有可能是上一个该端口的序列号+1，这里假设从 0 开始（"),o("code",[_._v("seq=0,SYN=1")]),_._v("）")])]),_._v(" "),o("li",[o("p",[_._v("《= 包2：服务端收到客户端的请求，并在响应中标记"),o("code",[_._v("ACK_N=0+1")]),_._v("告诉客户端下次数据从"),o("code",[_._v("1")]),_._v("位置开始传输，同时标记"),o("code",[_._v("seq=0")]),_._v("表示自己当前序列位置")])]),_._v(" "),o("li",[o("p",[_._v("=》包3：收到服务端的响应后，客户端继续做出回应，此时标记"),o("code",[_._v("seq=1")]),_._v("（对应包2中的"),o("code",[_._v("ACK_N=0+1")]),_._v("），同时标记"),o("code",[_._v("ACK_N=1")]),_._v("(对应包2的"),o("code",[_._v("seq=0+1")]),_._v(")，表示希望服务端下次传数据从"),o("code",[_._v("1")]),_._v("位置开始")])])]),_._v(" "),o("p",[_._v("此时TCP握手成功")]),_._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[o("p",[_._v("=》包4：客户端开始发送HTTP请求，此时请求包标记"),o("code",[_._v("seq=1")]),_._v("，之所以仍为 1 是因为目前还没发送过数据，位置不需要改变，同时也对应包2的"),o("code",[_._v("ACK_N=1")]),_._v("；"),o("code",[_._v("ACK_N")]),_._v("也还是"),o("code",[_._v("1")]),_._v("（因为没收到服务端任何数据，维持包3的位置），除了这些标记还传送了 725 字节长度的数据")])]),_._v(" "),o("li",[o("p",[_._v("《= 包5：服务端收到请求了，当前标记"),o("code",[_._v("seq=1")]),_._v("（因为目前服务端没传送过任何数据，不需要改变位置，同时对应包4中的"),o("code",[_._v("ACK_N=1")]),_._v("），"),o("code",[_._v("ACK_N=725+1")]),_._v("(因为客户端发送了"),o("code",[_._v("725")]),_._v("字节的数据)，那么下次希望客户端从"),o("code",[_._v("726")]),_._v("位置开始传送数据")])]),_._v(" "),o("li",[o("p",[_._v("《= 包6：紧接着服务端发送"),o("code",[_._v("1448")]),_._v("字节长度的数据，此时标记"),o("code",[_._v("seq=1")]),_._v("（因为在这之前没传送过任何数据，不需要改变位置，同时也对应包4的"),o("code",[_._v("ACK_N=1")]),_._v("），"),o("code",[_._v("ACK_N=725+1")]),_._v("(同包5，因为客户端发送了"),o("code",[_._v("725")]),_._v("字节的数据)，那么下次希望客户端从"),o("code",[_._v("726")]),_._v("位置开始传送数据")])]),_._v(" "),o("li",[o("p",[_._v("=》包7：此时客户端"),o("code",[_._v("seq=726")]),_._v("（对应包6中的"),o("code",[_._v("ACK_N=725+1")]),_._v("），"),o("code",[_._v("ACK_N")]),_._v("是"),o("code",[_._v("1448+1")]),_._v("（因为目前包6中服务端发送了"),o("code",[_._v("1448")]),_._v("字节长度的数据），告诉服端希望下次从"),o("code",[_._v("1449")]),_._v("位置开始传输数据")])]),_._v(" "),o("li",[o("p",[_._v("《= 包8：服务端再次发送"),o("code",[_._v("1448")]),_._v("字节长度的数据，此时标记"),o("code",[_._v("seq=1449")]),_._v("（对应客户端的"),o("code",[_._v("ACK_N=1449")]),_._v("），"),o("code",[_._v("ACK_N=726")]),_._v("(因为目前为客户端共发送了"),o("code",[_._v("725")]),_._v("字节的数据)，那么下次希望客户端从"),o("code",[_._v("726")]),_._v("位置开始传送数据")])]),_._v(" "),o("li",[o("p",[_._v("=》包9：客户端"),o("code",[_._v("seq=726")]),_._v("(对应包8中的"),o("code",[_._v("ACK_N=726")]),_._v(")，"),o("code",[_._v("ACK_N=1448+1448+1=2896")]),_._v("(服务传过的两次数据的长度+1)，表示下次服端应从"),o("code",[_._v("2896")]),_._v("位置开始传输数据")])]),_._v(" "),o("li",[o("p",[_._v("《= 包10："),o("code",[_._v("seq=2896")]),_._v("(对应包9中的"),o("code",[_._v("ACK_N=2896")]),_._v(")，"),o("code",[_._v("ACK_N=726")]),_._v("（因为目前为客户端共发送了"),o("code",[_._v("725")]),_._v("字节的数据），同时发送"),o("code",[_._v("1448")]),_._v("字节的数据")])]),_._v(" "),o("li",[o("p",[_._v("=》包11："),o("code",[_._v("seq=726")]),_._v("(对应包10中的"),o("code",[_._v("ACK_N=726")]),_._v("),"),o("code",[_._v("ACK_N=1448+1448+1448+1=4345")]),_._v("(共发送了4344的字节长度+1)")])])]),_._v(" "),o("p",[_._v("以此类推")]),_._v(" "),o("p",[_._v("接下来断开连接")]),_._v(" "),o("ol",{attrs:{start:"12"}},[o("li",[o("p",[_._v("=》 包12： "),o("code",[_._v("seq=627")]),_._v("（还是之前的值），"),o("code",[_._v("ACK_N=4345")]),_._v("(还是之前的值,即使要断开也要通知一下，如果万一你还有数据过来，请放在这个位置),"),o("code",[_._v("FIN=1")]),_._v("表示要断开连接了")])]),_._v(" "),o("li",[o("p",[_._v("《= 包13："),o("code",[_._v("seq=4345")]),_._v("（对应包12的"),o("code",[_._v("ACK_N=4345")]),_._v("）"),o("code",[_._v("ACK_N=627+1=628")])])]),_._v(" "),o("li",[o("p",[_._v("《= 包13："),o("code",[_._v("seq=4345")]),_._v("（保持之前包13的）"),o("code",[_._v("ACK_N=628")]),_._v("（保持之前包13的）,"),o("code",[_._v("FIN=1")]),_._v("表示要断开连接了")])]),_._v(" "),o("li",[o("p",[_._v("=> 包14：客户端发送"),o("code",[_._v("ACK=1")]),_._v(","),o("code",[_._v("seq=628")]),_._v(","),o("code",[_._v("ACK_N=4345")]),_._v("，结束")])])]),_._v(" "),o("h2",{attrs:{id:"syn攻击"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#syn攻击"}},[_._v("#")]),_._v(" SYN攻击")]),_._v(" "),o("p",[_._v("什么是 SYN 攻击（SYN Flood）？")]),_._v(" "),o("p",[_._v("在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.")]),_._v(" "),o("p",[_._v("SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。")]),_._v(" "),o("p",[_._v("SYN 攻击是一种典型的 DoS/DDoS 攻击")]),_._v(" "),o("p",[o("strong",[_._v("如何检测 SYN 攻击？")])]),_._v(" "),o("p",[_._v("检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击")]),_._v(" "),o("p",[o("strong",[_._v("如何防御 SYN 攻击？")])]),_._v(" "),o("p",[_._v("SYN攻击不能完全被阻止，除非将TCP协议重新设计。我们所做的是尽可能的减轻SYN攻击的危害，常见的防御 SYN 攻击的方法有如下几种：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("缩短超时（SYN Timeout）时间")])]),_._v(" "),o("li",[o("p",[_._v("增加最大半连接数")])]),_._v(" "),o("li",[o("p",[_._v("过滤网关防护")])]),_._v(" "),o("li",[o("p",[_._v("SYN cookies技术")])])]),_._v(" "),o("h2",{attrs:{id:"tcp-keepalive"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tcp-keepalive"}},[_._v("#")]),_._v(" TCP KeepAlive")]),_._v(" "),o("p",[_._v("TCP 的连接，实际上是一种纯软件层面的概念，在物理层面并没有“连接”这种概念。TCP 通信双方建立交互的连接，但是并不是一直存在数据交互，有些连接会在数据交互完毕后，主动释放连接，而有些不会。在长时间无数据交互的时间段内，交互双方都有可能出现掉电、死机、异常重启等各种意外，当这些意外发生之后，这些 TCP 连接并未来得及正常释放，在软件层面上，连接的另一方并不知道对端的情况，它会一直维护这个连接，长时间的积累会导致非常多的半打开连接，造成端系统资源的消耗和浪费，为了解决这个问题，在传输层可以利用 TCP 的 KeepAlive 机制实现来实现。主流的操作系统基本都在内核里支持了这个特性。")]),_._v(" "),o("p",[_._v("TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。")]),_._v(" "),o("p",[_._v("TCP-Keepalive-HOWTO 有对 TCP KeepAlive 特性的详细介绍，有兴趣的同学可以参考。这里主要说一下，TCP KeepAlive 的局限。首先 TCP KeepAlive 监测的方式是发送一个 probe 包，会给网络带来额外的流量，另外 TCP KeepAlive 只能在内核层级监测连接的存活与否，而连接的存活不一定代表服务的可用。例如当一个服务器 CPU 进程服务器占用达到 100%，已经卡死不能响应请求了，此时 TCP KeepAlive 依然会认为连接是存活的。因此 TCP KeepAlive 对于应用层程序的价值是相对较小的。需要做连接保活的应用层程序，例如 QQ，往往会在应用层实现自己的心跳功能。")]),_._v(" "),o("blockquote",[o("p",[_._v("TCP KeepAlive和HTTP KeepAlive是两个东西！")])]),_._v(" "),o("h2",{attrs:{id:"q-a"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[_._v("#")]),_._v(" Q&A")]),_._v(" "),o("p",[o("strong",[_._v("为什么建立连接需要三次握手，关闭连接需要四次握手")])]),_._v(" "),o("p",[_._v("因为关闭连接时，在收到对方的"),o("code",[_._v("FIN报文")]),_._v("通知时，仅仅表示没有数据要发送给你了，但未必你所有的数据都全部发送给对方了，也就是说你可能还会发送一份数据给对方之后，再发"),o("code",[_._v("·FIN报文")]),_._v("对对方表示同意关闭连接，所以它这里的"),o("code",[_._v("ACK报文")]),_._v("和"),o("code",[_._v("FIN报文")]),_._v("是分开发送")]),_._v(" "),o("p",[o("strong",[_._v("为什么需要三次握手，而非两次")])]),_._v(" "),o("p",[_._v("为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误。")]),_._v(" "),o("p",[_._v("这种情况是：一端(client)A发出去的第一个连接请求报文并没有丢失，而是因为某些未知的原因在某个网络节点上发生滞留，\n导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个早已失效的报文段，但是B收到此失效的报文之后，\n会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同意建立连接。如果不采用“三次握手”，\n那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因此不会去向B端发送数据，\nB端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。如果采用“三次握手”的话就不会出现这种情况，B端收到一个过时失效的报文段之后，向A端发出确认，此时A并没有要求建立连接，所以就不会向B端发送确认，这个时候B端也能够知道连接没有建立。")]),_._v(" "),o("p",[_._v("TPC的连接是交互序号的过程，A向B通信，B向A回传，这两次只能确认对A的序列号答成一致，并不能对B的序列号还没确认")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("A向B说，我是A")])]),_._v(" "),o("li",[o("p",[_._v("B回A，我知道你是A了，我是B")])])]),_._v(" "),o("p",[_._v("此时结束的话，B会想，这A到底知道不知道我是B")]),_._v(" "),o("p",[o("strong",[_._v("TCP第四次挥手为什么要等待2MSL")])]),_._v(" "),o("p",[_._v("最主要是因为两个理由:")]),_._v(" "),o("ol",[o("li",[o("p",[_._v("为了保证客户端发送的最后一个"),o("code",[_._v("ACK报文段")]),_._v("能够到达服务器。因为这个"),o("code",[_._v("ACK")]),_._v("有可能丢失，从而导致处在"),o("code",[_._v("LAST-ACK")]),_._v("状态的服务器收不到对"),o("code",[_._v("FIN-ACK")]),_._v("的确认报文。服务器会超时重传这个"),o("code",[_._v("FIN-ACK")]),_._v("，接着客户端再重传一次确认，重新启动时间等待计时器。最后客户端和服务器都能正常的关闭。假设客户端不等待"),o("code",[_._v("2MSL")]),_._v("，而是在发送完"),o("code",[_._v("ACK")]),_._v("之后直接释放关闭，一但这个"),o("code",[_._v("ACK")]),_._v("丢失的话，服务器就无法正常的进入关闭连接状态")])]),_._v(" "),o("li",[o("p",[_._v("客户端在发送"),o("code",[_._v("ACK")]),_._v("后，再等待"),o("code",[_._v("2MSL")]),_._v("时间，可以使本次连接所产生的数据段从网络中消失，从而保证下次建立连接后不会产生数据冲突")])])]),_._v(" "),o("p",[o("strong",[_._v("为什么seq是随机的")])]),_._v(" "),o("p",[o("code",[_._v("seq")]),_._v("一般是基于时间，利用散列函数（这个函数一定时间也会轮换）计算而成的，目的是防止被猜测序列号从而被伪造攻击。同时因为是基于时间的，所以几乎不会与最近断开的或正在等待中的序列号相同")]),_._v(" "),o("blockquote",[o("p",[o("a",{attrs:{href:"https://blog.csdn.net/a19881029/article/details/38091243",target:"_blank",rel:"noopener noreferrer"}},[_._v("理解TCP序列号（Sequence Number）和确认号（Acknowledgment Number)"),o("OutboundLink")],1)])]),_._v(" "),o("blockquote",[o("p",[o("a",{attrs:{href:"https://hit-alibaba.github.io/interview/basic/network/TCP.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("TCP特性"),o("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=c.exports}}]);