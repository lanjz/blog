(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{703:function(e,t,o){"use strict";o.r(t);var a=o(55),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"react-router使用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#react-router使用"}},[e._v("#")]),e._v(" React-router使用")]),e._v(" "),o("h2",{attrs:{id:"react-router-react-router-dom"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#react-router-react-router-dom"}},[e._v("#")]),e._v(" react-router/react-router-dom")]),e._v(" "),o("p",[o("code",[e._v("react-router")]),e._v(" 实现了路由的核心功能, "),o("code",[e._v("react-router-dom")]),e._v(" 是基于 "),o("code",[e._v("react-router")]),e._v(" 的基础上加入了在浏览器运行环境下的一些功能，例如："),o("code",[e._v("Link")]),e._v(" 组件，会渲染一个 "),o("code",[e._v("a")]),e._v(" 标签; "),o("code",[e._v("BrowserRouter")]),e._v(" 和 "),o("code",[e._v("HashRouter")]),e._v(" 组件，前者使用 "),o("code",[e._v("pushState")]),e._v(" 和 "),o("code",[e._v("popState")]),e._v(" 事件构建路由，后者使用 "),o("code",[e._v("window.location.hash")]),e._v(" 和 "),o("code",[e._v("hashchange")]),e._v(" 事件构建路由。")]),e._v(" "),o("p",[e._v("react-router-native: 基于react-router，类似react-router-dom，加入了react-native运行环境下的一些功能")]),e._v(" "),o("p",[o("code",[e._v("react-router")]),e._v(" 与 "),o("code",[e._v("react-router-dom")])]),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.cnblogs.com/cckui/p/11490372.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("路径匹配组件"),o("OutboundLink")],1)]),e._v(" "),o("h1",{attrs:{id:"路由组件"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#路由组件"}},[e._v("#")]),e._v(" 路由组件")]),e._v(" "),o("h2",{attrs:{id:"router"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#router"}},[e._v("#")]),e._v(" Router")]),e._v(" "),o("p",[o("code",[e._v("Route")]),e._v(" 用来控制路径对应显示的组件")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Route path='/about' exact component={Login}></Route>\n<Route path='/about/:id' exact component={Home}></Route>\n")])])]),o("p",[e._v("它有以下参数")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("path")]),e._v("：指定路由跳转路径")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("exact")]),e._v(": 精确匹配路由")]),e._v(" "),o("p",[e._v("上面的例子如果没有"),o("code",[e._v("exact")]),e._v("属性，当访问"),o("code",[e._v("/about/1")]),e._v("时,"),o("code",[e._v("Login")]),e._v("和"),o("code",[e._v("Home")]),e._v("组件都会渲染")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("component")]),e._v(": 路由对应的组件")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("render")]),e._v(": 通过写render函数返回具体的dom")]),e._v(" "),o("p",[o("code",[e._v("<Route path='/about' exact render={() => (<div>about</div>)}></Route>")])]),e._v(" "),o("p",[o("code",[e._v("render")]),e._v(" 也可以直接返回 组件")]),e._v(" "),o("p",[o("code",[e._v("<Route path='/about' exact render={() => <About /> }></Route>")])]),e._v(" "),o("p",[o("strong",[e._v("使用"),o("code",[e._v("render")]),e._v("的好处是不仅可以传递 "),o("code",[e._v("props")]),e._v(" 属性还可以传递自定义属性")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Route path='/about' exact render={(props) => {\n    return <About {...props} name={'cedric'} />\n}}></Route>\n")])])]),o("p",[o("code",[e._v("render")]),e._v(" 方法也可用来进行权限认证：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Route path='/user' exact render={(props) => {\n    // isLogin 从 redux 中拿到, 判断用户是否登录\n    return isLogin ? <User {...props} name={'cedric'} /> : <div>请先登录</div>\n}}></Route>\n")])])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("sensitive")]),e._v("：是否区分路由大小写")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("strict")]),e._v(": 是否配置路由后面的 '/'")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("location")]),e._v("x`: 将 与当前历史记录位置以外的位置相匹配，则此功能在路由过渡动效中非常有用")])])]),e._v(" "),o("h2",{attrs:{id:"switch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#switch"}},[e._v("#")]),e._v(" Switch")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<BrowserRouter>\n    <Route path='/' exact component={Home}></Route>\n    <Route path='/about' exact component={Login}></Route>\n    <Route path='/detail/:id' exact component={Detail}></Route>\n    <Route path='/about' exact component={Home}></Route>\n</BrowserRouter>\n")])])]),o("p",[e._v("上面有两个"),o("code",[e._v("/about")]),e._v("路由，当访问"),o("code",[e._v("/about")]),e._v("路径时，显示的将是"),o("code",[e._v("Home")]),e._v("组件即下面那个，因为默认下匹配路径会把所有路由都比较一遍")]),e._v(" "),o("p",[e._v("如果希望匹配到不继续往下匹配，就需要使用"),o("code",[e._v("Switch")]),e._v("组件")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("imoprt { Switch } from 'react-router-dom'\n<BrowserRouter>\n    <Route path='/' exact component={Home}></Route>\n    <Route path='/about' exact component={Login}></Route>\n    <Route path='/detail/:id' exact component={Detail}></Route>\n    <Route path='/about' exact component={Home}></Route>\n</BrowserRouter>\n")])])]),o("h2",{attrs:{id:"link"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#link"}},[e._v("#")]),e._v(" Link")]),e._v(" "),o("p",[o("code",[e._v("Link")]),e._v(" 都可以用来指定路由跳转,它有两种使用方式：")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("通过字符串执行跳转路由")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Link to='/login'>\n    <span>登录</span>\n</Link>\n")])])])]),e._v(" "),o("li",[o("p",[e._v("通过对象指定跳转路由")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Link to={{\n        pathname: '/login',\n        search: '?name=cedric',\n        hash: '#someHash',\n        state: { fromWechat: true }\n    }}>\n    <span>登录</span>\n</Link>\n")])])]),o("ul",[o("li",[o("p",[o("code",[e._v("pathname")]),e._v(": 表示要链接到的路径的字符串")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("search")]),e._v(": 表示查询参数的字符串形式")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("hash")]),e._v(": 放入网址的 "),o("code",[e._v("hash")]),e._v("，例如 "),o("code",[e._v("#a-hash")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("state")]),e._v(": 状态持续到 "),o("code",[e._v("location")]),e._v(".通常用于隐式传参（埋点），可以用来统计页面来源.组件中通过"),o("code",[e._v("this.props.location.state")]),e._v("获取")])])])])]),e._v(" "),o("h2",{attrs:{id:"navlink"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#navlink"}},[e._v("#")]),e._v(" NavLink")]),e._v(" "),o("p",[e._v("可以看做一个特殊版本的 Link，当它与当前 URL 匹配时，为其渲染元素添加样式属性")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Link to='/login' activeClassName=\"selected\">\n    <span>登录</span>\n</Link>\n---------------------------------------------\n<NavLink\n  to=\"/login\"\n  activeStyle={{\n    fontWeight: 'bold',\n    color: 'red'\n   }}\n>\n    <span>登录</span>\n</NavLink>\n")])])]),o("ul",[o("li",[o("p",[o("code",[e._v("exact")]),e._v(": 如果为 "),o("code",[e._v("true")]),e._v("，则仅在位置完全匹配时才应用 "),o("code",[e._v("active 的类/样式")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("strict")]),e._v(": 当为 "),o("code",[e._v("true")]),e._v("，要考虑位置是否匹配当前的URL时，"),o("code",[e._v("pathname")]),e._v(" 尾部的斜线要考虑在内")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("location")]),e._v(" 接收一个"),o("code",[e._v("location")]),e._v("对象，当"),o("code",[e._v("url")]),e._v("满足这个对象的条件才会跳转")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("isActive")]),e._v(": 接收一个回调函数，只有当 "),o("code",[e._v("active")]),e._v(" 状态变化时才能触发，如果返回false则跳转失败")])])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('const oddEvent = (match, location) => {\n  if (!match) {\n    return false\n  }\n  const eventID = parseInt(match.params.eventID)\n  return !isNaN(eventID) && eventID % 2 === 1\n}\n\n<NavLink\n  to="/login"\n  isActive={oddEvent}\n>login</NavLink>\n')])])]),o("h2",{attrs:{id:"redirect"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#redirect"}},[e._v("#")]),e._v(" Redirect")]),e._v(" "),o("p",[o("code",[e._v("Redirect")]),e._v(" 将导航到一个新的地址。即重定向")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("<Switch> \n    <Route path='/home' exact component={Home}></Route>\n    <Route path='/login' exact component={Login}></Route> \n    <Redirect to=\"/home\" from='/' exact /> \n</Switch>\n")])])]),o("p",[e._v("上面，当访问路由"),o("code",[e._v("/")]),e._v("时，会直接重定向到"),o("code",[e._v("/home")])]),e._v(" "),o("p",[o("code",[e._v("Redirect")]),e._v(" 常在用户是否登录：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("class Center extends PureComponent {\n    render() {\n        const { loginStatus } = this.props;\n        if (loginStatus) {\n            return (\n                <div>个人中心</div>\n            )\n        } else {\n            return <Redirect to='/login' />\n        }\n    }\n}\n")])])]),o("p",[e._v("也可使用对象形式：")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('<Redirect\n  to={{\n    pathname: "/login",\n    search: "?utm=your+face",\n    state: { referrer: currentLocation }\n  }}\n/>\n')])])]),o("h2",{attrs:{id:"withrouter"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#withrouter"}},[e._v("#")]),e._v(" withRouter")]),e._v(" "),o("p",[o("code",[e._v("withRouter")]),e._v(" 可以将一个非路由组件包裹为路由组件，使这个非路由组件也能访问到当前路由的"),o("code",[e._v("match")]),e._v(", "),o("code",[e._v("location")]),e._v(", "),o("code",[e._v("history")]),e._v("对象。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("import { withRouter } from 'react-router-dom';\nclass Detail extends Component {\n    render() {\n        ··· ···\n    } \n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Detail))\n")])])]),o("h1",{attrs:{id:"路由对象"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#路由对象"}},[e._v("#")]),e._v(" 路由对象")]),e._v(" "),o("p",[e._v("路由组件中在"),o("code",[e._v("props")]),e._v("中可以取到路由对象")]),e._v(" "),o("h2",{attrs:{id:"history"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[e._v("#")]),e._v(" history")]),e._v(" "),o("p",[o("code",[e._v("history")]),e._v(" 对象通常会具有以下属性和方法：")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("length")]),e._v(": "),o("code",[e._v("history")]),e._v(" 堆栈的条目数")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("action")]),e._v(": 当前的操作("),o("code",[e._v("PUSH")]),e._v(", "),o("code",[e._v("REPLACE")]),e._v(", "),o("code",[e._v("POP")]),e._v(")")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("location")]),e._v(": 当前的路径信息。"),o("code",[e._v("location")]),e._v(" 会具有以下属性")]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("pathname")]),e._v(" : URL 路径")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("search")]),e._v(": URL 中的查询字符串")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("hash")]),e._v(": URL 的哈希片段")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("state")]),e._v(": 获取"),o("code",[e._v("history.push('/about', {abc: 23})")]),e._v("的第二个参数，"),o("code",[e._v("history.location.state // {abc: 23}")])])])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("push(path, [state])")]),e._v(": 在 "),o("code",[e._v("history")]),e._v(" 堆栈添加一个路由记录,并将路由至"),o("code",[e._v("path")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("replace(path, [state])")]),e._v(": 替换 "),o("code",[e._v("history")]),e._v(" 当前路由记录,并将路由至"),o("code",[e._v("path")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("go(n)")]),e._v(": 直接将路转至 "),o("code",[e._v("history")]),e._v(" 某个记录，如"),o("code",[e._v("history.go(-1)// 返回上一页")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("goBack()")]),e._v(": 等同于 "),o("code",[e._v("go(-1)")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("goForward()")]),e._v(": 等同于 "),o("code",[e._v("go(1)")])])]),e._v(" "),o("li",[o("p",[o("code",[e._v("block(prompt)")]),e._v(": 允许您监听"),o("code",[e._v("location")]),e._v("并触发"),o("code",[e._v("window.confirm")]),e._v("提示信息呈现给用户")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("// 或者在需要时使用返回消息的函数。\nhistory.block((location, action) => {\n  //location和action参数指示我们要转换到的位置以及如何到达那里。\n\n  //一个常见的用例是防止用户在有表单尚未提交时离开页面。\n  if (input.value !== '') return 'Are you sure you want to leave this page?';\n});\n")])])]),o("p",[e._v("如果需要使用自定义弹层提示，需要重写此行为，则在创建历史对象时提供"),o("code",[e._v("getUserConfirmation")]),e._v("。")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("const history = createHistory({\n  getUserConfirmation(message, callback) {\n    // 向用户显示一些自定义对话框并调用callback（true）继续传输，或调用callback（false）中止传输。\n  }\n});\n")])])])])]),e._v(" "),o("p",[o("strong",[e._v("只有通过 Route 组件渲染的组件，才能在 "),o("code",[e._v("this.props")]),e._v(" 上找到 "),o("code",[e._v("history")]),e._v(" 对象")])]),e._v(" "),o("h1",{attrs:{id:"路由过渡动画"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#路由过渡动画"}},[e._v("#")]),e._v(" 路由过渡动画")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("import { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Fragment> \n          <BrowserRouter>\n            <div>\n              <Header />\n              \n              {/* 最外部的<Route></Route>不进行任何路由匹配，仅仅是用来传递 location */}\n              \n              <Route render={({location}) => {\n                console.log(location);\n                return (\n                  <TransitionGroup>\n                    <CSSTransition\n                      key={location.key}\n                      classNames='fade'\n                      timeout={300}\n                    >\n                      <Switch>\n                        <Redirect exact from='/' to='/home' />\n                        <Route path='/home' exact component={Home}></Route>\n                        <Route path='/login' exact component={Login}></Route>\n                        <Route path='/write' exact component={Write}></Route>\n                        <Route path='/detail/:id' exact component={Detail}></Route>\n                        <Route render={() => <div>Not Found</div>} />\n                      </Switch>\n                    </CSSTransition>\n                  </TransitionGroup>\n                )\n              }}>\n              </Route>\n            </div>\n          </BrowserRouter>\n        </Fragment>\n      </Provider>\n    )\n  }\n}\n--------------------------------------------------------\n.fade-enter {\n  opacity: 0;\n  z-index: 1;\n}\n\n.fade-enter.fade-enter-active {\n  opacity: 1;\n  transition: opacity 300ms ease-in;\n}\n")])])]),o("h1",{attrs:{id:"createbrowserhistory"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#createbrowserhistory"}},[e._v("#")]),e._v(" createBrowserHistory")]),e._v(" "),o("p",[e._v("上文有提到过，只有路由组件的"),o("code",[e._v("props")]),e._v("中才有"),o("code",[e._v("history")]),e._v("方法，对于非路由组件如果要有"),o("code",[e._v("history")]),e._v("属性，有两个种方法：")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("使用"),o("code",[e._v("withRouter")]),e._v("包装组件")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("import { withRouter } from 'react-router-dom';\nclass Detail extends Component {\n    render() {\n        ··· ···\n    } \n}\nexport default withRouter(Detail)\n")])])])]),e._v(" "),o("li",[o("p",[e._v("使用"),o("code",[e._v("createBrowserHistory")]),e._v("方法")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("import { createBrowserHistory } from 'history'\nfunction About() {\n    console.log(createBrowserHistory())\n    return <h1>Hello, About</h1>;\n}\n")])])])])]),e._v(" "),o("h1",{attrs:{id:"集中配置式路由"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#集中配置式路由"}},[e._v("#")]),e._v(" 集中配置式路由")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport {renderRoutes} from 'react-router-config'\n\nfunction About() {\n    return <h1>Hello, About</h1>;\n}\nfunction Inbox() {\n    return <h1>Hello, Inbox</h1>;\n}\nfunction App() {\n    return <h1>App</h1>;\n}\nconst routerConfig = [\n    {\n        path: '/',\n        component: App,\n        name: 'App',\n        childRouter: [\n            { path: '/about', component: About, name: 'About' },\n            { path: 'inbox', component: Inbox, name: 'Inbox'}\n\n        ]\n    },\n]\nfunction App() {\n    return (\n        <>\n            <BrowserRouter>\n                {renderRoutes(routeConfig)}\n            </BrowserRouter>\n        </>\n    )\n}\n\nexport default App\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);