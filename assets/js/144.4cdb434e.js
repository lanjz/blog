(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{740:function(t,e,v){"use strict";v.r(e);var _=v(58),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"react-中-key-的作用是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-中-key-的作用是什么"}},[t._v("#")]),t._v(" React 中 key 的作用是什么？")]),t._v(" "),v("p",[v("code",[t._v("key")]),t._v("的作用更准确的进行 "),v("code",[t._v("diff")]),t._v("算法，React 还需要借助 "),v("code",[t._v("Key")]),t._v(" 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 "),v("code",[t._v("Key")]),t._v(" 的重要性")]),t._v(" "),v("p",[t._v("没有"),v("code",[t._v("key")]),t._v("时，在判断新旧地点变化时容易产场就地复用的情况")]),t._v(" "),v("h2",{attrs:{id:"调用-setstate-之后发生了什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#调用-setstate-之后发生了什么"}},[t._v("#")]),t._v(" 调用 setState 之后发生了什么？")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("将传入的参数与当前的状态合并，然后触发所谓的调和过程（Reconciliation）")])]),t._v(" "),v("li",[v("p",[t._v("根据当前的状态构建React元素树")])]),t._v(" "),v("li",[v("p",[t._v("在得到元素树，与旧的元素树做节点对比，然后根据差异对界面进行最小化重渲染")])]),t._v(" "),v("li",[v("p",[t._v("在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。")])])]),t._v(" "),v("h2",{attrs:{id:"react-生命周期函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-生命周期函数"}},[t._v("#")]),t._v(" react 生命周期函数")]),t._v(" "),v("p",[v("strong",[t._v("挂载")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("constructor()")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("通过给 "),v("code",[t._v("this.state")]),t._v(" 赋值对象来初始化内部 "),v("code",[t._v("state")])])]),t._v(" "),v("li",[v("p",[t._v("为事件处理函数绑定实例")])])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("static getDerivedStateFromProps()")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("render()")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("componentDidMount")])])])]),t._v(" "),v("p",[v("strong",[t._v("更新")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("static getDerivedStateFromProps()")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("shouldComponentUpdate(nextProps, nextState)")])]),t._v(" "),v("p",[t._v("根据 "),v("code",[t._v("shouldComponentUpdate()")]),t._v(" 的返回值，判断 React 组件的输出是否受当前 "),v("code",[t._v("state")]),t._v(" 或 "),v("code",[t._v("props")]),t._v(" 更改的影响")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("render()")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("getSnapshotBeforeUpdate()")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("componetDidUpdate(prevProps, prevState, snapshot)")]),t._v(":  会在更新后会被立即调用。首次渲染不会执行此方法。")])])]),t._v(" "),v("p",[v("strong",[t._v("卸载")])]),t._v(" "),v("ul",[v("li",[v("code",[t._v("componentWillUnMount()")]),t._v("：会在组件卸载及销毁之前直接调用")])]),t._v(" "),v("h2",{attrs:{id:"shouldcomponentupdate-是做什么的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate-是做什么的"}},[t._v("#")]),t._v(" shouldComponentUpdate 是做什么的")]),t._v(" "),v("p",[t._v("当 "),v("code",[t._v("props")]),t._v(" 或 "),v("code",[t._v("state")]),t._v(" 发生变化时，"),v("code",[t._v("shouldComponentUpdate()")]),t._v(" 会在渲染执行之前被调用。返回值默认为 true。\n如果返回"),v("code",[t._v("false")]),t._v("，则不会执行 "),v("code",[t._v("render")]),t._v("方法进行 DOM 更新\n首次渲染或使用 "),v("code",[t._v("forceUpdate()")]),t._v(" 时不会调用该方法。")]),t._v(" "),v("p",[t._v("为什么虚拟 dom 会提高性能")]),t._v(" "),v("h2",{attrs:{id:"react-性能优化是哪个周期函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-性能优化是哪个周期函数"}},[t._v("#")]),t._v(" react 性能优化是哪个周期函数")]),t._v(" "),v("p",[v("code",[t._v("shouldComponentUpdate()")])]),t._v(" "),v("h2",{attrs:{id:"react-diff-优化原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-diff-优化原理"}},[t._v("#")]),t._v(" react diff 优化原理")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("把树形结构按照层级分解，只比较同级元素")])]),t._v(" "),v("li",[v("p",[t._v("给列表结构的每个单元添加唯一的 key 属性，方便比较")])]),t._v(" "),v("li",[v("p",[t._v("React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）")])]),t._v(" "),v("li",[v("p",[t._v("合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.")])]),t._v(" "),v("li",[v("p",[t._v("选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能")])])]),t._v(" "),v("h2",{attrs:{id:"在构造函数中-调用-super-props-的目的是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在构造函数中-调用-super-props-的目的是什么"}},[t._v("#")]),t._v(" (在构造函数中)调用 super(props) 的目的是什么")]),t._v(" "),v("p",[t._v("在 "),v("code",[t._v("super()")]),t._v("被调用之前，子类是不能使用 构造函数中使用 "),v("code",[t._v("this")]),t._v(" 的")]),t._v(" "),v("p",[t._v("传递 "),v("code",[t._v("props")]),t._v(" 给 "),v("code",[t._v("super()")]),t._v(" 的原因则是便于(在子类中)能在 "),v("code",[t._v("constructor")]),t._v(" 访问 "),v("code",[t._v("this.props")])]),t._v(" "),v("h2",{attrs:{id:"何为-jsx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#何为-jsx"}},[t._v("#")]),t._v(" 何为 JSX")]),t._v(" "),v("p",[t._v("JSX是JS的扩展，并拥有 JavaScript 的全部功能")]),t._v(" "),v("p",[t._v('JSX 生产 React "元素"，你可以将任何的 JavaScript 表达式封装在花括号里，然后将其嵌入到 JSX 中。')]),t._v(" "),v("h2",{attrs:{id:"何为纯函数-pure-function"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#何为纯函数-pure-function"}},[t._v("#")]),t._v(" 何为纯函数(pure function)")]),t._v(" "),v("p",[t._v("一个纯函数是一个不依赖于且不改变其作用域之外的变量状态的函数，这也意味着一个纯函数对于同样的参数总是返回同样的结果。")]),t._v(" "),v("h2",{attrs:{id:"react中的合成事件是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react中的合成事件是什么"}},[t._v("#")]),t._v(" React中的合成事件是什么？")]),t._v(" "),v("p",[t._v("合成事件是围绕浏览器原生事件充当跨浏览器包装器的对象。它们将不同浏览器的行为合并为一个 API。这样做是为了确保事件在不同浏览器中显示一致的属性")]),t._v(" "),v("h2",{attrs:{id:"react-中-refs-的作用是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-中-refs-的作用是什么"}},[t._v("#")]),t._v(" React 中 refs 的作用是什么？")]),t._v(" "),v("p",[v("code",[t._v("Refs")]),t._v(" 是 React 提供给我们的安全访问 DOM 元素或者某个React元素的句柄")]),t._v(" "),v("h2",{attrs:{id:"类组件-class-component-和函数式组件-functional-component-之间有何不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类组件-class-component-和函数式组件-functional-component-之间有何不同"}},[t._v("#")]),t._v(" 类组件(Class component)和函数式组件(Functional component)之间有何不同")]),t._v(" "),v("p",[v("strong",[t._v("类组件")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("有自身的状态,直接访问 store 并维持状态")])]),t._v(" "),v("li",[v("p",[t._v("有生命周期函数")])])]),t._v(" "),v("p",[v("strong",[t._v("函数组件")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("仅是接收 "),v("code",[t._v("props")]),t._v("，并将组件自身渲染到页面时")])]),t._v(" "),v("li",[v("p",[t._v("该组件就是一个 "),v("code",[t._v("无状态组件")])])])]),t._v(" "),v("h2",{attrs:{id:"组件的-状态-state-和属性-props-之间有何不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#组件的-状态-state-和属性-props-之间有何不同"}},[t._v("#")]),t._v(" (组件的)状态(state)和属性(props)之间有何不同")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("State")]),t._v(" 是一种数据结构，用于组件挂载时所需数据的默认值。"),v("code",[t._v("State")]),t._v(" 由当前组进行管理与维护")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("props")]),t._v(" 由父组件传递给子组件，并且就子组件而言，"),v("code",[t._v("props")]),t._v(" 是不可变的(immutable)。组件不能直接改变 "),v("code",[t._v("props")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("Props")]),t._v(" 也不仅仅是数据--回调函数也可以通过 "),v("code",[t._v("props")]),t._v(" 传递")])])]),t._v(" "),v("h2",{attrs:{id:"何为高阶组件-higher-order-component"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#何为高阶组件-higher-order-component"}},[t._v("#")]),t._v(" 何为高阶组件(higher order component)")]),t._v(" "),v("p",[t._v("高阶组件是一个以组件为参数并返回一个新组件的函数")]),t._v(" "),v("p",[t._v("如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC")]),t._v(" "),v("h2",{attrs:{id:"react-组件的划分业务组件技术组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#react-组件的划分业务组件技术组件"}},[t._v("#")]),t._v(" react 组件的划分业务组件技术组件？")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("根据组件的职责通常把组件分为 UI 组件和容器组件。")])]),t._v(" "),v("li",[v("p",[t._v("UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。")])]),t._v(" "),v("li",[v("p",[t._v("两者通过 React-Redux 提供 connect 方法联系起来。")])])]),t._v(" "),v("h2",{attrs:{id:"为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么建议传递给-setstate-的参数是一个-callback-而不是一个对象"}},[t._v("#")]),t._v(" 为什么建议传递给 setState 的参数是一个 callback 而不是一个对象")]),t._v(" "),v("p",[t._v("因为 this.props 和 this.state 的更新可能是异步的，不能依赖它们的值去计算下一个 state")]),t._v(" "),v("h2",{attrs:{id:"应该在-react-组件的何处发起-ajax-请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#应该在-react-组件的何处发起-ajax-请求"}},[t._v("#")]),t._v(" 应该在 React 组件的何处发起 Ajax 请求")]),t._v(" "),v("p",[t._v("在 React 组件中，应该在 "),v("code",[t._v("componentDidMount")]),t._v(" 中发起网络请求")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("在组件的生命周期中仅会执行一次")])]),t._v(" "),v("li",[v("p",[t._v("你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用 setState，这将不起作用")])])]),t._v(" "),v("h2",{attrs:{id:"简述-flux-思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简述-flux-思想"}},[t._v("#")]),t._v(" 简述 flux 思想")]),t._v(" "),v("p",[t._v('Flux 的最大特点，就是数据的"单向流动"')]),t._v(" "),v("ul",[v("li",[v("p",[t._v("View 层通过用户交互（比如 onClick）会触发 Action")])]),t._v(" "),v("li",[v("p",[t._v("Dispatcher 会分发触发的 Action 给所有注册的 Store 的回调函数")])]),t._v(" "),v("li",[v("p",[t._v("Store 回调函数根据接收的 Action 更新自身数据之后会触发一个 change 事件通知 View 数据更改了")])]),t._v(" "),v("li",[v("p",[t._v("View 会监听这个 change 事件，拿到对应的新数据并调用 setState 更新组件 UI")])])]),t._v(" "),v("h2",{attrs:{id:"了解-redux-么-说一下-redux-把"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#了解-redux-么-说一下-redux-把"}},[t._v("#")]),t._v(" 了解 redux 么，说一下 redux 把")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("redux 是一个应用数据流框架，主要是解决了组件间状态共享的问题，原理是集中式管理")])]),t._v(" "),v("li",[v("p",[t._v("主要有三个核心方法，"),v("code",[t._v("action")]),t._v("，"),v("code",[t._v("store")]),t._v("，"),v("code",[t._v("reducer")])])]),t._v(" "),v("li",[v("p",[t._v("工作流程是 "),v("code",[t._v("view")]),t._v(" 调用 "),v("code",[t._v("store")]),t._v(" 的 "),v("code",[t._v("dispatch")]),t._v(" 接收 "),v("code",[t._v("action")]),t._v(" 传入 "),v("code",[t._v("store")]),t._v("，"),v("code",[t._v("reducer")]),t._v(" 进行 "),v("code",[t._v("state")]),t._v(" 操作，\n"),v("code",[t._v("view")]),t._v(" 通过 "),v("code",[t._v("store")]),t._v(" 提供的 "),v("code",[t._v("getState")]),t._v(" 获取最新的数据")])])]),t._v(" "),v("h2",{attrs:{id:"redux-有什么缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#redux-有什么缺点"}},[t._v("#")]),t._v(" redux 有什么缺点")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("一个业务变化就要对应编写 "),v("code",[t._v("action")]),t._v("，"),v("code",[t._v("reducer")]),t._v(" 等等")])]),t._v(" "),v("li",[v("p",[t._v("当一个组件相关数据更新时，即使父组件不需要用到这个组件，父组件还是会重新 render，可能会有效率影响，或者需要写复杂的 shouldComponentUpdate 进行判断")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);