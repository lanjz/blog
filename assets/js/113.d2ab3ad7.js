(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{634:function(e,t,n){"use strict";n.r(t);var s=n(53),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"hotmoduleplacement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hotmoduleplacement"}},[e._v("#")]),e._v(" HotModulePlacement")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/9/2/16cf203824359397?imageView2/0/w/1280/h/960/ignore-error/1",alt:""}})]),e._v(" "),n("h2",{attrs:{id:"服务器部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#服务器部分"}},[e._v("#")]),e._v(" 服务器部分")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("启动"),n("code",[e._v("webpack-dev-server")]),e._v("服务器，源代码地址"),n("code",[e._v("@webpack-dev-server/webpack-dev-server.js#L173")])])]),e._v(" "),n("li",[n("p",[e._v("创建 Webpack 实例，源代码地址"),n("code",[e._v("@webpack-dev-server/webpack-dev-server.js#L89")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const compiler = webpack(config)\n")])])])]),e._v(" "),n("li",[n("p",[e._v("创建 Server 服务器，源代码地址@webpack-dev-server/webpack-dev-server.js#L107")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Server {\n  constructor(compiler) {\n    this.compiler = compiler\n  }\n  listen(port) {\n    this.server.listen(port, () => {\n      console.log(`服务器已经在${port}端口上启动了`)\n    })\n  }\n}\nlet server = new Server(compiler)\nserver.listen(8000)\n")])])])]),e._v(" "),n("li",[n("p",[e._v("添加 Webpack 的"),n("code",[e._v("done")]),e._v("事件回调，源代码地址"),n("code",[e._v("@webpack-dev-server/Server.js#L122")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  constructor(compiler) {\n    let sockets = []\n    let lasthash\n    compiler.hooks.done.tap('webpack-dev-server', (stats) => {\n      lasthash = stats.hash\n      // 每当新一个编译完成后都会向客户端发送消息\n      sockets.forEach(socket => {\n        socket.emit('hash', stats.hash) // 先向客户端发送最新的hash值\n        socket.emit('ok') // 再向客户端发送一个ok\n      })\n    })\n  }\n")])])]),n("p",[e._v("Webpack 编译后提供提供了一系列钩子函数，以供插件能访问到它的各个生命周期节点，并对其打包内容做修改。"),n("code",[e._v("compiler.hooks.done")]),e._v("则是插件能修改其内容的最后一个节点。")]),e._v(" "),n("p",[e._v("编译完成通过 Socket 向客户端发送消息，推送每次编译产生的 "),n("code",[e._v("hash")]),e._v("。另外如果是热更新的话，还会产出二个补丁文件，\n里面描述了从上一次结果到这一次结果都有哪些 chunk 和模块发生了变化。")]),e._v(" "),n("p",[e._v("使用"),n("code",[e._v("let sockets = []")]),e._v("数组去存放当打开了多个Tab时每个Tab的 socket实例。")])]),e._v(" "),n("li",[n("p",[e._v("创建express应用app，源代码地址"),n("code",[e._v("@webpack-dev-server/Server.js#L123")])]),e._v(" "),n("p",[n("code",[e._v("let app = new express()")])])]),e._v(" "),n("li",[n("p",[e._v("设置文件系统为内存文件系统,源代码地址"),n("code",[e._v("@webpack-dev-middleware/fs.js#L115")])]),e._v(" "),n("p",[n("code",[e._v("let fs = new MemoryFileSystem()")])]),e._v(" "),n("p",[e._v("使用"),n("code",[e._v("MemoryFileSystem")]),e._v("将"),n("code",[e._v("compiler")]),e._v("的产出文件打包到内存中")])]),e._v(" "),n("li",[n("p",[e._v("添加"),n("code",[e._v("webpack-dev-middleware")]),e._v("中间,中间件负责返回生成的文件，源代码地址"),n("code",[e._v("@webpack-dev-server/Server.js#L125")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function middleware(req, res, next) {\n    if (req.url === '/favicon.ico') {\n      return res.sendStatus(404)\n    }\n    // /index.html   dist/index.html\n    let filename = path.join(config.output.path, req.url.slice(1))\n    let stat = fs.statSync(filename)\n    if (stat.isFile()) { // 判断是否存在这个文件,如果在的话直接把这个读出来发给浏览器\n      let content = fs.readFileSync(filename)\n      let contentType = mime.getType(filename)\n      res.setHeader('Content-Type', contentType)\n      res.statusCode = res.statusCode || 200\n      res.send(content)\n    } else {\n      return res.sendStatus(404)\n    }\n  }\n  app.use(middleware)\n")])])]),n("p",[e._v("使用express启动了本地开发服务后，使用中间件去为其构造一个静态服务器，并使用了内存文件系统，使读取文件后存放到内存中，提高读写效率，最终返回生成的文件")])]),e._v(" "),n("li",[n("p",[e._v("启动webpack编译,源代码地址"),n("code",[e._v("@webpack-dev-middleware/index.js#L51")]),e._v(", 编译完成向客户端发送消息"),n("code",[e._v("@webpack-dev-server/Server.js#L184")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" compiler.watch({}, err => {\n    console.log('又一次编译任务成功完成了')\n  })\n")])])]),n("p",[e._v("以监控的模式启动一次webpack编译，当编译成功之后执行回调")])]),e._v(" "),n("li",[n("p",[e._v("创建http服务器并启动服务，源代码地址"),n("code",[e._v("@webpack-dev-server/Server.js#L135")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  constructor(compiler) {\n    // ...\n    this.server = require('http').createServer(app)\n    // ...\n  }\n  listen(port) {\n    this.server.listen(port, () => {\n      console.log(`服务器已经在${port}端口上启动了`)\n    })\n  }\n")])])])]),e._v(" "),n("li",[n("p",[e._v("使用sockjs在浏览器端和服务端之间建立一个 websocket 长连接，源代码地址"),n("code",[e._v("@webpack-dev-server/Server.js#L745")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("constructor(compiler) {\n    // ...\n    this.server = require('http').createServer(app)\n    let io = require('socket.io')(this.server)\n    io.on('connection', (socket) => {\n      sockets.push(socket)\n      socket.emit('hash', lastHash)\n      socket.emit('ok')\n    })\n  }\n")])])])]),e._v(" "),n("li",[n("p",[e._v("创建socket服务器，源代码地址"),n("code",[e._v("@webpack-dev-server/SockJSServer.js#L34")])]),e._v(" "),n("p",[e._v("启动一个 websocket服务器，然后等待连接来到，连接到来之后存进sockets池")]),e._v(" "),n("p",[e._v("当有文件改动，webpack重新编译时，向客户端推送"),n("code",[e._v("hash")]),e._v("和"),n("code",[e._v("ok")]),e._v("两个事件")])])]),e._v(" "),n("h2",{attrs:{id:"客户端部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#客户端部分"}},[e._v("#")]),e._v(" 客户端部分")]),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("webpack-dev-server/client")]),e._v("端会监听到此hash消息，源代码地址"),n("code",[e._v("@webpack-dev-server/index.js#L54")])]),e._v(" "),n("p",[n("code",[e._v('<script src="/socket.io/socket.io.js"><\/script>')])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let socket = io('/')\nsocket.on('connect', onConnected)\nconst onConnected = () => {\n  console.log('客户端连接成功')\n}\nlet hotCurrentHash // lastHash 上一次 hash值 \nlet currentHash // 这一次的hash值\nsocket.on('hash', (hash) => {\n  currentHash = hash\n})\n")])])])]),e._v(" "),n("li",[n("p",[e._v("客户端收到ok的消息后会执行"),n("code",[e._v("reloadApp")]),e._v("方法进行更新，源代码地址"),n("code",[e._v("index.js#L101")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("socket.on('ok', () => {\n  reloadApp(true)\n})\n")])])])]),e._v(" "),n("li",[n("p",[e._v("在"),n("code",[e._v("reloadApp")]),e._v("中会进行判断，是否支持热更新，如果支持的话发射"),n("code",[e._v("webpackHotUpdate")]),e._v("事件，如果不支持则直接刷新浏览器，源代码地址"),n("code",[e._v("reloadApp.js#L7")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 当收到ok事件后，会重新刷新app\nfunction reloadApp(hot) {\n  if (hot) { // 如果hot为true 走热更新的逻辑\n    hotEmitter.emit('webpackHotUpdate')\n  } else { // 如果不支持热更新，则直接重新加载\n    window.location.reload()\n  }\n}\n")])])])]),e._v(" "),n("li",[n("p",[e._v("在"),n("code",[e._v("webpack/hot/dev-server.js")]),e._v("会监听"),n("code",[e._v("webpackHotUpdate")]),e._v("事件，源代码地址"),n("code",[e._v("dev-server.js#L55")])]),e._v(" "),n("p",[e._v("首先需要一个发布订阅去绑定事件并在合适的时机触发")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("class Emitter {\n  constructor() {\n    this.listeners = {}\n  }\n  on(type, listener) {\n    this.listeners[type] = listener\n  }\n  emit(type) {\n    this.listeners[type] && this.listeners[type]()\n  }\n}\nlet hotEmitter = new Emitter()\nhotEmitter.on('webpackHotUpdate', () => {\n  if (!hotCurrentHash || hotCurrentHash == currentHash) {\n    return hotCurrentHash = currentHash\n  }\n  hotCheck()\n})\n")])])]),n("p",[e._v("会判断是否为第一次进入页面和代码是否有更新。")])]),e._v(" "),n("li",[n("p",[e._v("在"),n("code",[e._v("check")]),e._v("方法里会调用"),n("code",[e._v("module.hot.check")]),e._v("方法,源代码地址"),n("code",[e._v("dev-server.js#L13")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function hotCheck() {\n  hotDownloadManifest().then(update => {\n    let chunkIds = Object.keys(update.c)\n    chunkIds.forEach(chunkId => {\n      hotDownloadUpdateChunk(chunkId)\n    })\n  })\n}\n\n")])])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("HotModuleReplacement.runtime")]),e._v("请求"),n("code",[e._v("Manifest")]),e._v(",源代码地址"),n("code",[e._v("HotModuleReplacement.runtime.js#L180")])])]),e._v(" "),n("li",[n("p",[e._v("它通过调用 "),n("code",[e._v("JsonpMainTemplate.runtime")]),e._v("的"),n("code",[e._v("hotDownloadManifest")]),e._v("方法,源代码地址"),n("code",[e._v("JsonpMainTemplate.runtime.js#L23")])]),e._v(" "),n("p",[e._v("上面也提到过webpack每次编译都会产生hash值、已改动模块的json文件、已改动模块代码的js文件，")]),e._v(" "),n("p",[e._v("此时先使用"),n("code",[e._v("ajax")]),e._v("请求"),n("code",[e._v("Manifest")]),e._v("即服务器这一次编译相对于上一次编译改变了哪些"),n("code",[e._v("module")]),e._v("和"),n("code",[e._v("chunk")])]),e._v(" "),n("p",[e._v("然后再通过"),n("code",[e._v("jsonp")]),e._v("获取这些已改动的"),n("code",[e._v("module")]),e._v("和"),n("code",[e._v("chunk")]),e._v("的代码。")])]),e._v(" "),n("li",[n("p",[e._v("调用"),n("code",[e._v("JsonpMainTemplate.runtime")]),e._v("的"),n("code",[e._v("hotDownloadUpdateChunk")]),e._v("方法通过JSONP请求获取到最新的模块代码，源代码地址"),n("code",[e._v("JsonpMainTemplate.runtime.js#L14")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function hotDownloadUpdateChunk(chunkId) {\nlet script = document.createElement('script')\nscript.charset = 'utf-8'\n// /main.xxxx.hot-update.js\nscript.src = '/' + chunkId + \".\" + hotCurrentHash + \".hot-update.js\"\ndocument.head.appendChild(script)\n}\n")])])]),n("p",[e._v("这里解释下为什么使用JSONP获取而不直接利用socket获取最新代码？主要是因为JSONP获取的代码可以直接执行")])]),e._v(" "),n("li",[n("p",[e._v("补丁JS取回来后会调用"),n("code",[e._v("JsonpMainTemplate.runtime.js")]),e._v("的"),n("code",[e._v("webpackHotUpdate")]),e._v("方法，源代码地址"),n("code",[e._v("JsonpMainTemplate.runtime.js#L8")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("window.webpackHotUpdate = function (chunkId, moreModules) {\n  // 循环新拉来的模块\n  for (let moduleId in moreModules) {\n    // 从模块缓存中取到老的模块定义\n    let oldModule = __webpack_require__.c[moduleId]\n    // parents哪些模块引用这个模块 children这个模块引用了哪些模块\n    // parents=['./src/index.js']\n    let {\n      parents,\n      children\n    } = oldModule\n    // 更新缓存为最新代码 缓存进行更新\n    let module = __webpack_require__.c[moduleId] = {\n      i: moduleId,\n      l: false,\n      exports: {},\n      parents,\n      children,\n      hot: window.hotCreateModule(moduleId)\n    }\n    moreModules[moduleId].call(module.exports, module, module.exports, __webpack_require__)\n    module.l = true // 状态变为加载就是给module.exports 赋值了\n    parents.forEach(parent => {\n      // parents=['./src/index.js']\n      let parentModule = __webpack_require__.c[parent]\n      // _acceptedDependencies={'./src/title.js',render}\n      parentModule && parentModule.hot && parentModule.hot._acceptedDependencies[moduleId] && parentModule.hot._acceptedDependencies[moduleId]()\n    })\n    hotCurrentHash = currentHash\n  }\n}\n")])])])]),e._v(" "),n("li",[n("p",[e._v("然后会调用"),n("code",[e._v("HotModuleReplacement.runtime.js")]),e._v("的"),n("code",[e._v("hotAddUpdateChunk")]),e._v("方法动态更新模块代码，源代码地址"),n("code",[e._v("HotModuleReplacement.runtime.js#L222")])])]),e._v(" "),n("li",[n("p",[e._v("然后调用"),n("code",[e._v("hotApply")]),e._v("方法进行热更新，源代码地址"),n("code",[e._v("HotModuleReplacement.runtime.js#L257")]),e._v("、"),n("code",[e._v("HotModuleReplacement.runtime.js#L278")])])])]),e._v(" "),n("h1",{attrs:{id:"q-a"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[e._v("#")]),e._v(" Q&A")]),e._v(" "),n("p",[n("strong",[e._v("webpack 可以将不同的模块打包成 bundle 文件或者几个 chunk 文件，但是当我通过 webpack HMR 进行开发的过程中，我并没有在我的 dist 目录中找到 webpack 打包好的文件，它们去哪呢？")])]),e._v(" "),n("p",[n("code",[e._v("webpack-dev-server")]),e._v("使用内存文件系统,来保存打包的文件，利用了"),n("code",[e._v("memory-fs")]),e._v("模块，之所以这么做是因为访问内存中的代码比访问文件系统中的文件更快，而且也减少了代码写入文件的开销")]),e._v(" "),n("p",[n("strong",[e._v("通过查看 webpack-dev-server 的 package.json 文件，我们知道其依赖于 webpack-dev-middleware 库，那么 webpack-dev-middleware 在 HMR 过程中扮演什么角色？")])]),e._v(" "),n("p",[e._v("使用中间件去为其构造一个静态服务器，并使用了内存文件系统，使读取文件后存放到内存中，提高读写效率，最终返回生成的文件")]),e._v(" "),n("p",[n("strong",[e._v("使用 HMR 的过程中，通过 Chrome 开发者工具我知道浏览器是通过 websocket 和 webpack-dev-server 进行通信的，但是 websocket 的 message 中并没有发现新模块代码。打包后的新模块又是通过什么方式发送到浏览器端的呢？")])]),e._v(" "),n("ol",[n("li",[n("p",[e._v("编译完成通过socket向客户端发送消息，推送每次编译产生的hash")])]),e._v(" "),n("li",[n("p",[e._v("此时先使用ajax请求Manifest即服务器这一次编译相对于上一次编译改变了哪些module和chunk。")])]),e._v(" "),n("li",[n("p",[e._v("然后再通过jsonp获取这些已改动的module和chunk的代码。")])])]),e._v(" "),n("p",[n("strong",[e._v("为什么新的模块不通过 websocket 随消息一起发送到浏览器端呢？")])]),e._v(" "),n("p",[e._v("因为通过socket通信获取的是一串字符串需要再做处理。而通过JSONP获取的代码可以直接执行。")]),e._v(" "),n("p",[n("strong",[e._v("浏览器拿到最新的模块代码，HMR 又是怎么将老的模块替换成新的模块，在替换的过程中怎样处理模块之间的依赖关系？")])]),e._v(" "),n("ul",[n("li",[n("p",[e._v("从缓存中删除过期的模块和依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var queue = outdatedModules.slice();\nwhile (queue.length > 0) {\n    moduleId = queue.pop();\n    // 从缓存中删除过期的模块\n    module = installedModules[moduleId];\n    // 删除过期的依赖\n    delete outdatedDependencies[moduleId];\n    \n    // 存储了被删掉的模块id，便于更新代码\n    outdatedSelfAcceptedModules.push({\n        module: moduleId\n    });\n}\n")])])])]),e._v(" "),n("li",[n("p",[e._v("新的模块添加到 "),n("code",[e._v("modules")]),e._v(" 中")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("appliedUpdate[moduleId] = hotUpdate[moduleId];\nfor (moduleId in appliedUpdate) {\n    if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\n        modules[moduleId] = appliedUpdate[moduleId];\n    }\n}\n\n")])])])]),e._v(" "),n("li",[n("p",[e._v("当下次调用 "),n("code",[e._v("__webpack_require__")]),e._v("(webpack 重写的 "),n("code",[e._v("require")]),e._v(" 方法)方法的时候，就是获取到了新的模块代码了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {\n    var item = outdatedSelfAcceptedModules[i];\n    moduleId = item.module;\n    try {\n        // 执行最新的代码\n        __webpack_require__(moduleId);\n    } catch (err) {\n        // ...容错处理\n    }\n}\n\n")])])])])]),e._v(" "),n("p",[n("strong",[e._v("当模块的热替换过程中，如果替换模块失败，有什么回退机制吗？")])]),e._v(" "),n("p",[e._v("如果替换失败，则`window.location.reload()``")]),e._v(" "),n("h1",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("WDS与浏览品之间维护一个 Websocket ，当本地资源发生变化后，WDS 会向浏览器推送更新，推送更新的模块 "),n("code",[e._v("hash")]),e._v("，让客户端与现有资源做\n对比。客户端对比差异后，向WDS 发起 AJAX 请求来获取更改内容（文件列表, "),n("code",[e._v("hash")]),e._v("），这样客户端就可以借助这些信息继续向 WDS 发起 "),n("code",[e._v("jsonp")]),e._v(" 请求\n获取该 "),n("code",[e._v("chunk")]),e._v("的增量更新")]),e._v(" "),n("p",[e._v("后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 "),n("code",[e._v("HotModulePlugin")]),e._v(" 来完成，提供了相关 API 以供开发者针对自身场景进行处理，\n"),n("code",[e._v("react-hot-loader")]),e._v(" 和 "),n("code",[e._v("vue-loader")]),e._v(" 都是借助这些 API 实现 HMR。")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5d6d0ee5f265da03f66ddba9",target:"_blank",rel:"noopener noreferrer"}},[e._v("搞懂webpack热更新原理"),n("OutboundLink")],1)]),e._v(" "),n("p",[n("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30669007",target:"_blank",rel:"noopener noreferrer"}},[e._v("Webpack HMR 原理解析"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);