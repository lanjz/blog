(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{466:function(v,_,t){v.exports=t.p+"assets/img/browser_1.e0d8ecf7.png"},467:function(v,_,t){v.exports=t.p+"assets/img/browser_2.9db1aec3.png"},594:function(v,_,t){"use strict";t.r(_);var e=t(55),p=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"浏览器中的进程和线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的进程和线程"}},[v._v("#")]),v._v(" 浏览器中的进程和线程")]),v._v(" "),e("p",[v._v("在了解浏览器中的进程和线程前先了解一下什么是进程和线程")]),v._v(" "),e("p",[v._v("先看看下面这个形象的比喻：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("进程是一个工厂，工厂有它的独立资源")])]),v._v(" "),e("li",[e("p",[v._v("工厂之间相互独立")])]),v._v(" "),e("li",[e("p",[v._v("线程是工厂中的工人，多个工人协作完成任务")])]),v._v(" "),e("li",[e("p",[v._v("工厂内有一个或多个工人")])]),v._v(" "),e("li",[e("p",[v._v("工人之间共享空间")])])]),v._v(" "),e("p",[v._v("再完善完善概念:")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("工厂的资源 -> 系统分配的内存（独立的一块内存）")])]),v._v(" "),e("li",[e("p",[v._v("工厂之间的相互独立 -> 进程之间相互独立")])]),v._v(" "),e("li",[e("p",[v._v("多个工人协作完成任务 -> 多个线程在进程中协作完成任务")])]),v._v(" "),e("li",[e("p",[v._v("工厂内有一个或多个工人 -> 一个进程由一个或多个线程组成")])]),v._v(" "),e("li",[e("p",[v._v("工人之间共享空间 -> 同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等）")])])]),v._v(" "),e("p",[v._v("所以 "),e("strong",[v._v("进程是cpu资源分配的最小单位（系统会给它分配内存）")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）")])]),v._v(" "),e("li",[e("p",[v._v("线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）")])]),v._v(" "),e("li",[e("p",[v._v("一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线")])]),v._v(" "),e("li",[e("p",[v._v("进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)。")])]),v._v(" "),e("li",[e("p",[v._v("调度和切换：线程上下文切换比进程上下文切换要快得多。")])])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("不同进程之间也可以通信，不过代价较大\n现在，一般通用的叫法：单线程与多线程，都是指在一个进程内的单和多。（所以核心还是得属于一个进程才行）")])]),v._v(" "),e("h2",{attrs:{id:"多进程的浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多进程的浏览器"}},[v._v("#")]),v._v(" 多进程的浏览器")]),v._v(" "),e("p",[v._v("理解了进程与线程了区别后，接下来对浏览器进行一定程度上的认识：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("浏览器是多进程的")])]),v._v(" "),e("li",[e("p",[v._v("浏览器之所以能够运行，是因为系统给它的进程分配了资源（cpu、内存）")])]),v._v(" "),e("li",[e("p",[v._v("简单点理解，每打开一个 Tab 页，就相当于创建了一个独立的浏览器进程。")])])]),v._v(" "),e("p",[v._v("浏览器是多进程的，有一个主控进程，以及每一个 Tab 页面都会新开一个进程（某些情况下多个 Tab 会合并进程）")]),v._v(" "),e("p",[v._v("如下图：")]),v._v(" "),e("p",[e("img",{attrs:{src:t(466),alt:""}})]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("打开 "),e("code",[v._v("chrome任务管理器的方法")]),v._v(" ：在浏览头部标签页旁边的空白区域，"),e("code",[v._v("右键")]),v._v(" 就可以弹出有任务管理器的面板.或者 "),e("code",[v._v("Chrome的更多工具 -> 任务管理器")])])]),v._v(" "),e("p",[v._v("从 "),e("code",[v._v("chrome任务管理器")]),v._v(" 可以看到浏览器进程可能包括主控进程，插件扩展进程，GPU，tab页（浏览器内核）等等")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Browser进程：浏览器的主进程（负责协调、主控），只有一个")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("负责浏览器界面显示，与用户交互。如前进，后退等")])]),v._v(" "),e("li",[e("p",[v._v("负责各个页面的管理，创建和销毁其他进程")])]),v._v(" "),e("li",[e("p",[v._v("将 Renderer 进程得到的内存中的 Bitmap，绘制到用户界面上")])]),v._v(" "),e("li",[e("p",[v._v("网络资源的管理，下载等")])])])]),v._v(" "),e("li",[e("p",[v._v("第三方插件扩展进程：每种类型的插件对应一个进程，仅当使用该插件时才创建")])]),v._v(" "),e("li",[e("p",[v._v("GPU进程：最多一个，用于 3D 绘制")])]),v._v(" "),e("li",[e("p",[v._v("浏览器渲染进程（浏览器内核）（ Renderer 进程，内部是多线程的）：默认每个 Tab 页面一个进程，互不影响（有时候会优化，如多个空白 tab 会合并成一个进程）")]),v._v(" "),e("ul",[e("li",[v._v("主要作用：控制页面渲染，脚本执行，事件处理等")])])])]),v._v(" "),e("blockquote",[e("p",[v._v("浏览器中打开一个网页相当于新起了一个进程（进程内有自己的多线程）")])]),v._v(" "),e("h3",{attrs:{id:"浏览器多进程的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程的优势"}},[v._v("#")]),v._v(" 浏览器多进程的优势")]),v._v(" "),e("p",[v._v("相比于单进程浏览器，多进程有如下优点：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("避免单个 "),e("code",[v._v("page crash")]),v._v(" 影响整个浏览器")])]),v._v(" "),e("li",[e("p",[v._v("避免第三方插件 "),e("code",[v._v("crash")]),v._v(" 影响整个浏览器")])]),v._v(" "),e("li",[e("p",[v._v("多进程充分利用多核优势")])]),v._v(" "),e("li",[e("p",[v._v("方便使用沙盒模型隔离插件等进程，提高浏览器稳定性")])])]),v._v(" "),e("p",[v._v("简单点理解：如果浏览器是单进程，那么某个 Tab 页崩溃了，就影响了整个浏览器，体验有多差；同理如果是单进程，插件崩溃了也会影响整个浏览器")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("当然，开启开进程就意味着内存等资源消耗也会更大，有点空间换时间的意思。")])]),v._v(" "),e("h2",{attrs:{id:"渲染进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[v._v("#")]),v._v(" 渲染进程")]),v._v(" "),e("p",[v._v("作为前端一枚，我们这里重点关注一下 "),e("strong",[v._v("渲染进程")])]),v._v(" "),e("p",[v._v("可以这样理解，页面的渲染，JS的执行，事件的循环，都在这个进程内进行。")]),v._v(" "),e("p",[e("strong",[v._v("浏览器的渲染进程是多线程的")]),v._v("，那么接下来看看它都包含了哪些线程（列举一些主要常驻线程）：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("GUI渲染线程")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("负责渲染浏览器界面，解析 HTML，CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。")])]),v._v(" "),e("li",[e("p",[v._v("当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行")])]),v._v(" "),e("li",[e("p",[v._v("注意，GUI 渲染线程与 JS 引擎线程是互斥的，当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到 JS 引擎空闲时立即被执行")])])])]),v._v(" "),e("li",[e("p",[v._v("JS引擎线程")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("也称为 JS 内核，负责处理 Javascript 脚本程序。（例如V8引擎）")])]),v._v(" "),e("li",[e("p",[v._v("JS 引擎线程负责解析 Javascript 脚本，运行代码。")])]),v._v(" "),e("li",[e("p",[v._v("JS 引擎一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页（renderer进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序")])]),v._v(" "),e("li",[e("p",[v._v("同样注意，GUI 渲染线程与 JS 引擎线程是互斥的，所以如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。")])])])]),v._v(" "),e("li",[e("p",[v._v("事件触发线程")]),v._v(" "),e("ul",[e("li",[v._v("当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理")])])]),v._v(" "),e("li",[e("p",[v._v("定时触发器线程")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("传说中的 "),e("code",[v._v("setInterval")]),v._v(" 与 "),e("code",[v._v("setTimeout")]),v._v(" 所在线程")])]),v._v(" "),e("li",[e("p",[v._v("浏览器定时计数器并不是由 JavaScript 引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）")])]),v._v(" "),e("li",[e("p",[v._v("因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）")])]),v._v(" "),e("li",[e("p",[v._v("注意，W3C 在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。")])])])]),v._v(" "),e("li",[e("p",[v._v("异步 "),e("code",[v._v("http")]),v._v(" 请求线程")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("在 "),e("code",[v._v("XMLHttpRequest")]),v._v(" 在连接后是通过浏览器新开一个线程请求")])]),v._v(" "),e("li",[e("p",[v._v("将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。")])])])])]),v._v(" "),e("p",[e("img",{attrs:{src:t(467),alt:""}})]),v._v(" "),e("h3",{attrs:{id:"browser进程和renderer进程的通信过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#browser进程和renderer进程的通信过程"}},[v._v("#")]),v._v(" Browser进程和Renderer进程的通信过程")]),v._v(" "),e("p",[v._v("以浏览器解析 URL 到页面渲染为例：")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Browser 进程收到用户请求，首先需要获取页面内容（譬如通过网络下载资源），随后将该任务通过 RendererHost 接口传递给 Render 进程")])]),v._v(" "),e("li",[e("p",[v._v("Renderer 进程的 Renderer 接口收到消息，简单解释后，交给渲染线程，然后开始渲染")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("渲染线程接收请求，加载网页并渲染网页，这其中可能需要 Browser 进程获取资源和需要 GPU 进程来帮助渲染")])]),v._v(" "),e("li",[e("p",[v._v("当然可能会有 JS 线程操作 DOM（这样可能会造成回流并重绘）")])])])]),v._v(" "),e("li",[e("p",[v._v("最后 Render 进程将结果传递给 Browser 进程")])]),v._v(" "),e("li",[e("p",[v._v("Browser 进程接收到结果并将结果绘制出来")])])]),v._v(" "),e("h3",{attrs:{id:"gui渲染线程与js引擎线程互斥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gui渲染线程与js引擎线程互斥"}},[v._v("#")]),v._v(" GUI渲染线程与JS引擎线程互斥")]),v._v(" "),e("p",[v._v("由于 JavaScript 是可操纵 DOM 的，如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。")]),v._v(" "),e("p",[v._v("因此为了防止渲染出现不可预期的结果，浏览器设置 GUI 渲染线程与 JS 引擎为互斥的关系，当JS引擎执行时GUI线程会被挂起")]),v._v(" "),e("p",[v._v("GUI更新则会被保存在一个队列中等到 JS 引擎线程空闲时立即被执行。所以，要尽量避免JS执行时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。")]),v._v(" "),e("h2",{attrs:{id:"q-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[v._v("#")]),v._v(" Q&A")]),v._v(" "),e("p",[e("strong",[v._v("什么是异步")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("在主线程外额外开启一个线程去处理任务，所以不会导致主线程的代码阻塞")])]),v._v(" "),e("li",[e("p",[v._v("不用等待结果的代码")])])]),v._v(" "),e("p",[e("strong",[v._v("click是异步的嘛")])]),v._v(" "),e("p",[v._v("事件都是由事件处理线程处理的，所以是异步")])])}),[],!1,null,null,null);_.default=p.exports}}]);