(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{1043:function(t,_,s){"use strict";s.r(_);var v=s(65),e=Object(v.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),s("p",[t._v("一直以为 Git、Github、Gitlab 是同一家，原来搞错了~~")]),t._v(" "),s("p",[s("strong",[t._v("Git")]),t._v(" 是一个版本管理工具，是可以在你电脑不联网的情况下，只在本地使用的一个版本管理工具，其作用就是可以让你更好的管理你的程序，比如你原来提交过的内容，以后虽然修改了，但是通过 Git 这个工具，可以把你原来提交的内容重现出来，这样对于你后来才意识到的一些错误的更改，可以进行还原")]),t._v(" "),s("p",[t._v("同属版本控制系统软件还有 SVN,CVS 等")]),t._v(" "),s("h2",{attrs:{id:"git-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-2"}},[t._v("#")]),t._v(" Git+")]),t._v(" "),s("p",[s("strong",[t._v("GitHub")])]),t._v(" "),s("p",[t._v("GitHub 是代码托管平台,提供代码托管服务，即不用自己搭建git服务器，直接使用GitHub作为远程仓库，便可以使用 Git 管理自己的项目")]),t._v(" "),s("p",[s("strong",[t._v("GitLab")])]),t._v(" "),s("p",[t._v("GitLab 是由 GitLabInc.开发，使用MIT许可证的基于网络的 Git 仓库管理工具，且具有 wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 Web 服务。也可以作为 git 托管平台")]),t._v(" "),s("h3",{attrs:{id:"git、github与gitlab的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git、github与gitlab的区别"}},[t._v("#")]),t._v(" Git、GitHub与GitLab的区别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Git是一种版本控制系统，是一种工具，用于代码的存储和版本控制。")])]),t._v(" "),s("li",[s("p",[t._v("GitHub是一个基于Git实现的在线代码仓库，是目前全球最大的代码托管平台，可以帮助程序员之间互相交流和学习。")])]),t._v(" "),s("li",[s("p",[t._v("GitLab是一个基于Git实现的在线代码仓库软件，你可以用GitLab自己搭建一个类似于GitHub一样的仓库，但是GitLab 有完善的管理界面和权限控制，一般用于在企业、学校等内部网络搭建Git私服")])])]),t._v(" "),s("p",[t._v("类似的代码托管平台还有：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("国外：Bitbucket 、sourceforge")])]),t._v(" "),s("li",[s("p",[t._v("国内：码云 、coding 、csdn 、腾讯云TGit 、阿里云CRP、 百度效率云")])])]),t._v(" "),s("h2",{attrs:{id:"ssh-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssh-key"}},[t._v("#")]),t._v(" SSH-KEY")]),t._v(" "),s("p",[s("strong",[t._v("是什么：")])]),t._v(" "),s("p",[t._v("SSH 指 secure shell（一种安全的网络协议），Git 使用这种协议进行远程加密登录。SSH 登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在 Git 中一般分别命名为 "),s("code",[t._v("id_rsa.pub")]),t._v(" 和 "),s("code",[t._v("id_rsa")])]),t._v(" "),s("p",[s("strong",[t._v("作用")])]),t._v(" "),s("p",[t._v("SSH 方式单独使用非对称的秘钥进行认证和加密传输，和账号密码分离开来，所以平时可以不需要账号密码也可以访问仓库")]),t._v(" "),s("p",[t._v("Git 基于多种传输协议，其中最常用的就是 "),s("code",[t._v("https")]),t._v(" 和 "),s("code",[t._v("ssh")]),t._v("。都是为了数据传输安全，那么设置 SSH 密钥的目的是为了节省输入用户名密码的过程，同时保证传输安全")]),t._v(" "),s("h3",{attrs:{id:"https和ssh的clone方式区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https和ssh的clone方式区别"}},[t._v("#")]),t._v(" https和SSH的clone方式区别")]),t._v(" "),s("p",[t._v("在 Github 中 克隆仓库有两种模式：HTTPS 和 SSH，它们的区别如下：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("HTTPS：不管是谁，拿到 "),s("code",[t._v("url")]),t._v(" 随便 "),s("code",[t._v("clone")]),t._v("，但是在 "),s("code",[t._v("push")]),t._v(" 的时候需要验证用户名和密码")])]),t._v(" "),s("li",[s("p",[t._v("SSH："),s("code",[t._v("clone")]),t._v(" 的项目你必须是拥有者或者管理员，而且需要在 "),s("code",[t._v("clone")]),t._v(" 前添加 SSH Key。SSH 在 "),s("code",[t._v("push")]),t._v(" 的时候，是不需要输入用户名的，如果配置SSH-Key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的")])])]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("所以平时配置 Github 时，才需要使用 "),s("code",[t._v('ssh-keygen -t rsa -c "邮箱"')]),t._v(" 命令来生成 SSH-KEY，这为了方便我们使用 SSH 方法克隆项目时使用，但不是必需的")]),t._v(" "),s("h2",{attrs:{id:"配置小记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置小记"}},[t._v("#")]),t._v(" 配置小记")]),t._v(" "),s("h3",{attrs:{id:"同时配置-github-和-gitlab-的ssh-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同时配置-github-和-gitlab-的ssh-key"}},[t._v("#")]),t._v(" 同时配置 Github 和 Gitlab 的SSH-KEY")]),t._v(" "),s("p",[t._v("此时就要就要生成两份 SSH-KEY")]),t._v(" "),s("p",[s("strong",[t._v("添加 github key")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('ssh-keygen -t rsa -C "github邮箱"\n')])])]),s("p",[t._v("此时默认生成 "),s("code",[t._v("id_rsa.pub")]),t._v(" 和 "),s("code",[t._v("id_rsa")]),t._v(" 两个文件")]),t._v(" "),s("p",[s("strong",[t._v("添加 gitlab key")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitlab -C "gitlab邮箱"\n')])])]),s("p",[t._v("多了 "),s("code",[t._v("-f ~/.ssh/id_rsa_gitlab")]),t._v(" 用于设置生成的 SSH 文件名，如果不设的时候就会覆盖之前生的 Github 的 SSH")]),t._v(" "),s("p",[s("strong",[t._v("在"),s("code",[t._v(".ssh")]),t._v(" 文件夹下里面创建一个 "),s("code",[t._v("config")]),t._v(" 文件")])]),t._v(" "),s("p",[t._v("配置文件添加 Host 和 "),s("code",[t._v("IdentityFile")]),t._v(" 的匹配关系，这样 Git 会根据当前操作的仓库地址自动使用对应在的 rsa 文件，内容参考：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# default-github                                                                       \nHost github.com\nHostName github.com\nUser lanjz\nIdentityFile ~/.ssh/id_rsa\n# git_lab_1                                                                         \nHost git.mysoft.com.cn\nHostName git.mysoft.com.cn\nUser lanjz\nIdentityFile ~/.ssh/id_rsa_gitlab\n# 也可以配置多个git_lab_2\nHost git.myscrm.cn\nHostName git.myscrm.cn\nUser lanjz\nIdentityFile ~/.ssh/id_rsa_gitlab                               \n")])])]),s("p",[t._v("检查是否成功 "),s("code",[t._v("ssh -T git@github")])]),t._v(" "),s("h3",{attrs:{id:"使用账号密码clone项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用账号密码clone项目"}},[t._v("#")]),t._v(" 使用账号密码CLONE项目")]),t._v(" "),s("p",[t._v("格式："),s("code",[t._v("git clone http://邮箱(或用户名):密码@仓库")])]),t._v(" "),s("p",[t._v("如：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("git账号： "),s("code",[t._v("lanjz")])])]),t._v(" "),s("li",[s("p",[t._v("git密码："),s("code",[t._v("123@")])])]),t._v(" "),s("li",[s("p",[t._v("仓库："),s("code",[t._v("https://git.test.com/abc/demo")])])])]),t._v(" "),s("p",[t._v("克隆命令："),s("code",[t._v("git clone https://lanjz:123%40@git.test.com/abc/demo")])]),t._v(" "),s("p",[t._v("%40 表示 @")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("如果帐号密码存在特殊字符，需要进行转换，可以使用 "),s("code",[t._v("encodeURIComponent")]),t._v(" 方法转换后的结果进行代替")])]),t._v(" "),s("h2",{attrs:{id:"回滚命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回滚命令"}},[t._v("#")]),t._v(" 回滚命令")]),t._v(" "),s("p",[s("code",[t._v("git reset")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 回滚到上次提交状态，保留本地修改。\ngit reset HEAD~1\ngit reset <commit>\n\n// 回滚，但不保留本地修改。\ngit reset --hard <commit>\n\n// 从暂存区移除特定文件，相当于 unstage 一个文件。\ngit reset file\n\n// 重置暂存区，相当于 unstage all。\ngit reset\n\n// 清除掉所有未提交更改。相当于 unstage all + 撤销所有更改。\ngit reset --hard\n")])])]),s("p",[s("strong",[t._v("reset 后面的参数说明")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("hard：慎用！回滚到指定的版本，不保留修改的代码")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("移动本地库HEAD指针")])]),t._v(" "),s("li",[s("p",[t._v("重置暂存区")])]),t._v(" "),s("li",[s("p",[t._v("重置工作区")])])])]),t._v(" "),s("li",[s("p",[t._v("soft: 仅仅是把本地库的指针移动了，而暂存区和你本地的代码是没有做任何改变的")]),t._v(" "),s("ol",[s("li",[t._v("移动本地库HEAD指针")])])]),t._v(" "),s("li",[s("p",[t._v("mixed: 回滚后，不仅移动了本地库的指针，同时暂存区的东西也没了，意思就是你上次添加到暂存区的文件没了")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("移动本地库HEAD指针")])]),t._v(" "),s("li",[s("p",[t._v("重置暂存区")])])])]),t._v(" "),s("li",[s("p",[t._v("keep: 回滚后，本地代码就是你回退版本的代码,而暂存区是没有做任何改变的")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("移动本地库HEAD指针")])]),t._v(" "),s("li",[s("p",[t._v("暂存区不变")])]),t._v(" "),s("li",[s("p",[t._v("重置工作区")])])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);