(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{743:function(v,_,e){"use strict";e.r(_);var t=e(58),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"vsvue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vsvue"}},[v._v("#")]),v._v(" vsVue")]),v._v(" "),e("h2",{attrs:{id:"模板渲染方式的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模板渲染方式的不同"}},[v._v("#")]),v._v(" 模板渲染方式的不同")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Vue 模板的编写类似原生的 HTML 语法，一个 Vue组件通过模板+JavaScript+CSS的组合模式呈现（Vue更加注重web开发者的习惯），然后通过使用 Vue 内置很多 API 进行开发，如一些"),e("code",[v._v("v-model")]),v._v("，"),e("code",[v._v("v-if")]),v._v(","),e("code",[v._v("v-for")]),v._v(","),e("code",[v._v("watch")]),v._v(","),e("code",[v._v("computed")]),v._v(" 等等")])]),v._v(" "),e("li",[e("p",[v._v("React 的特色在于函数式编程的理念，是通过JSX渲染模板，使用JS来创建页面模板，比如插值，条件，循环等，都是通过JS语法实现的，更加纯粹更加原生")]),v._v(" "),e("p",[v._v("react 中我们 "),e("code",[v._v("import")]),v._v(" 的组件在 "),e("code",[v._v("render")]),v._v(" 中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 "),e("code",[v._v("this")]),v._v(" 上进行一次中转，所以我们 "),e("code",[v._v("import")]),v._v(" 一个组件完了之后，还需要在 "),e("code",[v._v("components")]),v._v(" 中再声明下，这样显然是很奇怪但又不得不这样的做法")])])]),v._v(" "),e("h2",{attrs:{id:"更新机制的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更新机制的区别"}},[v._v("#")]),v._v(" 更新机制的区别")]),v._v(" "),e("p",[e("strong",[v._v("获取数据更新的手段和更新的粒度不一样")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Vue 通过依赖收集，当数据更新时， Vue 明确地知道是哪些数据更新了，每个组件都有自己的渲染 "),e("code",[v._v("watcher")]),v._v(" ，掌管当前组件的视图更新，所以可以精确地更新对应的组件，所以更新的粒度是组件级别的，所以为了避免不必要的渲染需要通过 "),e("code",[v._v("shouldComponentUpdate")]),v._v(" 这个生命周期方法可以进行控制")])]),v._v(" "),e("li",[e("p",[v._v("React 会递归地把所有的子组件 "),e("code",[v._v("re-render")]),v._v(" 一下，不管是不是更新的数据，此时，都是新的。然后通过 "),e("code",[v._v("diff")]),v._v(" 算法 来决定更新哪部分的视图。所以，React 的更新粒度是一个整体")])])]),v._v(" "),e("p",[e("strong",[v._v("对更新数据是否需要渲染页面的处理不一样")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("只有依赖收集的数据发生更新，Vue 才会去重新渲染页面")])]),v._v(" "),e("li",[e("p",[v._v("只要数据有更新（ "),e("code",[v._v("setState")]),v._v("，"),e("code",[v._v("useState")]),v._v(" 等手段触发更新），都会去重新渲染页面（可以使用 "),e("code",[v._v("shouldComponentUpdate/ PureComponent")]),v._v(" 改善）")])])]),v._v(" "),e("h2",{attrs:{id:"hoc和mixins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hoc和mixins"}},[v._v("#")]),v._v(" HoC和mixins")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Vue组合不同功能的方式是通过mixin")])]),v._v(" "),e("li",[e("p",[v._v("React组合不同功能的方式是通过HoC(高阶组件）")])])]),v._v(" "),e("h2",{attrs:{id:"diff算法区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff算法区别"}},[v._v("#")]),v._v(" diff算法区别")]),v._v(" "),e("h3",{attrs:{id:"vue2-x-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue2-x-diff"}},[v._v("#")]),v._v(" Vue2.x Diff")]),v._v(" "),e("p",[v._v("过程可以概括为："),e("code",[v._v("oldCh")]),v._v(" 和 "),e("code",[v._v("newCh")]),v._v(" 各有两个头尾的变量 "),e("code",[v._v("StartIdx")]),v._v(" 和 "),e("code",[v._v("EndIdx")]),v._v(" ，在一次遍历中，会使用他们做4种比较方式。")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("新节点的首部节点与旧节点的首部节点是否相同")])]),v._v(" "),e("li",[e("p",[v._v("新节点的尾部节点与旧节点的尾部节点是否相同")])]),v._v(" "),e("li",[e("p",[v._v("新节点的头部节点与旧节点的尾部节点是否相同： 元素内部发生了位置变化，有个元素跑前面来了")])]),v._v(" "),e("li",[e("p",[v._v("新节点的尾部节点与旧节点的着部节点是否相同： 元素内部发生了位置变化，有个元素跑后面去了")])]),v._v(" "),e("li",[e("p",[v._v("如果4种比较都没匹配，则尝试通过 "),e("code",[v._v("key")]),v._v(" 查找，这里分两种情况")])])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("如果新节点有 "),e("code",[v._v("key")]),v._v(", 且能匹配到旧节点，则当做添加新节点处理")])]),v._v(" "),e("li",[e("p",[v._v("如果新节点有 "),e("code",[v._v("key")]),v._v(", 且能匹配到旧节点，则先通过 "),e("code",[v._v("sameVnode")]),v._v(" 方法判断这两个新旧节点是否相同，情况也分两种")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("如果相同，则 "),e("code",[v._v("patchVnode")]),v._v(" 继续对新旧节点做 "),e("code",[v._v("diff")]),v._v(" 处理，并且交换位置")])]),v._v(" "),e("li",[e("p",[v._v("如果不相同，则当做新节点做处理")])])])])]),v._v(" "),e("h3",{attrs:{id:"vue3-x-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3-x-diff"}},[v._v("#")]),v._v(" Vue3.x Diff")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("从前往后遍历新旧子序列找到有相同的节点进行 "),e("code",[v._v("patch")]),v._v(" 操作 ，如果发现不同的立即跳出循环")])]),v._v(" "),e("li",[e("p",[v._v("从后往前遍历新旧子序列找到有相同的节点进行 "),e("code",[v._v("patch")]),v._v(" 操作 ，如果发现不同的立即跳出循环")])]),v._v(" "),e("li",[e("p",[v._v("如果旧的节点遍历完，新的节点没有遍历完 ，对于剩下的新节点全部以新增vnode处理")])]),v._v(" "),e("li",[e("p",[v._v("如果新的节点遍历完，旧的节点没有遍历完，对于剩下的旧节点进行卸载处理")])]),v._v(" "),e("li",[e("p",[v._v("如果 3、4 都不成立继续做进一步处理")])]),v._v(" "),e("li",[e("p",[v._v("遍历剩余的新节点，寻找 "),e("code",[v._v("key")]),v._v(" 通过 "),e("code",[v._v("map 结构")]),v._v("保存起来")])]),v._v(" "),e("li",[e("p",[v._v("遍历剩余旧节点，查找是否存在相同的节点，有的话跟新节点做下映射，用于利用节点使用")])]),v._v(" "),e("li",[e("p",[v._v("如果不存在如果卸载旧节点")])]),v._v(" "),e("li",[e("p",[v._v("最后对剩余新节点做下遍历，通过前面映射关系，如果可复用的旧节点则进行节点的移动操作否则进行新增节点的操作")])])]),v._v(" "),e("h3",{attrs:{id:"rect16-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rect16-diff"}},[v._v("#")]),v._v(" Rect16 Diff")]),v._v(" "),e("p",[e("strong",[v._v("TextNode")])]),v._v(" "),e("p",[v._v("判断老的 "),e("code",[v._v("children")]),v._v(" 中的第一个节点是否也是文字节点，如果是就复用，如果不是就删除全部老的节点，创建新的文字节点")]),v._v(" "),e("p",[e("strong",[v._v("React.Element")])]),v._v(" "),e("p",[v._v("优先在旧节点链中查找可以复用的节点，。如果没有找到可复用的节点则重新创建节点")]),v._v(" "),e("p",[e("strong",[v._v("children diff")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("首先遍历新数组，对相同 "),e("code",[v._v("index")]),v._v(" 的新老节点进行对比，通过 "),e("code",[v._v("updateSlot")]),v._v(" 方法找到可以复用的节点，直到找到不可以复用的节点就退出循环。")])]),v._v(" "),e("li",[e("p",[v._v("首次遍历完之后，就是删除老数组中剩余的老节点，追加剩余的新节点的过程。如果是新节点已遍历完成，就将剩余的老节点批量删除；如果是老节点遍历完成仍有新节点剩余，则将新节点直接插入。")])]),v._v(" "),e("li",[e("p",[v._v("上述遍历过程结束后，为了处理元素移动，最后会把所有老数组元素按 "),e("code",[v._v("key")]),v._v(" 或 "),e("code",[v._v("index")]),v._v(" 放 "),e("code",[v._v("Map")]),v._v(" 里，然后再遍历新数组，从中找到复用的老数组元素插入到新数组中，达到移动元素目的。")])])]),v._v(" "),e("h3",{attrs:{id:"对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[v._v("#")]),v._v(" 对比")]),v._v(" "),e("p",[e("strong",[v._v("相同点")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("都是两组虚拟 dom 的对比(react16.8之后是 fiber 与虚拟dom的对比)")])]),v._v(" "),e("li",[e("p",[v._v("只对同级节点进行对比，简化了算法复杂度")])]),v._v(" "),e("li",[e("p",[v._v("都用 "),e("code",[v._v("key")]),v._v(" 做为唯一标识，进行查找，只有key和标签类型相同时才会复用老节点")])]),v._v(" "),e("li",[e("p",[v._v("遍历前都会根据老的节点构建一个map，方便根据key快速查找")])])]),v._v(" "),e("p",[e("strong",[v._v("不同点")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("react 在 Diff 遍历的时候，只对需要修改的节点进行了记录，形成 "),e("code",[v._v("effect list")]),v._v("，最后才会根据 "),e("code",[v._v("effect list")]),v._v(" 进行真实 dom的修改，修改时先删除，然后更新与移动，最后插入")])]),v._v(" "),e("li",[e("p",[v._v("vue 在遍历的时候就用真实 "),e("code",[v._v("dominsertBefore")]),v._v(" 方法，修改了真实 dom，最后做的删除操作")])]),v._v(" "),e("li",[e("p",[v._v("react 采用单指针从左向右进行遍历")])]),v._v(" "),e("li",[e("p",[v._v("vue 采用双指针，从两头向中间进行遍历")])]),v._v(" "),e("li",[e("p",[v._v("react 的 Diff 比较简单，Vue 中做了一些优化处理，相对复杂，但效率更高")])])]),v._v(" "),e("h2",{attrs:{id:"vuex和redux的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex和redux的区别"}},[v._v("#")]),v._v(" Vuex和Redux的区别")]),v._v(" "),e("p",[e("strong",[v._v("Redux 的核心概念")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("action： action默认是同步的 ，或借助中间件实现异步操作，"),e("code",[v._v("action")]),v._v(" 不会改变 "),e("code",[v._v("store")]),v._v("，只是描述了怎么改变 "),e("code",[v._v("store")])])]),v._v(" "),e("li",[e("p",[v._v("reducer: 纯函数，根据 "),e("code",[v._v("action")]),v._v(" 更新出新的 store")])]),v._v(" "),e("li",[e("p",[v._v("store：单一数据源")])])]),v._v(" "),e("h3",{attrs:{id:"vuex-的核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vuex-的核心概念"}},[v._v("#")]),v._v(" Vuex 的核心概念")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("mutation：用于同步操作直接修改 state")])]),v._v(" "),e("li",[e("p",[v._v("action：可用于异步操作，再通过提交 "),e("code",[v._v("mutation")]),v._v(" 进行 "),e("code",[v._v("store")]),v._v(" 的更新")])]),v._v(" "),e("li",[e("p",[v._v("store：单一数据源")])])]),v._v(" "),e("p",[e("strong",[v._v("使用区别")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("在 Vuex 中，"),e("code",[v._v("$store")]),v._v(" 被直接注入到了组件实例中，因此可以比较灵活的使用：使用 "),e("code",[v._v("dispatch")]),v._v("、"),e("code",[v._v("commit")]),v._v(" 提交更新，通过 "),e("code",[v._v("mapState")]),v._v(" 或者直接通过 "),e("code",[v._v("this.$store")]),v._v(" 来读取数据")])]),v._v(" "),e("li",[e("p",[v._v("在 Redux 中，通常需要借助 "),e("code",[v._v("connect")]),v._v(" 来获取 Action 生成 "),e("code",[v._v("Action Creators")]),v._v(" ， 同时将 "),e("code",[v._v("Action Creators")]),v._v(" 传递给子组件，所以子组件不需要直接使用 "),e("code",[v._v("dispatch")]),v._v(" 方法，而是直接调用该方法即可触发 "),e("code",[v._v("Action")])])])]),v._v(" "),e("p",[v._v("另外Vuex更加灵活一些，组件中既可以 "),e("code",[v._v("dispatch action")]),v._v("，也可以 "),e("code",[v._v("commit updates")]),v._v("，而Redux中只能进行 "),e("code",[v._v("dispatch")]),v._v("，不能直接调用 "),e("code",[v._v("reducer")]),v._v("进行修改。")]),v._v(" "),e("p",[e("strong",[v._v("实现原理")])]),v._v(" "),e("p",[v._v("Redux使用的是不可变数据，而Vuex的数据是可变的")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Redux每次都是用 "),e("code",[v._v("新state")]),v._v(" 替换 "),e("code",[v._v("旧state")]),v._v(" ，Redux在检测数据变化的时候，是通过diff的方式比较差异的")])]),v._v(" "),e("li",[e("p",[v._v("Vuex是对需要修改的属性进行直接修改，而Vuex其实和Vue的原理一样，是通过 "),e("code",[v._v("getter/setter")]),v._v(" 来比较的")])])]),v._v(" "),e("h3",{attrs:{id:"处理异步操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理异步操作"}},[v._v("#")]),v._v(" 处理异步操作")]),v._v(" "),e("p",[v._v("Redux 得益于 中间件机制，利用 "),e("code",[v._v("redux-thunk")]),v._v("， "),e("code",[v._v("redux-thunk")]),v._v(" 可以 "),e("code",[v._v("dispatch")]),v._v(" 函数，这个函数用于生成 "),e("code",[v._v("action")]),v._v("，所以在这个函数里面我们可以进行异步操作，等异步的结果出来后再放在 "),e("code",[v._v("action")]),v._v(" 里面将这个 "),e("code",[v._v("action")]),v._v(" 用 "),e("code",[v._v("dispatch")]),v._v(" 分发出去, 而这个函数被叫做 “action creator”")]),v._v(" "),e("p",[v._v("而 Vuex 是用 "),e("code",[v._v("mutation")]),v._v(" 来对应 Redux 的 "),e("code",[v._v("action")]),v._v("，另外 Vuex 又创造了一个 "),e("code",[v._v("action")]),v._v(" 来提交 "),e("code",[v._v("mutation")]),v._v(" 并通过异步提交 "),e("code",[v._v("mutation")]),v._v(" 来实现异步操作结果能够到达 "),e("code",[v._v("state")])]),v._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),e("p",[v._v("React更偏向于构建稳定大型的应用，非常的科班化。相比之下，Vue 更偏向于简单迅速的解决问题，更灵活，不那么严格遵循条条框框。因此也会给人一种大型项目用 React，小型项目用 Vue 的感觉")])])}),[],!1,null,null,null);_.default=o.exports}}]);