(window.webpackJsonp=window.webpackJsonp||[]).push([[191],{790:function(e,v,_){"use strict";_.r(v);var o=_(58),t=Object(o.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"websocket"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[e._v("#")]),e._v(" WebSocket")]),e._v(" "),_("p",[e._v("Websocket是一个持久化的协议")]),e._v(" "),_("h2",{attrs:{id:"websocket-机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#websocket-机制"}},[e._v("#")]),e._v(" WebSocket 机制")]),e._v(" "),_("p",[e._v("WebSocket 是 HTML5 下一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯的目的。它与 HTTP 一样通过已建立的 TCP 连接来传输数据，但是它和HTTP最大不同是：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("WebSocket 是一种双向通信协议。在建立连接后，WebSocket 服务器端和客户端都能主动向对方发送或接收数据，就像 Socket 一样；")])]),e._v(" "),_("li",[_("p",[e._v("WebSocket 需要像 TCP 一样，先建立连接，连接成功后才能相互通信")])])]),e._v(" "),_("p",[e._v("相比 HTTP 长连接，WebSocket 有以下特点：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("无跨域问题。")])]),e._v(" "),_("li",[_("p",[e._v("支持双向通信，实时性更强；")])]),e._v(" "),_("li",[_("p",[e._v("可以发送文本，也可以二进制文件")])]),e._v(" "),_("li",[_("p",[e._v("协议标识符是 "),_("code",[e._v("ws")]),e._v("，加密后是 "),_("code",[e._v("wss")])])]),e._v(" "),_("li",[_("p",[e._v("HTTP长连接中，每次数据交换除了真正的数据部分外，服务器和客户端还要大量交换 "),_("code",[e._v("HTTP header")]),e._v("。")])])]),e._v(" "),_("p",[e._v("Websocket 协议通过第一个 "),_("code",[e._v("request")]),e._v(" 建立了 TCP 连接之后，之后交换的数据都不需要发送 "),_("code",[e._v("HTTP header")]),e._v(" 就能交换数据")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("支持扩展。"),_("code",[e._v("ws")]),e._v(" 协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）")])]),e._v(" "),_("li",[_("p",[e._v("不同的URL可以复用同一个 WebSocket 连接等功能。这些都是HTTP长连接不能做到的。")])])]),e._v(" "),_("h1",{attrs:{id:"websocket的api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#websocket的api"}},[e._v("#")]),e._v(" WebSocket的API")]),e._v(" "),_("p",[e._v("使用构造函数 "),_("code",[e._v('new WebSocket("ws://localhost:3001")')]),e._v(" 建立 WebSocket 连接, 并返回一个 WebSocket 对象")]),e._v(" "),_("p",[e._v("WebSocket 对象包含以下属性：")]),e._v(" "),_("ul",[_("li",[_("p",[_("code",[e._v("onclose")]),e._v("：用于指定连接关闭后的回调函数")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("onerror")]),e._v("： 用于指定连接失败后的回调函数")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("onmessage")]),e._v("： 用于指定当从服务器接受到信息时的回调函数")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("onopen")]),e._v("： 用于指定连接成功后的回调函数")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("readyState")]),e._v("(只读) ： 当前的链接状态")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("url")]),e._v("(只读): WebSocket 的绝对路径")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("bufferedAmount")]),e._v("(只读)： 未发送至服务器的字节数")])]),e._v(" "),_("li",[_("p",[_("code",[e._v("protocol")]),e._v(" (只读) ： 服务器选择的下属协议")])])]),e._v(" "),_("p",[e._v("WebSocket 对象包含以下方法：")]),e._v(" "),_("p",[_("code",[e._v("close")]),e._v(": 关闭当前链接")]),e._v(" "),_("p",[_("code",[e._v("send")]),e._v(": 向服务器发送数据")]),e._v(" "),_("h1",{attrs:{id:"示例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),_("p",[e._v("node 实例 "),_("code",[e._v("websocket")]),e._v(" 服务的模块："),_("code",[e._v("ws")])]),e._v(" "),_("p",[e._v("见 "),_("code",[e._v("demo")])])])}),[],!1,null,null,null);v.default=t.exports}}]);