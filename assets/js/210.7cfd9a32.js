(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{827:function(e,v,_){"use strict";_.r(v);var t=_(63),o=Object(t.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"内存泄漏"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[e._v("#")]),e._v(" 内存泄漏")]),e._v(" "),_("p",[e._v("不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）")]),e._v(" "),_("p",[e._v("来看下前端容易出现的内存泄漏")]),e._v(" "),_("p",[_("strong",[e._v("意外的全局变量")])]),e._v(" "),_("p",[e._v("javascript 对未声明变量会在全局最高对象上创建它的引用，（是以属性存在的，而不是变量），如果在浏览器上就是 "),_("code",[e._v("window")]),e._v(" 对象，如果在 node 环境下就是"),_("code",[e._v("global")]),e._v("; 如果未声明的变量缓存大量的数据，它可能只有在页面被刷新或者被关闭的时候才会释放内存，这样就造成了内存意外泄漏")]),e._v(" "),_("p",[_("strong",[e._v("console.log")])]),e._v(" "),_("p",[e._v("作为前端平时使用 "),_("code",[e._v("console.log")]),e._v(" 在控制台打出相对应的信息可以说是非常常见。但如果没有去掉 "),_("code",[e._v("console.log")]),e._v(" 可能会存在内存泄漏。因为在代码运行之后需要在开发工具能查看对象信息，所以传递给 "),_("code",[e._v("console.log")]),e._v(" 的对象是不能被垃圾回收。")]),e._v(" "),_("p",[_("strong",[e._v("闭包")])]),e._v(" "),_("p",[e._v("首先闭包是一个函数A返回一个内联的函数B，即使A函数执行完，函数B也可以访问函数A里面的变量，这就是一个简单的闭包。本质上闭包是将函数内部和外部连接起来的一座桥梁")]),e._v(" "),_("p",[_("strong",[e._v("DOM泄漏")])]),e._v(" "),_("p",[e._v("为了减少DOM的操作，我们一般将常用的DOM采用变量引用的方式会将其缓存在当前环境。如果在进行一些删除、更新操作之后，可能会忘记释放已经缓存的DOM,导到内存泄漏")]),e._v(" "),_("p",[_("strong",[e._v("被遗忘的定时器")])]),e._v(" "),_("p",[e._v("常用的定时器 "),_("code",[e._v("setInterval()")]),e._v("、"),_("code",[e._v("setTimeout()")]),e._v("，他们都是规定延迟一定的时间执行某个代码，而其中 "),_("code",[e._v("setInterval()")]),e._v(" 和链式 "),_("code",[e._v("setTimeout()")]),e._v(" 在使用完之后如果没有手动关闭，会一直存在执行占用内存，所以在不用的时候我们可以通过 "),_("code",[e._v("clearInterval()")]),e._v(" 、"),_("code",[e._v("clearTimeout()")]),e._v(" 来关闭其对应的定时器，释放内存")]),e._v(" "),_("h2",{attrs:{id:"内存泄漏的识别方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏的识别方法"}},[e._v("#")]),e._v(" 内存泄漏的识别方法")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("使用快捷键 F12 或者 Ctrl+Shift+J 打开 Chrome 浏览器的「开发者工具」")])]),e._v(" "),_("li",[_("p",[e._v("选择 Performance(老版为Timeline) 选项卡，在 Capture 选项中，只勾选 Memory。")])]),e._v(" "),_("li",[_("p",[e._v("设置完成后，点击最左边的 Record 按钮，然后就可以访问网页了。")])]),e._v(" "),_("li",[_("p",[e._v("在页面上进行各种操作，模拟用户的使用情况")])]),e._v(" "),_("li",[_("p",[e._v("一段时间后，点击对话框的 stop 按钮，面板上就会显示这段时间的内存占用情况")])])]),e._v(" "),_("p",[_("a",{attrs:{href:"http://www.ayqy.net/blog/js%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E6%96%B9%E6%B3%95/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JS内存泄漏排查方法"),_("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=o.exports}}]);