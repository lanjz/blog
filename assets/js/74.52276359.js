(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{640:function(t,s,a){"use strict";a.r(s);var e=a(58),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"generater应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generater应用"}},[t._v("#")]),t._v(" Generater应用")]),t._v(" "),a("h2",{attrs:{id:"协程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协程"}},[t._v("#")]),t._v(" 协程")]),t._v(" "),a("p",[t._v('"协程"（coroutine），意思是多个线程互相协作，完成异步任务。协程有点像函数，又有点像线程。它的运行流程大致如下')]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一步，协程 A 开始执行")])]),t._v(" "),a("li",[a("p",[t._v("第二步，协程 A 执行到一半，进入暂停，执行权转移到协程 B")])]),t._v(" "),a("li",[a("p",[t._v("第三步，（一段时间后）协程 B 交还执行权")])]),t._v(" "),a("li",[a("p",[t._v("第四步，协程 A 恢复执行")])])]),t._v(" "),a("p",[t._v("上面流程的协程 A，就是异步任务，因为它分成两段（或多段）执行。")]),t._v(" "),a("p",[t._v("举例来说，读取文件的协程写法如下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asyncJob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...其他代码")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...其他代码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码的函数 "),a("code",[t._v("asyncJob")]),t._v(" 是一个协程，它的奥妙就在其中的 "),a("code",[t._v("yield")]),t._v(" 命令。它表示执行到此处，执行权将交给其他协程。也就是说，"),a("code",[t._v("yield")]),t._v(" 命令是异步两个阶段的分界线。")]),t._v(" "),a("p",[t._v("协程遇到 "),a("code",[t._v("yield")]),t._v(" 命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除 "),a("code",[t._v("yield")]),t._v("命令，简直一模一样")])])}),[],!1,null,null,null);s.default=n.exports}}]);