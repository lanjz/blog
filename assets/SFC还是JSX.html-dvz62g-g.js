import{_ as n,o as s,c as a,e as t}from"./app-lkvzo8Ck.js";const p={},e=t(`<h1 id="scf还是jsx" tabindex="-1"><a class="header-anchor" href="#scf还是jsx" aria-hidden="true">#</a> SCF还是JSX</h1><p>之前不怎么思考这类的问题，长期使用 vue开发的过程中，也没觉得不爽的地方，可能是因为接触比较多的是业务代码和移动端开发</p><p>之所以会有这样的思考，是因为后来接触了使用 VUE 开发 PC 后台，PC 的项目的特点就是页面需要承载的内容非常多，所以业务也相对比较复杂，当内容越来越多时，为了减肥就会去抽离成组件的方法进行组装页面，封装得越多彼此的通信越多，用到的 <code>slot</code>,<code>mininx</code> 的地方也越多，这个时候就越来越感觉到项目好难看得明白</p><p>这就是会思考题目的来源</p><h2 id="sfc" tabindex="-1"><a class="header-anchor" href="#sfc" aria-hidden="true">#</a> SFC</h2><p>SFC 即 Single File Component，也即单文件组件，Vue 组件就是很明显的SFC</p><p>一个vue组件包含了模板和Vue api和样式，一个组件的功能及包装的代码非常得完整用也一目了然，这也是一直都觉得使用 vue 非常舒服的原因，队了这些 Vue 使用 SFC 还以下优点：</p><p><strong>通过对模板的分析，可以做一些前期优化，这点是JSX语法很难以做到的</strong></p><p>例如“静态树提升”优化：</p><p>如下一段模板(这是模板，并非JSX)：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>static<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{ dynamic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不做任何优化，那么编译后得到的代码应该是这样子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
   <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">)</span>
 <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么每次重新渲染时，都会执行3次 h 方法，虽然未必会触发真正的DOM更新，但这也是一部分开销。</p><p>通过观察，我们知道 h(&#39;span&#39;, &#39;static&#39;) 这段代码传入的参数始终都不会有变化，它是静态的，而只有 h(&#39;span&#39;, this.dynamic) 这段才会根据 dynamic 的值变化。</p><p>在Vue 3.0中，编译器会自动分析出这种区别，对于静态的节点，会自动提升到 render 方法外部，避免重复执行。</p><p>Vue 3.0编译后的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> __static1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
       __static1<span class="token punctuation">,</span>
       <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>     
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样每次渲染时就只会执行两次 h 。换言之，经过静态树提升后，Vue 3.0渲染成本将只会和动态节点的规模相关，静态节点将会被复用。</p><p>除了静态树提升，还有很多别的编译阶段的优化，这些都是JSX语法难以做到的，因为JSX语法本质上还是在写JS，它没有任何限制，强行提升它会破坏JS执行的上下文，所以很难做出这种优化(也许配合 prepack 可以做到)。</p><p>考虑到这一点，如果你是在实现一个对性能要求较高的基础组件库，那模板语法仍然是首选。</p><p>另外JSX也没办法做 ref 自动展开，使得 ref 和 reactive 在使用上没有太大区别。</p><h2 id="sfc的问题" tabindex="-1"><a class="header-anchor" href="#sfc的问题" aria-hidden="true">#</a> SFC的问题</h2><p>以VUE 为便，当一个组件开发变得复杂的时候可能会出现以下问题：</p><p><strong>组件扩展节点</strong></p><p>vue中如在一个组件中希望能显示外部自定义的节点时，需要使用 slot， slot 这个东西每次用都觉得便扭，便扭的原因是其绕来绕去的作用域</p><p>同样的功能在 react 中实现就比较直观</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Comp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span> <span class="token attr-name">header</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyHeader</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">footer</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyFooter</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者将函数组件当作参数往别个函数组件中传，这种写法更符合咱们的常规思维</p><p><strong>组件要注册才能用</strong></p><p>vue 要使用组件，必需先注册该组件，如果想绕过注册这一步，只能使用渲染函数</p><p><strong>minxin</strong></p><p>这个就是自己用得爽，看别人就是不爽的东西</p><p><strong>组件通信</strong></p><p>同层级且组件通信少的情况下还好，一旦组件数量变多且出现深层组件通信时，简直噩梦，当然这应该不是只有 vue 才会出现的问题</p><p>JSX 本质上就是一个函数，应用的组成就是 函数彼此调用的过程，可以灵活得使用 JS 做任何事情，所以在做 公共组件，以及高度灵活的组件时，使用 JSX 将更方便</p><p>日后在 VUE3项目中中 会尝试使用 JSX和SFC 结合的方法，具体感觉一下开发体验是否有改善</p>`,37),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(p,[["render",o],["__file","SFC还是JSX.html.vue"]]);export{r as default};
