import{_ as n,o as s,c as a,e}from"./app-usrflJuT.js";const o={},p=e(`<h1 id="module-的加载实现" tabindex="-1"><a class="header-anchor" href="#module-的加载实现" aria-hidden="true">#</a> Module 的加载实现</h1><h2 id="浏览器加载" tabindex="-1"><a class="header-anchor" href="#浏览器加载" aria-hidden="true">#</a> 浏览器加载</h2><h3 id="传统加载" tabindex="-1"><a class="header-anchor" href="#传统加载" aria-hidden="true">#</a> 传统加载</h3><p>HTML 网页中，浏览器通过 <code>&lt;script&gt;</code> 标签加载 JavaScript 脚本</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 页面内嵌的脚本 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;application/javascript&quot;</span><span class="token operator">&gt;</span>
  <span class="token comment">// module code</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 外部脚本 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;application/javascript&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;path/to/myModule.js&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，由于浏览器脚本的默认语言是 JavaScript，因此 <code>type=&quot;application/javascript&quot;</code> 可以省略</p><p>默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到 <code>&lt;script&gt;</code> 标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间</p><p><code>defer</code> 和 <code>async</code> 两个属性可以让脚本异步加载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;path/to/myModule.js&quot;</span> defer<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;path/to/myModule.js&quot;</span> async<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer</code> 与 <code>async</code> 的区别是：</p><ul><li><p><code>defer</code> 属性脚本的执行是在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成，并且当包含多个 <code>defer</code> 标签的传本时，它是按照加载顺序执行脚本的</p></li><li><p><code>async</code> 的脚本并不保证按照指定它们的先后顺序执行。对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</p></li></ul><h3 id="浏览器加载-es6-模块" tabindex="-1"><a class="header-anchor" href="#浏览器加载-es6-模块" aria-hidden="true">#</a> 浏览器加载 ES6 模块</h3><p>浏览器加载 ES6 模块，也使用 <code>&lt;script&gt;</code> 标签，但是要加入 <code>type=&quot;module&quot;</code> 属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./foo.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
  <span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">&quot;./jquery/src/jquery.js&quot;</span><span class="token punctuation">;</span>
  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;Hi from jQuery!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器对于带有 <code>type=&quot;module&quot;</code> 的 <code>&lt;script&gt;</code> ，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了 <code>&lt;script&gt;</code> 标签的 <code>defer</code> 属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./foo.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 等同于 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./foo.js&quot;</span> defer<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果网页有多个 <code>&lt;script type=&quot;module&quot;&gt;</code> ，它们会按照在页面出现的顺序依次执行</p><p>对于外部的模块脚本（上例是foo.js），有几点需要注意:</p><ul><li><p>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见</p></li><li><p>模块脚本自动采用严格模式，不管有没有声明 <code>use strict</code></p></li><li><p>模块之中，可以使用 <code>import</code> 命令加载其他模块（ <code>.js</code> 后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用 <code>export</code> 命令输出对外接口</p></li><li><p>模块之中，顶层的 <code>this</code> 关键字返回 <code>undefined</code> ，而不是指向 <code>window</code> 。也就是说，在模块顶层使用 <code>this</code> 关键字，是无意义的</p></li><li><p>同一个模块如果加载多次，将只执行一次</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">&#39;https://example.com/js/utils.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">===</span> window<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用顶层的 <code>this</code> 等于 <code>undefined</code> 这个语法点，可以侦测当前代码是否在 ES6 模块之中</p><h2 id="es6-模块与-commonjs-模块的差异" tabindex="-1"><a class="header-anchor" href="#es6-模块与-commonjs-模块的差异" aria-hidden="true">#</a> ES6 模块与 CommonJS 模块的差异</h2><ul><li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p></li><li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</p></li></ul><p><strong>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用</strong></p><p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib.js</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> counter<span class="token punctuation">,</span>
  <span class="token literal-property property">incCounter</span><span class="token operator">:</span> incCounter<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用这个模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">var</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./lib&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
mod<span class="token punctuation">.</span><span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码说明，<code>lib.js</code> 模块加载以后，它的内部变化就影响不到输出的 <code>mod.counter</code> 了。这是因为 <code>mod.counter</code> 是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib.js</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> counter
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">incCounter</span><span class="token operator">:</span> incCounter<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过取值器函数就可以正确读取内部变量 <code>counter</code> 的变动了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node main<span class="token punctuation">.</span>js
<span class="token number">3</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 <code>import</code>，就会生成一个只读引用.等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值</p><p>因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> counter<span class="token punctuation">,</span> incCounter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./lib&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 ES6 输入的模块变量，只是一个“符号连接”，所以这个变量是只读的，对它进行重新赋值会报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// lib.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> obj <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./lib&#39;</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>main.js</code> 从 <code>lib.js</code> 输入变量 <code>obj</code>，可以对 <code>obj</code> 添加属性，但是重新赋值就会报错。因为变量 <code>obj</code> 指向的地址是只读的，不能重新赋值，这就好比 <code>main.js</code> 创造了一个名为 <code>obj</code> 的 <code>const</code> 变量</p><p><strong>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</strong></p><p>第二个差异是因为 CommonJS 加载的是一个对象（即 <code>module.exports</code> 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成</p><h2 id="node-js-加载" tabindex="-1"><a class="header-anchor" href="#node-js-加载" aria-hidden="true">#</a> Node.js 加载</h2><p>Node.js 对 ES6 模块的处理比较麻烦，因为它有自己的 CommonJS 模块格式，与 ES6 模块格式是不兼容的。目前的解决方案是，将两者分开，ES6 模块和 CommonJS 采用各自的加载方案。从 v13.2 版本开始，Node.js 已经默认打开了 ES6 模块支持</p><p>Node.js 要求 ES6 模块采用 <code>.mjs</code> 后缀文件名。也就是说，只要脚本文件里面使用 <code>import</code> 或者 <code>export</code> 命令，那么就必须采用 <code>.mjs</code> 后缀名。Node.js 遇到 <code>.mjs</code> 文件，就认为它是 ES6 模块，默认启用严格模式，不必在每个模块文件顶部指定&quot;use strict&quot;</p><p>如果不希望将后缀名改成 <code>.mjs</code> ，可以在项目的 <code>package.json</code> 文件中，指定 <code>type</code> 字段为 <code>module</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这时还要使用 CommonJS 模块，那么需要将 CommonJS 脚本的后缀名都改成 <code>.cjs</code> 。如果没有 <code>type</code> 字段，或者 <code>type</code> 字段为 <code>commonjs</code> ，则 <code>.js</code> 脚本会被解释成 CommonJS 模块</p><p>总结为一句话：<code>.mjs</code> 文件总是以 ES6 模块加载，<code>.cjs</code> 文件总是以 CommonJS 模块加载，<code>.js</code> 文件的加载取决于 <code>package.json</code> 里面 <code>type</code> 字段的设置</p><p>注意，ES6 模块与 CommonJS 模块尽量不要混用。<code>require</code> 命令不能加载 <code>.mjs</code> 文件，会报错，只有 <code>import</code> 命令才可以加载 <code>.mjs</code> 文件。反过来，<code>.mjs</code> 文件里面也不能使用 <code>require</code> 命令，必须使用 <code>import</code></p><h3 id="main-字段" tabindex="-1"><a class="header-anchor" href="#main-字段" aria-hidden="true">#</a> main 字段</h3><p><code>package.json</code> 文件有两个字段可以指定模块的入口文件：<code>main</code> 和 <code>exports</code> 。比较简单的模块，可以只使用 <code>main</code> 字段，指定模块加载的入口文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./node_modules/es-module-package/package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/index.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定项目的入口脚本为 <code>./src/index.js</code> ，它的格式为 ES6 模块。如果没有 <code>type</code> 字段，<code>index.js</code> 就会被解释为 CommonJS 模块</p><p>然后，<code>import</code> 命令就可以加载这个模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./my-app.mjs</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> something <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;es-module-package&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 实际加载的是 ./node_modules/es-module-package/src/index.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，运行该脚本以后，Node.js 就会到 <code>./node_modules</code> 目录下面，寻找 <code>es-module-package</code> 模块，然后根据该模块 <code>package.json</code> 的 <code>main</code> 字段去执行入口文件。</p><p>这时，如果用 CommonJS 模块的 <code>require()</code> 命令去加载 <code>es-module-package</code> 模块会报错，因为 CommonJS 模块不能处理 <code>export</code> 命令</p><h3 id="exports-字段" tabindex="-1"><a class="header-anchor" href="#exports-字段" aria-hidden="true">#</a> exports 字段</h3><p><code>exports</code> 字段的优先级高于 <code>main</code> 字段。它有多种用法。</p><p><strong>子目录别名</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./node_modules/es-module-package/package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./submodule&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./src/submodule.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码指定 <code>src/submodule.js</code> 别名为 <code>submodule</code> ，然后就可以从别名加载这个文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> submodule <span class="token keyword">from</span> <span class="token string">&#39;es-module-package/submodule&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 加载 ./node_modules/es-module-package/src/submodule.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>main 的别名</strong></p><p><code>exports</code> 字段的别名如果是 <code>.</code> ，就代表模块的主入口，优先级高于 <code>main</code> 字段，并且可以直接简写成 <code>exports</code> 字段的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等同于</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>exports</code> 字段只有支持 ES6 的 Node.js 才认识，所以可以用来兼容旧版本的 Node.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main-legacy.cjs&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main-modern.cjs&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，老版本的 Node.js （不支持 ES6 模块）的入口文件是 <code>main-legacy.cjs</code> ，新版本的 Node.js 的入口文件是<code>main-modern.cjs</code></p><p><strong>条件加载</strong></p><p>利用 <code>.</code> 这个别名，可以为 ES6 模块和 CommonJS 指定不同的入口。目前，这个功能需要在 Node.js 运行的时候，打开 <code>--experimental-conditional-exports</code> 标志</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;.&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.cjs&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，别名 <code>.</code> 的 <code>require</code> 条件指定 <code>require()</code> 命令的入口文件（即 CommonJS 的入口），<code>default</code> 条件指定其他情况的入口（即 ES6 的入口）。</p><p>上面的写法可以简写如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.cjs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果同时还有其他别名，就不能采用简写，否则或报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// 报错</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./feature&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./lib/feature.js&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.cjs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./main.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6-模块加载-commonjs-模块" tabindex="-1"><a class="header-anchor" href="#es6-模块加载-commonjs-模块" aria-hidden="true">#</a> ES6 模块加载 CommonJS 模块</h2><p>目前，一个模块同时支持 ES6 和 CommonJS 两种格式的常见方法是，<code>package.json</code> 文件的 <code>main</code> 字段指定 CommonJS 入口，给 Node.js 使用；<code>module</code> 字段指定 ES6 模块入口，给打包工具使用，因为 Node.js 不认识 <code>module</code> 字段。</p><p>有了上一节的条件加载以后，Node.js 本身就可以同时处理两种模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./node_modules/pkg/package.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.cjs&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;exports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./index.cjs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./wrapper.mjs&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定了 CommonJS 入口文件 <code>index.cjs</code> ，下面是这个文件的代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./node_modules/pkg/index.cjs</span>
exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，ES6 模块可以加载这个文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./node_modules/pkg/wrapper.mjs</span>
<span class="token keyword">import</span> cjsModule <span class="token keyword">from</span> <span class="token string">&#39;./index.cjs&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> name <span class="token operator">=</span> cjsModule<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>import</code> 命令加载 CommonJS 模块，只能整体加载，不能只加载单一的输出项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 正确</span>
<span class="token keyword">import</span> packageMain <span class="token keyword">from</span> <span class="token string">&#39;commonjs-package&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 报错</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> method <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;commonjs-package&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种变通的加载方法，就是使用 Node.js 内置的 <code>module.createRequire()</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cjs.cjs</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&#39;cjs&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// esm.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createRequire <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> require <span class="token operator">=</span> <span class="token function">createRequire</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> cjs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./cjs.cjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cjs <span class="token operator">===</span> <span class="token string">&#39;cjs&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，ES6 模块通过 <code>module.createRequire()</code> 方法可以加载 CommonJS 模块</p><h2 id="commonjs-模块加载-es6-模块" tabindex="-1"><a class="header-anchor" href="#commonjs-模块加载-es6-模块" aria-hidden="true">#</a> CommonJS 模块加载 ES6 模块</h2><p>CommonJS 的 <code>require</code> 命令不能加载 ES6 模块，会报错，只能使用 <code>import()</code> 这个方法加载</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./my-app.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码可以在 CommonJS 模块中运行</p><h2 id="node-js-的内置模块" tabindex="-1"><a class="header-anchor" href="#node-js-的内置模块" aria-hidden="true">#</a> Node.js 的内置模块</h2><p>Node.js 的内置模块可以整体加载，也可以加载指定的输出项</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 整体加载</span>
<span class="token keyword">import</span> EventEmitter <span class="token keyword">from</span> <span class="token string">&#39;events&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 加载指定的输出项</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs&#39;</span><span class="token punctuation">;</span>
<span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./foo.txt&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="加载路径" tabindex="-1"><a class="header-anchor" href="#加载路径" aria-hidden="true">#</a> 加载路径</h2><p>ES6 模块的加载路径必须给出脚本的完整路径，不能省略脚本的后缀名。<code>import</code> 命令和 <code>package.json</code> 文件的 <code>main</code> 字段如果省略脚本的后缀名，会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ES6 模块中将报错</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> something <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./index&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了与浏览器的 <code>import</code> 加载规则相同，Node.js 的 <code>.mjs</code> 文件支持 URL 路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;./foo.mjs?query=1&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 加载 ./foo 传入参数 ?query=1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，脚本路径带有参数 <code>?query=1</code> ，Node 会按 URL 规则解读。同一个脚本只要参数不同，就会被加载多次，并且保存成不同的缓存。由于这个原因，只要文件名中含有 <code>:</code> 、<code>%</code> 、 <code>#</code> 、<code>?</code> 等特殊字符，最好对这些字符进行转义。</p><p>目前，Node.js 的 <code>import</code> 命令只支持加载本地模块（<code>file:</code>协议）和 <code>data:</code> 协议，不支持加载远程模块。另外，脚本路径只支持相对路径，不支持绝对路径（即以 <code>/</code> 或 <code>//</code> 开头的路径）。</p><p>最后，Node 的 <code>import</code> 命令是异步加载，这一点与浏览器的处理方法相同</p><h2 id="内部变量" tabindex="-1"><a class="header-anchor" href="#内部变量" aria-hidden="true">#</a> 内部变量</h2><p>ES6 模块之中，顶层的 <code>this</code> 指向 <code>undefined</code></p><p>CommonJS 模块的顶层 <code>this</code> 指向当前模块，这是两者的一个重大差异</p><p>其次，以下这些顶层变量在 ES6 模块之中都是不存在的</p><ul><li><p><code>arguments</code></p></li><li><p><code>require</code></p></li><li><p><code>module</code></p></li><li><p><code>exports</code></p></li><li><p><code>__filename</code></p></li><li><p><code>__dirname</code></p></li></ul><h2 id="commonjs-模块的加载原理" tabindex="-1"><a class="header-anchor" href="#commonjs-模块的加载原理" aria-hidden="true">#</a> CommonJS 模块的加载原理</h2><p>CommonJS 的一个模块，就是一个脚本文件。<code>require</code> 命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码就是 Node 内部加载模块后生成的一个对象</p><ul><li><p><code>id</code>: 表示模块名</p></li><li><p><code>exports</code>: 模块输出的各个接口</p></li><li><p><code>loaded</code>: 一个布尔值，表示该模块的脚本是否执行完毕</p></li></ul><p>以后需要用到这个模块的时候，就会到 <code>exports</code> 属性上面取值。即使再次执行 <code>require</code> 命令，也不会再次执行该模块，而是到缓存之中取值。也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存</p><h2 id="commonjs-模块的循环加载" tabindex="-1"><a class="header-anchor" href="#commonjs-模块的循环加载" aria-hidden="true">#</a> CommonJS 模块的循环加载</h2><p>CommonJS 模块的重要特性是加载时执行，即脚本代码在 <code>require</code> 的时候，就会全部执行。一旦出现某个模块被&quot;循环加载&quot;，就只输出已经执行的部分，还未执行的部分不会输出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 a.js 之中，b.done = %j&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.js 执行完毕&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在 b.js 之中，a.done = %j&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.js 执行完毕&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码之中，<code>a.js</code> 脚本先输出一个 <code>done</code> 变量，然后加载另一个脚本文件 <code>b.js</code> 。注意，此时 <code>a.js</code> 代码就停在这里，等待 <code>b.js</code> 执行完毕，再往下执行</p><p><code>b.js</code> 执行到第二行，就会去加载 <code>a.js</code> ，这时，就发生了“循环加载”。系统会去 <code>a.js</code> 模块对应对象的 <code>exports</code> 属性取值，可是此时 <code>a.js</code> 只执行了 <code>exports.done = false</code>，所以从 <code>a.js</code> 只输入一个变量 <code>done</code> ，值为 <code>false</code></p><p>然后，<code>b.js</code> 接着往下执行，等到全部执行完毕，再把执行权交还给 <code>a.js</code> 。于是，<code>a.js</code> 接着往下执行，直到执行完毕</p><h2 id="es6-模块的循环加载" tabindex="-1"><a class="header-anchor" href="#es6-模块的循环加载" aria-hidden="true">#</a> ES6 模块的循环加载</h2><p>ES6 处理“循环加载”与 CommonJS 有本质的不同。ES6 模块是动态引用，如果使用 <code>import</code> 从一个模块加载变量（即 <code>import foo from &#39;foo&#39;</code> ），那些变量不会被缓存，而是成为一个指向被加载模块的引用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// b.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>a.mjs</code> 加载 <code>b.mjs</code> ，<code>b.mjs</code> 又加载 <code>a.mjs</code>，构成循环加载。执行 <code>a.mjs</code> ，结果如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ node <span class="token operator">--</span>experimental<span class="token operator">-</span>modules a<span class="token punctuation">.</span>mjs
b<span class="token punctuation">.</span>mjs
<span class="token literal-property property">ReferenceError</span><span class="token operator">:</span> foo is not defined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，执行 <code>a.mjs</code> 以后，引擎发现它加载了 <code>b.mjs</code> ，因此会优先执行 <code>b.mjs</code></p><p>执行 <code>b.mjs</code> 的时候，已知它从 <code>a.mjs</code> 输入了 <code>foo</code> 接口，这时不会去执行 <code>a.mjs</code>，而是认为这个接口已经存在了，继续往下执行</p><p>执行到第三行 <code>console.log(foo)</code> 的时候，才发现这个接口根本没定义，因此报错</p><p>解决这个问题的方法，就是让 <code>b.mjs</code> 运行的时候，<code>foo</code> 已经有定义了。这可以通过将 <code>foo</code> 写成函数来解决</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// b.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时再执行 <code>a.mjs</code> 就可以得到预期结果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ node <span class="token operator">--</span>experimental<span class="token operator">-</span>modules a<span class="token punctuation">.</span>mjs
b<span class="token punctuation">.</span>mjs
foo
a<span class="token punctuation">.</span>mjs
bar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为函数具有提升作用，在执行 <code>import {bar} from &#39;./b&#39;</code> 时，函数 <code>foo</code> 就已经有定义了，所以 <code>b.mjs</code> 加载的时候不会报错。这也意味着，如果把函数 <code>foo</code> 改写成函数表达式，也会报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的第四行，改成了函数表达式，就不具有提升作用，执行就会报错。</p><p>我们再来看 ES6 模块加载器 <code>SystemJS</code> 给出的一个例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// even.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> odd <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./odd&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">even</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">odd</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// odd.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> even <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./even&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">even</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>even.js</code> 里面的函数 <code>even</code> 有一个参数 <code>n</code>，只要不等于 <code>0</code>，就会减去 <code>1</code>，传入加载的 <code>odd()</code>。<code>odd.js</code> 也会做类似操作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ babel<span class="token operator">-</span>node
<span class="token operator">&gt;</span> <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m <span class="token keyword">from</span> <span class="token string">&#39;./even.js&#39;</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> m<span class="token punctuation">.</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token boolean">true</span>
<span class="token operator">&gt;</span> m<span class="token punctuation">.</span>counter
<span class="token number">6</span>
<span class="token operator">&gt;</span> m<span class="token punctuation">.</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token boolean">true</span>
<span class="token operator">&gt;</span> m<span class="token punctuation">.</span>counter
<span class="token number">17</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，参数 <code>n</code> 从 <code>10</code> 变为 <code>0</code> 的过程中，<code>even()</code> 一共会执行 <code>6</code> 次，所以变量 <code>counter</code> 等于 <code>6</code>。第二次调用 <code>even()</code> 时，参数 <code>n</code> 从 <code>20</code> 变为 <code>0</code> ，<code>even()</code> 一共会执行 <code>11</code> 次，加上前面的 <code>6</code> 次，所以变量 <code>counter</code> 等于 <code>17</code></p><p>这个例子要是改写成 CommonJS，就根本无法执行，会报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// even.js</span>
<span class="token keyword">var</span> odd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./odd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>counter <span class="token operator">=</span> counter<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">even</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  counter<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">odd</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// odd.js</span>
<span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./even&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>even<span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">even</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>even.js</code> 加载 <code>odd.js</code> ，而 <code>odd.js</code> 又去加载 <code>even.js</code> ，形成“循环加载”。这时，执行引擎就会输出<code>even.js</code> 已经执行的部分（不存在任何结果），所以在 <code>odd.js</code> 之中，变量 <code>even</code> 等于 <code>undefined</code> ，等到后面调用 <code>even(n - 1)</code> 就会报错</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>$ node
<span class="token operator">&gt;</span> <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./even&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&gt;</span> m<span class="token punctuation">.</span><span class="token function">even</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token literal-property property">TypeError</span><span class="token operator">:</span> even is not a <span class="token keyword">function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,145),t=[p];function c(i,l){return s(),a("div",null,t)}const d=n(o,[["render",c],["__file","Module的加载实现.html.vue"]]);export{d as default};
