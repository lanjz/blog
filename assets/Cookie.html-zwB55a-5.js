import{_ as e,o,c as t,e as i}from"./app-kv3zS8h1.js";const c="/lanjz/assets/cookie_1-U2iYdjin.png",d={},a=i('<h1 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h1><p>Cookie 是服务端存储在浏览器本地的一小段数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上</p><p>Cookie的作用：</p><ul><li><p>会话管理</p></li><li><p>用户行为追踪</p></li><li><p>个性化设置如（用户自定义设置、主题等）</p></li></ul><h2 id="创建cookie" tabindex="-1"><a class="header-anchor" href="#创建cookie" aria-hidden="true">#</a> 创建Cookie</h2><p><code>set-cookie: [cookie 名] = [cookie 值];[cookie 名] = [cookie 值]</code></p><p>当服务器收到请求后，可以在响应头里添加一个 <code>set-cookie</code>选项。浏览器在收到会保存 Cookie 到本地</p><p>Cookie 可设置的属性有：</p><ul><li><p><code>Expires</code>：设置一个绝对时间,用GMT或者UTC时间格式</p></li><li><p><code>Max-Age</code>: 设置一个相对秒数</p><blockquote><p>当Cookie的过期时间被设定时，设定的日期和时间只与客户端相关，而不是服务端。</p></blockquote><blockquote><p>正常情况下 Cookie 仅在会话周期有效，当浏晌器关闭，Cookie 就会失效</p></blockquote></li><li><p><code>HttpOnly</code>: 禁止Cookie被JavasScript访问，<code>document.cookie</code>将拿不到存储的Cookie，可以防止 <code>XSS</code> 攻击</p></li><li><p><code>Secure</code>: 设置 Cookie 只能被 HTTPS 协议传输</p></li><li><p><code>Domain</code>: 设置Cookie的作用域，即Cookie可以发送给哪些URL</p></li><li><p><code>Path</code>: 指定了主机下的哪些路径可以接受Cookie</p></li><li><p><code>SameSite</code>: <code>SameSite</code>属性用来限制第三方 Cookie，从而减少安全风险, 御防 CSRF 攻击，它有以下三个选项</p><ul><li><code>Strict</code>: 完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie</li></ul><p><code>Set-Cookie: CookieName=CookieValue; SameSite=Strict</code></p><ul><li><p><code>Lax</code>: <code>Lax</code> 规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外</p></li><li><p><code>None</code>: Chrome 计划将 <code>Lax</code> 变为默认设置。这时，网站可以选择显式关闭 <code>SameSite</code> 属性，将其设为 <code>None</code>。不过，前提是必须同时设置 <code>Secure</code> 属性, 否则无效。</p></li></ul></li></ul><p>下图是使用和不使用 <code>SameSite</code> 时常见请求方式下的 <code>cookie</code> 携带发送情况</p><p><img src="'+c+'" alt=""></p><h2 id="cookie有效时间" tabindex="-1"><a class="header-anchor" href="#cookie有效时间" aria-hidden="true">#</a> Cookie有效时间</h2><p>默认情况下，Cookie只在会话期有效。关闭浏览器后Cookie就自动删除了，当然不是所有的浏览器都这么正常，有的浏览器提供了会话恢复功能。我们可以通过设置<code>Expire</code>或<code>Max-age</code>来控制Cookie的时效性</p><h2 id="cookie长度限制" tabindex="-1"><a class="header-anchor" href="#cookie长度限制" aria-hidden="true">#</a> Cookie长度限制</h2><table><thead><tr><th>浏览器</th><th style="text-align:center;">允许cookie条数</th><th style="text-align:right;">每个Cookie的最大长度</th></tr></thead><tbody><tr><td>IE</td><td style="text-align:center;">原先为20个，后来升级为50个</td><td style="text-align:right;">4095</td></tr><tr><td>Firefox</td><td style="text-align:center;">50个</td><td style="text-align:right;">4079字节</td></tr><tr><td>Opera</td><td style="text-align:center;">30个</td><td style="text-align:right;">4096字节</td></tr><tr><td>Chrome</td><td style="text-align:center;">150个</td><td style="text-align:right;">4079字节</td></tr><tr><td>Safari</td><td style="text-align:center;">无限制</td><td style="text-align:right;">4079字节</td></tr></tbody></table><p>总之，在进行页面cookie操作的时候，应该尽量保证每个域cookie个数小于50个，单条cookie总长度4KB（包阔键和值以及等号）</p>',16),l=[a];function r(p,k){return o(),t("div",null,l)}const h=e(d,[["render",r],["__file","Cookie.html.vue"]]);export{h as default};
