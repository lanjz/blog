import{_ as e,o,c,b as n,a as p,e as s,d as t,r as l}from"./app.b7720670.js";const i={},u=n("h1",{id:"\u56DE\u6587\u4E32",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u56DE\u6587\u4E32","aria-hidden":"true"},"#"),s(" \u56DE\u6587\u4E32")],-1),r=n("p",null,"\u8DDF\u56DE\u6587\u4E32\u76F8\u5173\u7684\u9898\u76EE\u57FA\u672C\u90FD\u79BB\u5F00\u4E0D\u52A8\u6001\u89C4\u5212",-1),k=n("h2",{id:"\u9898",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u9898","aria-hidden":"true"},"#"),s(" \u9898")],-1),d={id:"_9-\u56DE\u6587\u6570",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#_9-\u56DE\u6587\u6570","aria-hidden":"true"},"#",-1),m=s(),b={href:"https://leetcode-cn.com/problems/palindrome-number/",target:"_blank",rel:"noopener noreferrer"},h=s("9. \u56DE\u6587\u6570"),g=t(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u4F60\u4E00\u4E2A\u6574\u6570 x \uFF0C\u5982\u679C x \u662F\u4E00\u4E2A\u56DE\u6587\u6574\u6570\uFF0C\u8FD4\u56DE true \uFF1B\u5426\u5219\uFF0C\u8FD4\u56DE false \u3002

\u56DE\u6587\u6570\u662F\u6307\u6B63\u5E8F\uFF08\u4ECE\u5DE6\u5411\u53F3\uFF09\u548C\u5012\u5E8F\uFF08\u4ECE\u53F3\u5411\u5DE6\uFF09\u8BFB\u90FD\u662F\u4E00\u6837\u7684\u6574\u6570\u3002\u4F8B\u5982\uFF0C121 \u662F\u56DE\u6587\uFF0C\u800C 123 \u4E0D\u662F\u3002

\u793A\u4F8B 1\uFF1A
\u8F93\u5165\uFF1Ax = 121
\u8F93\u51FA\uFF1Atrue

\u793A\u4F8B 2\uFF1A
\u8F93\u5165\uFF1Ax = -121
\u8F93\u51FA\uFF1Afalse
\u89E3\u91CA\uFF1A\u4ECE\u5DE6\u5411\u53F3\u8BFB, \u4E3A -121 \u3002 \u4ECE\u53F3\u5411\u5DE6\u8BFB, \u4E3A 121- \u3002\u56E0\u6B64\u5B83\u4E0D\u662F\u4E00\u4E2A\u56DE\u6587\u6570\u3002

\u793A\u4F8B 3\uFF1A
\u8F93\u5165\uFF1Ax = 10
\u8F93\u51FA\uFF1Afalse
\u89E3\u91CA\uFF1A\u4ECE\u53F3\u5411\u5DE6\u8BFB, \u4E3A 01 \u3002\u56E0\u6B64\u5B83\u4E0D\u662F\u4E00\u4E2A\u56DE\u6587\u6570\u3002

\u793A\u4F8B 4\uFF1A
\u8F93\u5165\uFF1Ax = -101
\u8F93\u51FA\uFF1Afalse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u89E3\u4E00\uFF1A</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x<span class="token operator">+=</span><span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span>x<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">===</span> x<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            start<span class="token operator">++</span>
            end<span class="token operator">--</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u89E3\u4E8C\uFF1A</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token keyword">let</span> _x <span class="token operator">=</span> x
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>_x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        result <span class="token operator">=</span> result<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>_x<span class="token operator">%</span><span class="token number">10</span>
        _x <span class="token operator">=</span> <span class="token punctuation">(</span>_x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result <span class="token operator">===</span> x<span class="token operator">?</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),w={id:"\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217","aria-hidden":"true"},"#",-1),y=s(),f={href:"https://leetcode-cn.com/problems/longest-palindromic-subsequence/",target:"_blank",rel:"noopener noreferrer"},q=s("\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217"),x=t(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32 s \uFF0C\u627E\u5230\u5176\u4E2D\u6700\u957F\u7684\u56DE\u6587\u5B50\u5E8F\u5217\uFF0C\u5E76\u8FD4\u56DE\u8BE5\u5E8F\u5217\u7684\u957F\u5EA6\u3002\u53EF\u4EE5\u5047\u8BBE s \u7684\u6700\u5927\u957F\u5EA6\u4E3A 1000 \u3002

\u793A\u4F8B 1:
\u8F93\u5165:&quot;bbbab&quot;
\u8F93\u51FA:4
\u4E00\u4E2A\u53EF\u80FD\u7684\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217\u4E3A &quot;bbbb&quot;\u3002

\u793A\u4F8B 2:
\u8F93\u5165:&quot;cbbd&quot;
\u8F93\u51FA:2
\u4E00\u4E2A\u53EF\u80FD\u7684\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217\u4E3A &quot;bb&quot;\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u89E3\u9898\u601D\u8DEF</strong></p><p>\u5BF9\u4E8E\u5B57\u7B26\u4E32 <code>s</code> \u5047\u8BBE <code>dp[i][j]</code> \u8868\u793A\u6570\u7EC4\u4E0B\u6807 <code>i-j</code> \u4E4B\u95F4\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217</p><p>\u90A3\u4E48\u8BA1\u7B97 <code>dp[m][n]</code> \u7684\u6700\u957F\u5B50\u5E8F\u5217\u7684\u65B9\u5F0F\u6709\u51E0\u79CD\u60C5\u51B5\uFF1A</p><ol><li><p><code>s[m]===s[n]</code>\uFF0C\u90A3\u4E48 <code>dp[m][n] = dp[m+1][n-1]+2</code></p></li><li><p><code>s[m]!==s[n]</code>\uFF0C\u90A3\u4E48 <code>dp[m][n]</code> \u53D6\u73B0\u5728\u6709\u533A\u95F4\u7684\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217\u7684\u6700\u5927\u503C\uFF0C<code>dp[m][n]</code> \u4E4B\u95F4\u7684\u6700\u5927\u533A\u95F4\u6709 <code>dp[m+][n]</code> \u548C <code>dp[m][n-1]</code>\uFF0C\u6240\u4EE5\u6B64\u65F6 <code>dp[m][n] = Math.max(dp[m+1][n], dp[m][n-1])</code></p></li><li><p>\u8981\u5F97\u5230<code>dp[m][n]</code>\uFF0C\u5F97\u4ECE<code>dp[0][0]</code> \u5F00\u59CB\u8BA1\u7B97\u5230 <code>dp[m][n]</code></p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestPalindromeSubseq</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// \u5B9A\u4E49 dp</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u4ECE\u5934\u5F00\u59CB\u904D\u5386</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span>m<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5916\u5C42\u7684\u503C\u4F9D\u8D56\u5185\u5C42\u7684\u503C\uFF0C\u6240\u4EE5\u4ECE\u91CC\u5230\u5916\u904D\u5386</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">===</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5750\u6807\u76F8\u7B49\uFF0C\u8868\u793A\u540C\u4E00\u4E2A\u6570\uFF0Cdp[m][n] = 1</span>
                dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// \u5B57\u7B26\u76F8\u7B49</span>
                dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span><span class="token operator">:</span> dp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span> <span class="token comment">// \u5982\u679C\u662F\u76F8\u90BB\u7684\u5B57\u7B26 dp[m][n] = 2\uFF0C\u5426\u5219 [m][n] = dp[m+1][n-1]+2</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// \u53D6[m-n] \u533A\u57DF\u5185\u7684\u6700\u5927\u503C</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),j={id:"_5-\u6700\u957F\u56DE\u6587\u5B50\u4E32",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#_5-\u6700\u957F\u56DE\u6587\u5B50\u4E32","aria-hidden":"true"},"#",-1),M=s(),V={href:"https://leetcode-cn.com/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},B=s("5. \u6700\u957F\u56DE\u6587\u5B50\u4E32"),N=t(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 s\uFF0C\u627E\u5230 s \u4E2D\u6700\u957F\u7684\u56DE\u6587\u5B50\u4E32\u3002

\u793A\u4F8B 1\uFF1A

\u8F93\u5165\uFF1As = &quot;babad&quot;
\u8F93\u51FA\uFF1A&quot;bab&quot;
\u89E3\u91CA\uFF1A&quot;aba&quot; \u540C\u6837\u662F\u7B26\u5408\u9898\u610F\u7684\u7B54\u6848\u3002
\u793A\u4F8B 2\uFF1A

\u8F93\u5165\uFF1As = &quot;cbbd&quot;
\u8F93\u51FA\uFF1A&quot;bb&quot;
\u793A\u4F8B 3\uFF1A

\u8F93\u5165\uFF1As = &quot;a&quot;
\u8F93\u51FA\uFF1A&quot;a&quot;
\u793A\u4F8B 4\uFF1A

\u8F93\u5165\uFF1As = &quot;ac&quot;
\u8F93\u51FA\uFF1A&quot;a&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u89E3\u9898\u601D\u8DEF</strong></p><p>\u6B64\u9898\u601D\u8DEF\u8DDF [\u6700\u957F\u56DE\u6587\u5B50\u5E8F\u5217] \u4E00\u6837\uFF0C\u8981\u89E3\u5F97\u6700\u957F\u56DE\u6587\u5B57\u4E32\uFF0C\u90A3\u4E48\u5C31\u5F97\u77E5\u9053\u54EA\u4E9B\u662F\u56DE\u6587\u4E32\uFF0C\u6240\u4EE5\u5BF9\u4E8E\u5B57\u7B26\u4E32 <code>s</code> \u5B9A\u4E49 <code>dp[i][j]</code>\uFF0C\u8868\u793A\u6570\u7EC4\u4E0B\u6807 <code>i\u5230j</code> \u4E4B\u95F4\u662F\u5426\u662F\u56DE\u6587\u4E32</p><p>\u90A3\u4E48\u8BA1\u7B97 <code>dp[m][n]</code> \u662F\u5426\u662F\u56DE\u6587\u4E32\u7684\u60C5\u51B5\u6709\u6709\uFF1A</p><ol><li><p><code>s[m]===s[n] &amp;&amp; dp[m+1][n-1]</code></p></li><li><p><code>s[m]===s[n] &amp;&amp; (n-m&lt;2)</code>\uFF0C <code>n-m=0</code> \u8868\u793A <code>s[m]</code> \u548C <code>s[n]</code> \u662F\u540C\u4E00\u4E2A\u6570\uFF0C<code>n-m=1</code> \u8868\u793A <code>s[m]</code> \u548C <code>s[n]</code> \u662F\u4E24\u4E2A\u76F8\u90BB\u7684\u6570\uFF0C</p></li><li><p>\u8981\u5F97\u5230<code>dp[m][n]</code>\uFF0C\u5F97\u4ECE<code>dp[0][0]</code> \u5F00\u59CB\u8BA1\u7B97\u5230 <code>dp[m][n]</code></p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">let</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                db<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>db<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                db<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>db<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// \u5982\u679C\u662F\u56DE\u6587\u4E32\uFF0C\u53D6\u8FD9\u4E2A\u56DE\u6587\u4E32\u5982\u679C\u6BD4 res \u5927\u7684\u8BDD\uFF0C\u5C31\u8FDB\u884C\u4FDD\u5B58</span>
                res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),S={id:"_647-\u56DE\u6587\u5B50\u4E32",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_647-\u56DE\u6587\u5B50\u4E32","aria-hidden":"true"},"#",-1),P=s(),C={href:"https://leetcode-cn.com/problems/palindromic-substrings/",target:"_blank",rel:"noopener noreferrer"},z=s("647. \u56DE\u6587\u5B50\u4E32"),D=t(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u4F60\u7684\u4EFB\u52A1\u662F\u8BA1\u7B97\u8FD9\u4E2A\u5B57\u7B26\u4E32\u4E2D\u6709\u591A\u5C11\u4E2A\u56DE\u6587\u5B50\u4E32\u3002  
\u5177\u6709\u4E0D\u540C\u5F00\u59CB\u4F4D\u7F6E\u6216\u7ED3\u675F\u4F4D\u7F6E\u7684\u5B50\u4E32\uFF0C\u5373\u4F7F\u662F\u7531\u76F8\u540C\u7684\u5B57\u7B26\u7EC4\u6210\uFF0C\u4E5F\u4F1A\u88AB\u89C6\u4F5C\u4E0D\u540C\u7684\u5B50\u4E32\u3002

\u793A\u4F8B 1\uFF1A

\u8F93\u5165\uFF1A&quot;abc&quot;
\u8F93\u51FA\uFF1A3
\u89E3\u91CA\uFF1A\u4E09\u4E2A\u56DE\u6587\u5B50\u4E32: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;
\u793A\u4F8B 2\uFF1A

\u8F93\u5165\uFF1A&quot;aaa&quot;
\u8F93\u51FA\uFF1A6
\u89E3\u91CA\uFF1A6\u4E2A\u56DE\u6587\u5B50\u4E32: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u601D\u8DEF</strong></p><p>\u8981\u83B7\u53D6\u591A\u5C11\u56DE\u6587\u5B50\u4E32\uFF0C\u90A3\u4E48\u6211\u9700\u8981\u77E5\u9053\u4E24\u4E2A\u6761\u4EF6</p><ol><li><p>\u8FD9\u4E2A\u5B57\u7B26\u4E32\u53EF\u4EE5\u5206\u6210\u54EA\u4E9B\u5B50\u4E32</p></li><li><p>\u5B57\u7B26\u4E32\u4E24\u4E24\u4E4B\u95F4\u662F\u5426\u56DE\u6587\u4E32</p></li></ol><p>\u5BF9\u4E8E\u7B2C\u4E8C\u70B9\uFF0C\u5176\u5B9E\u5C31\u540C [5. \u6700\u957F\u56DE\u6587\u5B50\u4E32] \u9898\u76EE\u4E00\u6837\uFF0C\u5EFA\u7ACB <code>dp</code>\uFF0C\u8BA1\u7B97\u5F97\u5230\u6240\u6709\u7684 <code>dp[m][n]</code> \u662F\u5426\u662F\u56DE\u6587\u4E32</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5EFA\u7ACB dp \u7684\u4EE3\u7801</span>
<span class="token keyword">var</span> <span class="token function-variable function">countSubstrings</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E\u5B50\u4E32\uFF0C\u5176\u5B9E\u5FAA\u73AF\u65F6\u5F97\u5230\u7684<code>dp[j][i]</code>\u65F6\uFF0C<code>[j][i]</code> \u5C31\u662F\u5B50\u4E32\u4E86\uFF0C\u6240\u4EE5\u8FD9\u9898\u5176\u5B9E\u8FD9\u9898\u8DDF [5. \u6700\u957F\u56DE\u6587\u5B50\u4E32] \u5C31\u662F\u4E00\u6837\u7684</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">countSubstrings</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                count<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> count
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),I={id:"_131-\u5206\u5272\u56DE\u6587\u4E32",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#_131-\u5206\u5272\u56DE\u6587\u4E32","aria-hidden":"true"},"#",-1),Q=s(),W={href:"https://leetcode-cn.com/problems/palindrome-partitioning/",target:"_blank",rel:"noopener noreferrer"},H=s("131. \u5206\u5272\u56DE\u6587\u4E32"),J=t(`<p><strong>\u52A8\u6001\u89C4\u5219+\u56DE\u6EAF</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u4F60\u4E00\u4E2A\u5B57\u7B26\u4E32 s\uFF0C\u8BF7\u4F60\u5C06 s \u5206\u5272\u6210\u4E00\u4E9B\u5B50\u4E32\uFF0C\u4F7F\u6BCF\u4E2A\u5B50\u4E32\u90FD\u662F \u56DE\u6587\u4E32 \u3002\u8FD4\u56DE s \u6240\u6709\u53EF\u80FD\u7684\u5206\u5272\u65B9\u6848\u3002

\u56DE\u6587\u4E32 \u662F\u6B63\u7740\u8BFB\u548C\u53CD\u7740\u8BFB\u90FD\u4E00\u6837\u7684\u5B57\u7B26\u4E32\u3002

\u793A\u4F8B 1\uFF1A

\u8F93\u5165\uFF1As = &quot;aab&quot;
\u8F93\u51FA\uFF1A[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]
\u793A\u4F8B 2\uFF1A

\u8F93\u5165\uFF1As = &quot;a&quot;
\u8F93\u51FA\uFF1A[[&quot;a&quot;]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u601D\u8DEF</strong></p><p>\u8DDF\u4E4B\u524D\u7684\u9898\u76EE\u7C7B\u4F3C\uFF0C\u5F97\u5148\u5B9A\u4E49 <code>dp</code> \u5F97\u5230\u6240\u6709\u4E24\u4E24\u5B57\u7B26\u662F\u5426\u662F\u56DE\u6587\u4E32</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">partition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">&lt;</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                bp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                bp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
                bp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> tem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> <span class="token function-variable function">walk</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">===</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>tem<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>bp<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
            tem<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">walk</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            tem<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">walk</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),K={href:"https://mp.weixin.qq.com/s/1V3aHVonWBEXlNUvK3S28w",target:"_blank",rel:"noopener noreferrer"},O=s("\u52A8\u6001\u89C4\u5212\u8BE6\u89E3"),T={href:"https://mp.weixin.qq.com/s/Cw39C9MY9Wr2JlcvBQZMcA",target:"_blank",rel:"noopener noreferrer"},U=s("\u52A8\u6001\u89C4\u5212\u8BE6\u89E3\uFF08\u4FEE\u8BA2\u7248\uFF09"),X={href:"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxODQxMDM0Mw==&action=getalbum&album_id=1318881141113536512&scene=173&from_msgid=2247484731&from_itemidx=1&count=3&nolastread=1#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},Y=s("\u624B\u628A\u624B\u5237\u52A8\u6001\u89C4\u5212");function Z(F,G){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,k,n("h3",d,[v,m,n("a",b,[h,p(a)])]),g,n("h3",w,[_,y,n("a",f,[q,p(a)])]),x,n("h3",j,[A,M,n("a",V,[B,p(a)])]),N,n("h3",S,[E,P,n("a",C,[z,p(a)])]),D,n("h3",I,[L,Q,n("a",W,[H,p(a)])]),J,n("p",null,[n("a",K,[O,p(a)])]),n("p",null,[n("a",T,[U,p(a)])]),n("p",null,[n("a",X,[Y,p(a)])])])}var $=e(i,[["render",Z],["__file","\u56DE\u6587\u4E32.html.vue"]]);export{$ as default};
