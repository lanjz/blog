import{_ as p,r as o,o as l,c,b as a,d as n,a as e,e as t}from"./app-Ald2FT2K.js";const i="/lanjz/assets/defer_sync-ijkbUxi-.png",r={},d=t('<h1 id="前端优化总结" tabindex="-1"><a class="header-anchor" href="#前端优化总结" aria-hidden="true">#</a> 前端优化总结</h1><p>切入正题之前，先看下平时如何查看页面性能</p><h3 id="window-performance" tabindex="-1"><a class="header-anchor" href="#window-performance" aria-hidden="true">#</a> window.performance</h3><p><code>window.performance</code> 是用来测量网页和Web应用程序的性能api，<code>window.performance</code> 里面包含了很多属性，其中一个 <code>timing</code> 属性包含了网络、解析等一系列的时间数据</p><p>借助这个 <code>performance</code>，就可以得到我们需要的白屏和首屏时间</p><ul><li><p>DNS查询耗时 = domainLookupEnd - domainLookupStart</p></li><li><p>TCP链接耗时 = connectEnd - connectStart</p></li><li><p>request请求耗时 = responseEnd - responseStart</p></li><li><p>解析dom树耗时 = domComplete - domInteractive</p></li><li><p>白屏时间 = domloading - fetchStart</p></li><li><p>domready可操作时间 = domContentLoadedEventEnd - fetchStart</p></li><li><p>onload总下载时间 = loadEventEnd - fetchStart</p></li></ul><p>回顾一个跟本文无关的问题 DOMContentLoaded vs load</p><ul><li><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，此时不包含样式表、图像等加载完成</p></li><li><p>load 是指页面上所有的资源（图片，音频，视频等）加载完成</p></li></ul><h2 id="图片相关" tabindex="-1"><a class="header-anchor" href="#图片相关" aria-hidden="true">#</a> 图片相关</h2><h3 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a> 图片懒加载</h3><ol><li><p>首先，将图片的地址放在其它属性(data-url)中，而不是 src。</p></li><li><p>页面加载时根据 scrollTop 的值判断图片是否在可视区域,如果在可视区域，则将 data-url 属性中的值取出存放到src属性中（首屏的图片可以直接加载）。</p></li><li><p>在滚动过程中，判断图片是否在可视区域，如果在，则将 data-url 属性中的值放到 src 属性中</p></li></ol><p>如何判断图片在可视区域？</p><ol><li><p>根据滚动条高度和图片位置信息进行判断</p></li><li><p>使用 <code>Intersection Observer API</code> (推荐)</p></li></ol><h3 id="css-sprite" tabindex="-1"><a class="header-anchor" href="#css-sprite" aria-hidden="true">#</a> css sprite</h3><p>css sprite（CSS精灵或者雪碧图），即将几个小的图片合并在一张图片中，利用 <code>background-position</code> 来显示对应的图片</p><p>这种方式的优点表现在：</p><ul><li><p>减少了请求资源的请求</p></li><li><p>可以利用到缓存</p></li></ul><p>这种方式要注意合并图片的大小，过大的话反而适得其反</p><h3 id="base64" tabindex="-1"><a class="header-anchor" href="#base64" aria-hidden="true">#</a> base64</h3><p>优点：无需额外的请求</p><p>缺点：额外增加了 HTML/CSS 文件的大小</p><h3 id="字体图标" tabindex="-1"><a class="header-anchor" href="#字体图标" aria-hidden="true">#</a> 字体图标</h3><p>优点：无需额外的请求，使用灵活（可以方便得控制大小、颜色等）</p><h2 id="首屏渲染相关" tabindex="-1"><a class="header-anchor" href="#首屏渲染相关" aria-hidden="true">#</a> 首屏渲染相关</h2><h3 id="延迟加载-js-资源" tabindex="-1"><a class="header-anchor" href="#延迟加载-js-资源" aria-hidden="true">#</a> 延迟加载 JS 资源</h3><p>DOM 渲染和 JS 执行是互斥的，所以正常情况下我们应该优先进行 DOM 的渲染，优化方式：</p><ul><li><p>JS脚本的加载和执行尽量后在文档后面</p></li><li><p>加载外部 JS 资源时添加 <code>defer</code> 或 <code>async</code> 属性</p></li></ul><p><strong>defer 和 async 在网络读取这块是一样都是异步的</strong>。区别在于：</p><p><img src="'+i+`" alt=""></p><ul><li><p><code>defer</code> 属性脚本的执行是在所有元素解析完成之后，<code>DOMContentLoaded</code> 事件触发之前完成，并且当包含多个 <code>defer</code> 标签的传本时，它是按照加载顺序执行脚本的</p></li><li><p><code>async</code> 的脚本并不保证按照指定它们的先后顺序执行。对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</p></li></ul><h3 id="代码拆解" tabindex="-1"><a class="header-anchor" href="#代码拆解" aria-hidden="true">#</a> 代码拆解</h3><p>主要是为了减少代码体积</p><ul><li><p>代码模块代，开启 webpack tree shiking、开启压缩</p></li><li><p>按需加载组件</p></li></ul><h2 id="预加载-预解析" tabindex="-1"><a class="header-anchor" href="#预加载-预解析" aria-hidden="true">#</a> 预加载&amp;预解析</h2><p>通过 <code>link</code> 标签的 <code>rel</code> 属性可以实现一些资源的预加载与预解析</p><h3 id="reload" tabindex="-1"><a class="header-anchor" href="#reload" aria-hidden="true">#</a> reload</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>script<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reload</code> 一般用于当前页面要使用脚本</p><h3 id="prefetch" tabindex="-1"><a class="header-anchor" href="#prefetch" aria-hidden="true">#</a> prefetch</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与 <code>prefetch</code> 类似，但它是意图预获取一些资源，以备下一个导航/页面使用（比如，当你去到下一个页面时）。</p><p><strong>webpack code split时配置reload&amp;prefetch</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">&#39;./path/to/LoginModal.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPreload: true */</span> <span class="token string">&#39;ChartingLibrary&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dns-预解析" tabindex="-1"><a class="header-anchor" href="#dns-预解析" aria-hidden="true">#</a> DNS 预解析</h3><p>dns-prefetch (DNS 预获取) 是尝试在请求资源之前解析域名。这可能是后面要加载的文件，也可能是用户尝试打开的链接目标</p><p><strong>页面使用预解析</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>x-dns-prefetch-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--告诉浏览器，当前页面要做DNS预解析--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//bdimg.share.baidu.com<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--使用link标签来强制查询特定主机名--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>HTTP中使用预解析</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Link: &lt;https://fonts.gstatic.com/&gt;; rel=dns-prefetch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>dns-prefetch 仅对跨域域上的 DNS查找有效，因此请避免使用它来指向您的站点或域。这是因为，到浏览器看到提示时，您站点域背后的IP已经被解析</p></div><h3 id="prerender" tabindex="-1"><a class="header-anchor" href="#prerender" aria-hidden="true">#</a> prerender</h3><p>dns-prefetch 只是预解析 DNS，<code>prerender</code> 除了可以完成 DNS 的预解析外，还可以预建立 TCP 连接</p><p>粟子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.domain.com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preconnect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">crossorigin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="prerender-1" tabindex="-1"><a class="header-anchor" href="#prerender-1" aria-hidden="true">#</a> prerender</h3><p>prerender 和 prefetch 非常相似，它们都优化了可能导航到的下一页上的资源的加载，区别是 prerender 在后台渲染了整个页面及整个页面所有的资源。</p><p>粟子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prerender<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.keycdn.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="页面渲染相关优先" tabindex="-1"><a class="header-anchor" href="#页面渲染相关优先" aria-hidden="true">#</a> 页面渲染相关优先</h2><p>页面渲染的优化大致方向为</p><ul><li><p>尽量避免过多得触发重排重绘</p></li><li><p>尽量控制 DOM 元素数量</p></li></ul><p><strong>避免过多得触发重排重绘，优化方式有：</strong></p><ul><li><p>利用节流、防抖减少渲染频率</p></li><li><p>利用 <code>documentFragment</code> 处理大量的 DOM 操作</p></li><li><p>利用 <code>display:none</code> =&gt; <code>大量的 DOM 操作</code> =&gt; <code>display:block</code> 方式处理大量的 DOM 操作</p></li><li><p>使用CSS动画代替JS动画</p><p>JS 动画会触发高频率的重排重绘(但是可以使用 <code>requestAnimationFrame</code> 优化)</p><p>CSS3动画可以开始CPU硬件加速，简单动画使用 CSS3 实现代码比较简洁，但是强制使用了 GPU 的硬件加速，也会导致浏览器一直处于高负荷运转的状态，这反而会让动画变的卡顿</p></li></ul><p><strong>尽量控制 DOM 元素数量</strong></p><p>如果无法避免要出现的大量的 DOM 元素，则可使用 <code>虚拟滚动</code>（eg：<code>demo/vite-vue-app/</code>）、<code>分页</code> 等方式进行优化</p><h2 id="spa项目的首屏优化" tabindex="-1"><a class="header-anchor" href="#spa项目的首屏优化" aria-hidden="true">#</a> SPA项目的首屏优化</h2><p>SPA 首屏优化的方法：</p>`,67),u=a("li",null,[a("p",null,"服务端渲染，不过这种方式项目的复杂度就增大了很多")],-1),k=a("p",null,"预渲染，打包后给首页的挂载元素添加内容，这样浏览器在加载页面后及在框架挂载内容之前就会先显示事先添加的内容。",-1),h={href:"https://github.com/chrisvfritz/prerender-spa-plugin",target:"_blank",rel:"noopener noreferrer"},m={href:"https://codebeat.gitee.io/lanjz/Vue3/%E9%A2%84%E6%B8%B2%E6%9F%93.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="http-连接速度相关的优化" tabindex="-1"><a class="header-anchor" href="#http-连接速度相关的优化" aria-hidden="true">#</a> HTTP 连接速度相关的优化</h2><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h3><p>缓存是最最最最常见的优化手段了</p><h3 id="http正文压缩" tabindex="-1"><a class="header-anchor" href="#http正文压缩" aria-hidden="true">#</a> HTTP正文压缩</h3><p><code>Content-Encoding: gzip</code></p><p>内容编码的目的是优化传输内容的大小，提高通信传输速度</p><p>除了 gzip 还有其它的压缩方式，如 Brotil 。相比 gzip Brotli 压缩算法具有几个特点</p><ul><li><p>针对常见的 Web 资源内容，Brotli 的性能相比 Gzip 提高了 17-25%；</p></li><li><p>当 Brotli 压缩级别为 1 时，压缩率比 Gzip 压缩等级为 9（最高）时还要高；</p></li><li><p>在处理不同 HTML 文档时，Brotli 依然能够提供非常高的压缩率。</p></li></ul><p><strong>兼容性：除了 IE 和 Opera Mini 之外，几乎所有的主流浏览器都已支持 Brotli 算法</strong></p><h3 id="使用-cdn-加载资源" tabindex="-1"><a class="header-anchor" href="#使用-cdn-加载资源" aria-hidden="true">#</a> 使用 CDN 加载资源</h3><p>CDN 的使用主要是为了解决两个问题：</p><ol><li><p>突破浏览器同一时间对相同域名的连接数量限制</p></li><li><p>最近取材减少网络延迟</p></li></ol><h3 id="使用http2-0" tabindex="-1"><a class="header-anchor" href="#使用http2-0" aria-hidden="true">#</a> 使用HTTP2.0</h3><p>HTTP2 特点：</p><ul><li><p>多路复用</p></li><li><p>压缩Headers</p></li><li><p>Sever Push</p></li></ul><h2 id="减少阻塞" tabindex="-1"><a class="header-anchor" href="#减少阻塞" aria-hidden="true">#</a> 减少阻塞</h2><p>这一块的优化主要针对耗时计算任务，可使用 <code>Web Workers </code></p><h2 id="任务切片" tabindex="-1"><a class="header-anchor" href="#任务切片" aria-hidden="true">#</a> 任务切片</h2><p>使用 <code>requestIdleCallback</code> 将任务进行分批处理，但 <code>requestIdleCallback</code> 本身存在一些缺陷</p><ul><li><p>兼容性一般：如 IE、Safari 不支持</p></li><li><p>requestIdleCallback FPS只有20，常规是 60，流畅度也是低于常规</p></li></ul><h3 id="自定义实现-requestidlecallback" tabindex="-1"><a class="header-anchor" href="#自定义实现-requestidlecallback" aria-hidden="true">#</a> 自定义实现 requestIdleCallback</h3><p>实现思路：</p><ul><li><p>如何判断一帧是否有空闲？</p><p>使用 <code>requestAnimationFrame</code> 计算当前帧结束时间 <code>raf</code></p><p>估算一帧结束时间：<code>const deadline = raf + 16(1000/60)</code></p></li><li><p>发起一个调度宏任务</p></li><li><p>下一帧调度宏任务中判断当前执行时间是否有超过期时间 <code>deadlineTime - performance.now()</code></p><p>如果还有时间则执行需要分批的任务</p></li></ul><p><strong>为什么使用 MessageChannel 执行宏任务？</strong></p><p>因为 setTimeout 有阈值，4ms</p><h3 id="可以用-settimeout-么" tabindex="-1"><a class="header-anchor" href="#可以用-settimeout-么" aria-hidden="true">#</a> 可以用 setTimeout 么？</h3><p>可以！ 但没有 requestIdleCallback 好</p><p>serTimeout 只是粗暴得将任务塞到下一次宏任务执行，会跟下一次宏任务里的任务一起占用执行时间</p><p>而 requestIdleCallback 更温和点，只在一帧的空闲时间去执行</p><h3 id="自定vs原生" tabindex="-1"><a class="header-anchor" href="#自定vs原生" aria-hidden="true">#</a> 自定VS原生</h3><p>原生 <code>requestIdleCallback</code> 是像是执行一些不重要的任务，因为原生永远只在其它任务执行完之后才会执行，也就是永远在一帧的末尾处调用</p><p>而自定义的则是不包括顺序性</p><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 计算出当前帧 结束时间点</span>
<span class="token keyword">let</span> deadlineTime <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">// 保存任务</span>
<span class="token keyword">let</span> callback <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">// 建立通信</span>
<span class="token keyword">let</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> port1 <span class="token operator">=</span> channel<span class="token punctuation">.</span>port1<span class="token punctuation">;</span>
<span class="token keyword">let</span> port2 <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span>

<span class="token comment">// 接收并执行宏任务</span>
port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断当前帧是否还有空闲，即返回的是剩下的时间</span>
    <span class="token keyword">const</span> <span class="token function-variable function">timeRemaining</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> deadlineTime <span class="token operator">-</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> _timeRemain <span class="token operator">=</span> <span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 有空闲时间 且 有回调任务</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_timeRemain <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> deadline <span class="token operator">=</span> <span class="token punctuation">{</span>
            timeRemaining<span class="token punctuation">,</span> <span class="token comment">// 计算剩余时间</span>
            <span class="token literal-property property">didTimeout</span><span class="token operator">:</span> _timeRemain <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token comment">// 当前帧是否完成</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 执行回调</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">_requestIdleCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 兼容性要处理一下</span>
window<span class="token punctuation">.</span><span class="token function-variable function">_requestIdleCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token parameter">rafTime</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 下一帧结束时间点 = 开始时间点 + 一帧用时16.667ms</span>
        deadlineTime <span class="token operator">=</span> rafTime <span class="token operator">+</span> <span class="token number">16.667</span>
        <span class="token comment">// 保存任务</span>
        callback <span class="token operator">=</span> cb
        <span class="token comment">// 发送个宏任务</span>
        port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34);function b(g,f){const s=o("ExternalLinkIcon");return l(),c("div",null,[d,a("ul",null,[u,a("li",null,[k,a("p",null,[n("以 Vue 项目为便，除了自定义内容外，Vue 官方提供了 "),a("a",h,[n("PrerenderSPAPlugin"),e(s)]),n(" 插件来实现预渲染 ,具体配置方式可以参数 "),a("a",m,[n("Vue预渲染"),e(s)])])])]),v])}const x=p(r,[["render",b],["__file","前端优化总结.html.vue"]]);export{x as default};
