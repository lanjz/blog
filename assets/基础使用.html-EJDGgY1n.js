import{_ as p,r as o,o as c,c as i,b as n,a as t,d as s,e as a}from"./app-quQJY7jk.js";const l={},u=a(`<h1 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用" aria-hidden="true">#</a> 基础使用</h1><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><p>在 node 中使用 <code>process.env.NODE_ENV</code> 可以获取当前设置的变量</p><p>那如果设置呢？</p><p>出于兼容性考虑，一般使用 <code>cross-env</code> 模块设置环境变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cross-env NODE_ENV=dev node ./base.js&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从命令行接收参数" tabindex="-1"><a class="header-anchor" href="#从命令行接收参数" aria-hidden="true">#</a> 从命令行接收参数</h2><p><code>process.argv</code> 可以属性可以获取命令行参数的，它的值是一个数组</p><ul><li><p>第一个参数是 node 命令的完整路径</p></li><li><p>第二个参数是正被执行的文件的完整路径</p></li><li><p>所有其他的参数从第三个位置开始</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>node <span class="token punctuation">.</span>\\base<span class="token punctuation">.</span>js name<span class="token operator">=</span>lanjz

<span class="token comment">// [</span>
<span class="token comment">//   &#39;C:\\\\Program Files\\\\nodejs\\\\node.exe&#39;,</span>
<span class="token comment">//   &#39;D:\\\\github\\\\Hello-Word\\\\blog\\\\docs\\\\Node\\\\Demo\\\\base.js&#39;,</span>
<span class="token comment">//   &#39;name=lanjz&#39;</span>
<span class="token comment">// ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输出到命令行" tabindex="-1"><a class="header-anchor" href="#输出到命令行" aria-hidden="true">#</a> 输出到命令行</h2><p>最基础、最常用的方法是 <code>console.log()</code>，该方法会打印传入到控制台的字符串</p><p><strong>可以通过传入变量和格式说明符来格式化用语</strong></p><ul><li><p><code>%s</code> 会格式化变量为字符串</p></li><li><p><code>%d</code> 会格式化变量为数字</p></li><li><p><code>%i</code> 会格式化变量为其整数部分</p></li><li><p><code>%o</code> 会格式化变量为对象</p></li></ul><h3 id="元素计数" tabindex="-1"><a class="header-anchor" href="#元素计数" aria-hidden="true">#</a> 元素计数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> oranges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;橙子&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;橙子&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> apples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;苹果&#39;</span><span class="token punctuation">]</span>
oranges<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fruit</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
apples<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fruit</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="清空控制台" tabindex="-1"><a class="header-anchor" href="#清空控制台" aria-hidden="true">#</a> 清空控制台</h3><p><code>console.clear()</code> 会清除控制台（其行为可能取决于所使用的控制台）</p><h3 id="计算耗时" tabindex="-1"><a class="header-anchor" href="#计算耗时" aria-hidden="true">#</a> 计算耗时</h3><p>可以使用 <code>console.time([key])</code> 和 <code>console.timeEnd([key])</code> 轻松地计算函数运行所需的时间：</p><p><strong>前面后的 <code>key</code> 要一致才能对应</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;测试&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">measureDoingSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething()&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">//做点事，并测量所需的时间。</span>
  <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething()&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">measureDoingSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为输出着色" tabindex="-1"><a class="header-anchor" href="#为输出着色" aria-hidden="true">#</a> 为输出着色</h2><p>可以使用转义序列在控制台中为文本的输出着色。 转义序列是一组标识颜色的字符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\\x1b[33m%s\\x1b[0m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 将输出 黄色 的 你好</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,26),r={href:"https://github.com/chalk/chalk",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"Chalk",-1),k=a(`<ul><li><p><code>log(chalk.blue.bgRed.bold(&#39;Hello world!&#39;))</code>: 红底蓝字</p></li><li><p><code>chalk.underline.bgBlue(&#39;world&#39;)</code>：下划线</p></li><li><p><code>log(chalk.blue.bold(&#39;Hello world!&#39;))</code>: 蓝字加粗</p></li></ul><h2 id="进度条" tabindex="-1"><a class="header-anchor" href="#进度条" aria-hidden="true">#</a> 进度条</h2><p>Progress 是一个很棒的软件包，可在控制台中创建进度条。 使用 <code>yarn addl progress</code> 进行安装</p><p>以下代码段会创建一个 100 步的进度条，每 100 毫秒完成一步。 当进度条结束时，则清除定时器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> ProgressBar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;progress&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProgressBar</span><span class="token punctuation">(</span><span class="token string">&#39;  downloading [:bar] :rate/bps :percent :etas&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">complete</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 完成时填充的图案</span>
    <span class="token literal-property property">incomplete</span><span class="token operator">:</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token comment">// 未完成时填充的图案</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token comment">// 整个进度条的长度</span>
    <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token comment">// 步数</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  bar<span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bar<span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从命令行接收输入" tabindex="-1"><a class="header-anchor" href="#从命令行接收输入" aria-hidden="true">#</a> 从命令行接收输入</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readline&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdout
<span class="token punctuation">}</span><span class="token punctuation">)</span>

readline<span class="token punctuation">.</span><span class="token function">question</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你叫什么名字?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  readline<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会询问用户名，当输入了文本并且用户按下回车键时，则会发送问候语</p>`,8),v={href:"https://github.com/SBoudrias/Inquirer.js",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"inquirer",-1),b=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inquirer&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> questions <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;你叫什么名字?&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">answers</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你好 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>answers<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="直接执行node-modeles安装的包" tabindex="-1"><a class="header-anchor" href="#直接执行node-modeles安装的包" aria-hidden="true">#</a> 直接执行node_modeles安装的包</h2><p>使用 <code>npx</code></p>`,3);function g(h,f){const e=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[d,t(e)]),s(" 是一个帮助我们简单得控制输出着色的库，除了为其着色外，它还有助于其他样式的设置（例如使文本变为粗体、斜体或带下划线）")]),k,n("p",null,[s("最简单的方式是使用 "),n("a",v,[m,t(e)]),s(" 软件包，其在 API 方面非常相似")]),b])}const y=p(l,[["render",g],["__file","基础使用.html.vue"]]);export{y as default};
