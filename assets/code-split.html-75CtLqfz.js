import{_ as n,o as s,c as a,e as t}from"./app-tEWqIxV0.js";const p={},e=t(`<h1 id="code-split" tabindex="-1"><a class="header-anchor" href="#code-split" aria-hidden="true">#</a> Code-Split</h1><p>在 Webpack 启动的项目中，使用 <code>import()</code> 方法就可以实现动态加载模块，被动态加载的模块会被 Webpack 分割成独立文件</p><p>通过一个粟子来看下 Webpack 打包后的文件是如何处理分割后模块的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AAAAAAAAAAAAA&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/utils&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token constant">MB</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ./modules/utils</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">MA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行MA&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">MB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行MB&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后在 <code>dist</code> 文件下生成两个JS文件: <code>index.bundle.js</code> 和 <code>src_modules_utils_js.bundle.js</code></p><h2 id="bundle-内容简析" tabindex="-1"><a class="header-anchor" href="#bundle-内容简析" aria-hidden="true">#</a> bundle 内容简析</h2><p><code>index.bundle.js</code> 大致内容为各种各样的 <code>__webpack_require__</code> 属性和方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> __webpack_modules__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> __webpack_module_cache__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> inProgress<span class="token punctuation">,</span> dataWebpackPrefix<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    __webpack_require__<span class="token punctuation">.</span>m <span class="token operator">=</span> __webpack_modules__
    __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
    __webpack_require__<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token parameter">chunkId</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token punctuation">)</span>
    _webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">l</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> done<span class="token punctuation">,</span> key<span class="token punctuation">,</span> chunkId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        __webpack_require__<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token comment">/*! import() */</span> <span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">__webpack_require__</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">,</span> <span class="token string">&quot;./src/output/modules/utils.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token constant">MB</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先大概认识一下几个比较重要的属性和方法：</p><h3 id="webpack-require" tabindex="-1"><a class="header-anchor" href="#webpack-require" aria-hidden="true">#</a> <strong><strong>webpack_require</strong></strong></h3><p>实现模块化的核心方法，作用就是返回模块导出的方法（<code>exports</code>），首先会尝试从 <code>__webpack_module_cache__</code> 中获取，如果 <code>__webpack_module_cache__</code> 中不存在，则通过执行 <code>__webpack_modules__[e](r, r.exports, __webpack_require__)</code> 获取 <code>exports</code></p><h3 id="webpack-modules" tabindex="-1"><a class="header-anchor" href="#webpack-modules" aria-hidden="true">#</a> <strong><strong>webpack_modules</strong></strong></h3><p>当分离的文件下载完成后，模块中的要执行的内容将保存到 <code>__webpack_modules__</code> 对象中，所以先根据打包的例子（<code>src_modules_utils_js.bundle.js</code>）分析下其内容</p><p><code>self.webpackChunkmind_map</code> 等于 <code>window.webpackChunkmind_map</code> 是在入口文件 <code>index.bundle</code> 中的定义的， <code>src_modules_utils_js.bundle.js</code> 的作用就是向 <code>webpackChunkmind_map</code> 属性 <code>push</code>了一个长度为 2 的数组，上文有注释这个 <code>push</code> 是 <code>webpack</code> 重写后的 <code>push</code>，这个数组的内容为：</p><p><code>0</code>： - 模块名</p><p><code>1</code>： - 函数：<code>Function(__unused_webpack_module, __webpack_exports__, __webpack_require__)</code>，这个函数要执行代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>__webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span>
__webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">MA</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">MA</span><span class="token punctuation">,</span>
    <span class="token function-variable function">MB</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">MB</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token constant">MA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行MA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token constant">MB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行MB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  
<span class="token comment">// __webpack_require__.d 是 index.bundle.js 中定义的方法</span>
  __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _ <span class="token keyword">in</span> r<span class="token punctuation">)</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span>
          <span class="token literal-property property">get</span><span class="token operator">:</span> r<span class="token punctuation">[</span>_<span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点看下第二行执行的方法 <code>__webpack_require__.d</code> ，<code>__webpack_require__.d</code> 的作用将当前文件中的导出的方法映射到当前参数 <code>__webpack_exports__</code> 中</p><p>也就是上文 <code>__webpack_require__</code> 介绍中执行 <code>__webpack_modules__[e]</code> 的作用</p><h3 id="webpack-module" tabindex="-1"><a class="header-anchor" href="#webpack-module" aria-hidden="true">#</a> <strong><strong>webpack_module</strong></strong></h3><p><code>__webpack_module__</code> 是一个对象，<code>key</code> 为模块ID， <code>value</code> 为函数，这个函数就是执行模块内容的方法.eg:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./index.js 文件的内容如下</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;lanjz&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 该文件打包后结果将保存到</span>
__webpack_modules__<span class="token punctuation">[</span><span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&#39;console.log(lanjz)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack-require-m" tabindex="-1"><a class="header-anchor" href="#webpack-require-m" aria-hidden="true">#</a> <strong><strong>webpack_require</strong>.m</strong></h3><p>源代码定义为 <code>__webpack_require__.m = __webpack_module__</code>，所以指向 <code>__webpack_module__</code></p><h3 id="webpack-module-cache" tabindex="-1"><a class="header-anchor" href="#webpack-module-cache" aria-hidden="true">#</a> <strong><strong>webpack_module_cache</strong></strong></h3><p><code>__webpack_module_cache__</code> 也是一个对象，<code>key</code> 为模块ID，<code>value</code> 保存对应模块的 <code>export</code> 内容. eg:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>__webpack_module_cache__<span class="token punctuation">[</span><span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;./index.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 标识这个模块是否已加载 </span>
  <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 模块的导出内容 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webpack-require-c" tabindex="-1"><a class="header-anchor" href="#webpack-require-c" aria-hidden="true">#</a> <strong><strong>webpack_require</strong>.c</strong></h3><p>源代码定义为 <code>__webpack_require__.c = __webpack_module_cache__</code>，所以指向 <code>__webpack_module_cache__</code></p><h3 id="webpack-require-f-j" tabindex="-1"><a class="header-anchor" href="#webpack-require-f-j" aria-hidden="true">#</a> <strong><strong>webpack_require</strong>.f.j</strong></h3><p><code>__webpack_require__.f.j(chunkId, promises)</code> 是加载模块前的准备工作，处理模块加载或安装失败的回调</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>__webpack_require__<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function-variable function">j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId<span class="token punctuation">,</span> promises</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// installedChunkData 是一个标识，标识当前这个模块是否已经安装</span>
        <span class="token comment">// __webpack_require__.o(e, r)等同于Object.prototype.hasOwnProperty.call(e, r)</span>
		<span class="token keyword">var</span> installedChunkData <span class="token operator">=</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span> <span class="token operator">?</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
        <span class="token comment">// 0 表示已经安装了</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>installedChunkData <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 如果当前有 installedChunkData 表示当前正在获取中，那之返回之前的 promise，installedChunkData下面的 else 分支会介绍</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			    <span class="token comment">// 这是判断 chunk 类型的，比如 federation 的 Chunk，就不会进入该杂质</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token comment">// 创建一个 installedChunkData 保存到 installedChunks[chunkId] 中</span>
                    <span class="token comment">// installedChunkData[0] = promise回调的 resolve方法</span>
                    <span class="token comment">// installedChunkData[1] = promise回调的 reject方法</span>
                    <span class="token comment">// installedChunkData[2] = promise</span>
					<span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
						installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>

					<span class="token comment">// 接接完整的模块地址</span>
					<span class="token keyword">var</span> url <span class="token operator">=</span> __webpack_require__<span class="token punctuation">.</span>p <span class="token operator">+</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">u</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token comment">// create error before stack unwound to get useful stacktrace later</span>
					<span class="token keyword">var</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 创建加载后的回调，这里更像是处理加载模块失败的处理</span>
					<span class="token keyword">var</span> <span class="token function-variable function">loadingEnded</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 当前模块是 installedChunks 中的模块</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 获取当前模块对应的安装信息</span>
							installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">;</span>
                            <span class="token comment">// 如果非 0 将原始内容赋值初始状态</span>
							<span class="token keyword">if</span><span class="token punctuation">(</span>installedChunkData <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
							<span class="token comment">// 如果值为 [resove, reject, promise]，说明当前的模块没有被正常加载，那么执行错误</span>
							<span class="token keyword">if</span><span class="token punctuation">(</span>installedChunkData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
								<span class="token keyword">var</span> errorType <span class="token operator">=</span> event <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;load&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;missing&#39;</span> <span class="token operator">:</span> event<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
								<span class="token keyword">var</span> realSrc <span class="token operator">=</span> event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token punctuation">;</span>
								error<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">&#39;Loading chunk &#39;</span> <span class="token operator">+</span> chunkId <span class="token operator">+</span> <span class="token string">&#39; failed.\\n(&#39;</span> <span class="token operator">+</span> errorType <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> realSrc <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
								error<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;ChunkLoadError&#39;</span><span class="token punctuation">;</span>
								error<span class="token punctuation">.</span>type <span class="token operator">=</span> errorType<span class="token punctuation">;</span>
								error<span class="token punctuation">.</span>request <span class="token operator">=</span> realSrc<span class="token punctuation">;</span>
								<span class="token comment">// installedChunkData[1] = reject</span>
								installedChunkData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span><span class="token punctuation">;</span>
                    <span class="token comment">// 创建 script 加载模块内容</span>
					__webpack_require__<span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> loadingEnded<span class="token punctuation">,</span> <span class="token string">&quot;chunk-&quot;</span> <span class="token operator">+</span> chunkId<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// </span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数体有个直接 <code>if(true)</code> 条件，这个 <code>if</code> 是判断 chunk 类型的，当 Webpack 包含了 <code>federation</code> 配置时，共享的 Chunk 和外链的 Chunk 将不进入当前条件分支而是直接执行 <code>installedChunks[chunkId] = 0</code>，至于 <code>federation</code> 的 Chunk 怎么处理这里先不分析</p><p>这里要注意 <code>loadingEnded</code> 方法，根据代码内容可以发现主要是处理模块加载失败或安装失败的情况，那么成功的回调在哪处理的呢？ 成功的回调在 <code>__webpack_require__.l</code> 方法会处理</p><h3 id="webpack-require-e-chunkid-和-webpack-require-f" tabindex="-1"><a class="header-anchor" href="#webpack-require-e-chunkid-和-webpack-require-f" aria-hidden="true">#</a> <strong><strong>webpack_require__e(chunkId)和__webpack_require</strong>.f</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>__webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">promises<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		__webpack_require__<span class="token punctuation">.</span>f<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">,</span> promises<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> promises<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__webpack_require__.f</code> 是一个对象，这个对象包含的属性都是跟获取模块内容的方法，比如上文的 <code>__webpack_require__.f</code>，除了 <code>f</code> 属性外还有 <code>remote</code>、<code>consume</code> 属性，都是获取模块的方法，大致区别：</p><ul><li><p><code>f</code> 是获取当前项目打包的模块</p></li><li><p><code>remote</code> 和 <code>consume</code> 这两个方法跟 <code>federation Chunk</code> 有关系</p></li></ul><p><code>__webpack_require__.e</code> 是执行 <code>__webpack_require__.f</code> 的地方了，虽然这里看上去是会使用 <code>f</code>、<code>remote</code>、<code>consume</code> 都去获取 Chunk，但是这个方法里面会根据当前 Chunk 类型，不是自己支持的类型直接 <code>return</code>，所以只会执行其中的一种</p><p>总之 <code>__webpack_require__e(chunkId)</code> 和 <code>__webpack_require__.f</code> 的作用就是发起模块获取</p><h3 id="webpack-require-l" tabindex="-1"><a class="header-anchor" href="#webpack-require-l" aria-hidden="true">#</a> <strong><strong>webpack_require</strong>.l</strong></h3><p>上文中的 <code>__webpack_require__.f.j</code> 方法 最后会调用 <code>__webpack_require__.l(url, loadingEnded, &quot;chunk-&quot; + chunkId, chunkId)</code> 方法下载模块</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* webpack/runtime/load script */</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 保存下载成功后的回调</span>
	<span class="token keyword">var</span> inProgress <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">var</span> dataWebpackPrefix <span class="token operator">=</span> <span class="token string">&quot;base:&quot;</span><span class="token punctuation">;</span>
	<span class="token comment">// loadScript function to load a script via script tag</span>
	__webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">l</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> done<span class="token punctuation">,</span> key<span class="token punctuation">,</span> chunkId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果已经包含模块下载，则添加一个回调，这里情况可能是针对不同的地方同一时间调用了相同的模块，那就是需要收集多个回调</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>inProgress<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> inProgress<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
		<span class="token keyword">var</span> script<span class="token punctuation">,</span> needAttach<span class="token punctuation">;</span>
        
		<span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是已经存在相同的 script 标签 </span>
			<span class="token keyword">var</span> scripts <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;script&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scripts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">var</span> s <span class="token operator">=</span> scripts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> url <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-webpack&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> dataWebpackPrefix <span class="token operator">+</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> script <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 动态创建 scripts 标签</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>script<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			needAttach <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
			script<span class="token punctuation">.</span>charset <span class="token operator">=</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">;</span>
			script<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;nonce&quot;</span><span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-webpack&quot;</span><span class="token punctuation">,</span> dataWebpackPrefix <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
			script<span class="token punctuation">.</span>src <span class="token operator">=</span> url<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
        <span class="token comment">// 添加回调</span>
		inProgress<span class="token punctuation">[</span>url<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>done<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建模块下载成功的回调</span>
		<span class="token keyword">var</span> <span class="token function-variable function">onScriptComplete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token comment">// avoid mem leaks in IE.</span>
			script<span class="token punctuation">.</span>onerror <span class="token operator">=</span> script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">var</span> doneFns <span class="token operator">=</span> inProgress<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
			<span class="token keyword">delete</span> inProgress<span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
			script<span class="token punctuation">.</span>parentNode <span class="token operator">&amp;&amp;</span> script<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 除移当前动态创建的 script 标签</span>
			doneFns <span class="token operator">&amp;&amp;</span> doneFns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">prev</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token punctuation">;</span>
        <span class="token comment">// 处理起时的情况</span>
		<span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">onScriptComplete</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;timeout&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">target</span><span class="token operator">:</span> script <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		script<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token function">onScriptComplete</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> script<span class="token punctuation">.</span>onerror<span class="token punctuation">)</span><span class="token punctuation">;</span>
		script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">onScriptComplete</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> script<span class="token punctuation">.</span>onload<span class="token punctuation">)</span><span class="token punctuation">;</span>
		needAttach <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到 DOM</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>onScriptComplete</code> 就是处理上文中 <code>__webpack_require__.f.j</code> 设置的回调中</p><h3 id="webpackjsonpcallback" tabindex="-1"><a class="header-anchor" href="#webpackjsonpcallback" aria-hidden="true">#</a> webpackJsonpCallback()</h3><p><code>webpackJsonpCallback</code> 是一个挂载到全局变量(window、global、self) 上的全局方法，用于保存模块的 <code>chunk</code> 内容。这个方法执行时，会把 <code>chunk</code> 内部包含的模块及模块的执行方法收集到 <code>__webpack_modules__</code> 中</p><h2 id="模块加载过程分析" tabindex="-1"><a class="header-anchor" href="#模块加载过程分析" aria-hidden="true">#</a> 模块加载过程分析</h2><p>首先粟子中的主文件编译后的代码变成以下样子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;按钮&#39;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	__webpack_require__<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token comment">/*! import() */</span> <span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">__webpack_require__</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">,</span> <span class="token comment">/*! ./modules/utils */</span> <span class="token string">&quot;./src/output/modules/utils.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token constant">MB</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来通过 [模块下载]、[模块加载完成]、[模块加载完成之后] 三个阶段来分析按需加载的过程</p><h3 id="模块下载" tabindex="-1"><a class="header-anchor" href="#模块下载" aria-hidden="true">#</a> 模块下载</h3><p>当点击按钮的时候将调用 <code>__webpack_require__.e(&quot;src_modules_utils_js&quot;)</code> 获取 <code>src_modules_utils_js</code> 模块<br> 通过断点此时 <code>__webpack_require__.e</code> 返回 <code>trackBlockingPromise(require.e(chunkId))</code> 结果，根据代码 <code>trackBlockingPromise</code> 返回的是一个 promise，<code>trackBlockingPromise</code> 的参数传是的 <code>require.e(chunkId)</code>，也就是 <code>__webpack_require__.e</code> 方法的结果<br> (这里有点不明白为什么 <code>_webpack_require__.e</code> 执行时不是直接执行 <code>_webpack_require__.e</code> 呢？)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  __webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span>f<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">promises<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 真正获取某模块的方法 e=&gt;模块名 r =&gt; 当前Promise[]</span>
          __webpack_require__<span class="token punctuation">.</span>f<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">,</span> promises<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> promises
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__webpack_require__.e</code> 返回的是一个 promisesAll (数组{promise}\`)</p><p><code>__webpack_require__.e</code> 遍历后会使用 <code>__webpack_require__.f.j(chunkId, promises)</code> 方法获取 <code>src_modules_utils_js</code> 模块</p><p><code>__webpack_require__.f.j</code> 再通过调用 <code>__webpack_require__.l</code> 动态创建 <code>script</code> 加载模块，同时创建当前下载任务的 <code>promise</code> 保存到 <code>promises</code> 中</p><p>到这里 <code>__webpack_require__.e(/*! import() */ &quot;src_output_modules_utils_js&quot;).then()</code> 工作就做完了，之后就是模块下载完成的执行 <code>then</code> 中的回调，然后就是待上面的 <code>promises</code> 的结果</p><h3 id="模块加载完成" tabindex="-1"><a class="header-anchor" href="#模块加载完成" aria-hidden="true">#</a> 模块加载完成</h3><p>粟子中的模块 <code>src_output_modules_utils_js</code> 加载完成后，得到的内容为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
 <span class="token string-property property">&quot;./src/output/modules/utils.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;__webpack_require__.r(__webpack_exports__); __webpack_require__.d(__webpack_exports__, {default: () =&gt; (__WEBPACK_DEFAULT_EXPORT__) }); const __WEBPACK_DEFAULT_EXPORT__ = ({\\r\\n\\tMB: function (){\\r\\n\\t\\tconsole.log(&#39;MB&#39;)\\r\\n\\t}\\r\\n});\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 格式一下代码</span>
<span class="token punctuation">(</span>self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
         <span class="token string-property property">&quot;./src/output/modules/utils.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块加载后就会直接执行 <code>self[&quot;webpackChunkbase&quot;] || []).push</code> 方法，这里的 <code>push</code> 不是简单的原生 <code>Array.push</code>， Webpack 做了 <code>webpackChunkbase.push</code> 做了额外的处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果已经存在 self[&quot;webpackChunkbase&quot;] 则直接取，否则创建新数据</span>
<span class="token keyword">var</span> chunkLoadingGlobal <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
chunkLoadingGlobal<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token function">webpackJsonpCallback</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个是啥意思？</span>
<span class="token comment">// chunkLoadingGlobal.push 执行的 webpackJsonpCallback 方法</span>
chunkLoadingGlobal<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> chunkLoadingGlobal<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>chunkLoadingGlobal<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行就是针对如果当前项目应用了多套 Webpack 打包的输出，那么 <code>self[&quot;webpackChunkbase&quot;]</code> 就可能已经存了<br> 第二行中 <code>bind</code> 的参数是 0 ，表示当前是第一个 Webpack 打包环境，如果当前应用的是第二个 Webpack 打包环境，那么参数为 第一个打包环境<br> 第三行重写 <code>push</code> 方法<br> 有点绕，重点是子模块加后实在的 <code>push</code> 为 <code>webpackJsonpCallback</code> 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// parentChunkLoadingFunction 父级环境</span>
<span class="token comment">// data 为子模块加后的 push 的数据</span>
<span class="token keyword">var</span> <span class="token function-variable function">webpackJsonpCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parentChunkLoadingFunction<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// chunkIds 是模块名 moreModules 是模块信息 {模块名：模块内容}</span>
    <span class="token keyword">var</span> <span class="token punctuation">[</span>chunkIds<span class="token punctuation">,</span> moreModules<span class="token punctuation">,</span> runtime<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token comment">// 添加 &quot;moreModules&quot; 到 modules object,</span>
    <span class="token keyword">var</span> moduleId<span class="token punctuation">,</span> chunkId<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历模块信息，将模块保存到 \`__webpack_require__.m\` 对象中，_webpack_require__.m 就是 \`__webpack_module__\`</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>moduleId <span class="token keyword">in</span> moreModules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>moreModules<span class="token punctuation">,</span> moduleId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            __webpack_require__<span class="token punctuation">.</span>m<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> moreModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>runtime<span class="token punctuation">)</span> <span class="token function">runtime</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>parentChunkLoadingFunction<span class="token punctuation">)</span> <span class="token function">parentChunkLoadingFunction</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果有父环境，则止父环境也保存当前的模块，这样就可以复用了</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> chunkIds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chunkId <span class="token operator">=</span> chunkIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// installedChunks 保存各个模块加后的 promise 回调</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行 resolve()</span>
        <span class="token punctuation">}</span>
        installedChunks<span class="token punctuation">[</span>chunkIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前模块标志为已加载</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面方法重点在于两个地方：</p><ol><li><p>遍历 <code>moreModules</code>，将当前下载到的模块内容保存到 <code>__webpack_module__</code> 中</p></li><li><p>看到执行的 <code>installedChunks</code>，每个模块发起下载任务后都保存 <code>pending</code> 状态的 Promise 到 <code>installedChunks</code>，这里另载完成后就就会执行 <code>promise.resolve()</code> 执行回调</p></li></ol><p>之后就是进入子模块加载成功后的阶段</p><h3 id="模块加载完成之后" tabindex="-1"><a class="header-anchor" href="#模块加载完成之后" aria-hidden="true">#</a> 模块加载完成之后</h3><p>模块加载成功，模块内容保存到了 <code>__webpack_module__</code> 中，如果执行当前模块的任务状态 <code>resolve</code>. 然后就是执行 <code>__webpack_require__.e(/*! import() */ &quot;src_output_modules_utils_js&quot;).then()</code> 的调回了. <code>then</code> 回调执行 <code>__webpack_require__.bind(__webpack_require__, &quot;./src/output/modules/utils.js&quot;)</code></p><p><code>then</code> 方法执行的是 <code>__webpack_require__</code> 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 保存模块的 exports</span>
<span class="token keyword">var</span> __webpack_module_cache__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">__webpack_require__</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 如果缓存中存在当前模块的结果，直接返回</span>
	<span class="token keyword">var</span> cachedModule <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule<span class="token punctuation">.</span>error <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> cachedModule<span class="token punctuation">.</span>error<span class="token punctuation">;</span>
		<span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 创建新的模块信息到缓存中</span>
	<span class="token keyword">var</span> module <span class="token operator">=</span> __webpack_module_cache__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">id</span><span class="token operator">:</span> moduleId<span class="token punctuation">,</span>
		<span class="token literal-property property">loaded</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// Execute the module function</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行模块方法，这里的 factory 传的就是下载后的模块内容了</span>
		<span class="token keyword">var</span> execOptions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> moduleId<span class="token punctuation">,</span> <span class="token literal-property property">module</span><span class="token operator">:</span> module<span class="token punctuation">,</span> <span class="token literal-property property">factory</span><span class="token operator">:</span> __webpack_modules__<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">require</span><span class="token operator">:</span> __webpack_require__ <span class="token punctuation">}</span><span class="token punctuation">;</span>
		__webpack_require__<span class="token punctuation">.</span>i<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">handler</span><span class="token punctuation">(</span>execOptions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		module <span class="token operator">=</span> execOptions<span class="token punctuation">.</span>module<span class="token punctuation">;</span>
        <span class="token comment">// 这里执行模块的代码内容</span>
		execOptions<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> execOptions<span class="token punctuation">.</span>require<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		module<span class="token punctuation">.</span>error <span class="token operator">=</span> e<span class="token punctuation">;</span>
		<span class="token keyword">throw</span> e<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 标记模块加载完成</span>
	module<span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token comment">// Return the exports of the module</span>
	<span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个新的模块信息并保存到 <code>__webpack_module_cache__</code> 对象中，之后就执行 <code>execOptions.factory.call(module.exports, module, module.exports, execOptions.require)</code> 回顾一下 <code>src_output_modules_utils_js</code> 加载完成后内容为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
 <span class="token string-property property">&quot;./src/output/modules/utils.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">&quot;__webpack_require__.r(__webpack_exports__); __webpack_require__.d(__webpack_exports__, {default: () =&gt; (__WEBPACK_DEFAULT_EXPORT__) }); const __WEBPACK_DEFAULT_EXPORT__ = ({\\r\\n\\tMB: function (){\\r\\n\\t\\tconsole.log(&#39;MB&#39;)\\r\\n\\t}\\r\\n});\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 格式一下代码</span>
<span class="token punctuation">(</span>self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
         <span class="token string-property property">&quot;./src/output/modules/utils.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">__unused_webpack_module<span class="token punctuation">,</span> __webpack_exports__<span class="token punctuation">,</span> __webpack_require__</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>factory</code> 就是对应就是执行 <code>((__unused_webpack_module, __webpack_exports__, __webpack_require__) =&gt; {})</code> 方法，执行代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>__webpack_require__<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">)</span> <span class="token comment">// 定义属性信息，忽略</span>
__webpack_require__<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>__webpack_exports__<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>__WEBPACK_DEFAULT_EXPORT__<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> __WEBPACK_DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function-variable function">MB</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>__webpack_require__<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码就是将 <code>modeule.exports</code> 作为参数传入子模块的执行内容中，子模块执行过程中会通过 <code>__webpack_require__.d</code> 方法将当前模块导出的 <code>exports</code> 对象保存到 <code>modeule.exports</code> 中，最后就返回 <code>modeule.exports</code></p><p>返回后就是回到入口JS 文件中，执行最后的 <code>then</code> 回调 <code>console.log(&#39;MB&#39;, MB)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	__webpack_require__<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token comment">/*! import() */</span> <span class="token string">&quot;src_output_modules_utils_js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">__webpack_require__</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>__webpack_require__<span class="token punctuation">,</span> <span class="token string">&quot;./src/output/modules/utils.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token constant">MB</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
		<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="prefetch-preload-modules" tabindex="-1"><a class="header-anchor" href="#prefetch-preload-modules" aria-hidden="true">#</a> Prefetch/Preload modules</h2><p><code>Prefetch</code> 和 <code>Preload</code> 的区别</p><ul><li><p><code>Preload</code> 在当前页面可能会用到，资源会与父块资源并行加载</p></li><li><p><code>Prefetch</code> 可能是用于其它页面使用，资源会在当前页面空闲资源加载完后在空闲时间开始</p></li></ul><p><strong>Prefetch</strong></p><p>将之前代码改造如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AAAAAAAAAAAAA&#39;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPrefetch: true */</span> <span class="token string">&#39;./modules/utils&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token constant">MB</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包后代码将会立即执行一个 <code>__webpack_require__.x()</code> 方法, 然后执行 <code>__webpack_require__.F.j</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// __webpack_require__.F.j</span>
__webpack_require__<span class="token punctuation">.</span><span class="token constant">F</span><span class="token punctuation">.</span><span class="token function-variable function">j</span> <span class="token operator">=</span> <span class="token parameter">_</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>__webpack_require__<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">===</span> e<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">[</span>_<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">var</span> r <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;link&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                __webpack_require__<span class="token punctuation">.</span>nc <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;nonce&quot;</span><span class="token punctuation">,</span> __webpack_require__<span class="token punctuation">.</span>nc<span class="token punctuation">)</span>
                r<span class="token punctuation">.</span>rel <span class="token operator">=</span> <span class="token string">&quot;prefetch&quot;</span>
                r<span class="token punctuation">.</span>as <span class="token operator">=</span> <span class="token string">&quot;script&quot;</span>
                r<span class="token punctuation">.</span>href <span class="token operator">=</span> __webpack_require__<span class="token punctuation">.</span>p <span class="token operator">+</span> __webpack_require__<span class="token punctuation">.</span><span class="token function">u</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span>
                document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__webpack_require__.F.j</code> 的作用就是动态创建了一个 <code>&lt;link rel=&quot;prefetch&quot; as=&quot;script&quot; href=&quot;http://localhost:63342/Hello-Word/mind-map-js/dist/src_modules_utils_js.bundle.js&quot;&gt;</code> 到 <code>document</code> 中，这将指示浏览器在空闲时间预取 <code>src_modules_utils_js.bundle.js</code> 文件</p><p><strong>Prefetch</strong></p><p>使用 <code>Prefetch</code> 需要添加配置 <code>preload-webpack-plugin</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;AAAAAAAAAAAAA&#39;</span><span class="token punctuation">)</span>

document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackPreload: true */</span> <span class="token string">&#39;./modules/utils&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token constant">MB</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token constant">MB</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>Prefetch</code> 主要是对 <code>index.html</code> 添加 <code>link</code> 标签，跟分割模块的逻辑没啥影响</p><h2 id="手写模块化加载" tabindex="-1"><a class="header-anchor" href="#手写模块化加载" aria-hidden="true">#</a> 手写模块化加载</h2><p>写个简单的 Demo 方便理解 Webpack 的模块化原理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 用于保存模块</span>
	<span class="token keyword">let</span> _resolve <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">// 获取模块，如果已经加载过则直接取，如果未加载过则直接 JSONP 加载模块</span>
    <span class="token keyword">function</span> <span class="token function">getModule</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                _resolve <span class="token operator">=</span> resolve
                <span class="token function">JSonP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 子模块会调用这个方法，保存下载的模块到 modules</span>
    <span class="token keyword">var</span> <span class="token function-variable function">webpackJsonpCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 关于这行的作用，直接看后面的解释，当前选略过</span>
            <span class="token function">parent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        modules<span class="token punctuation">[</span>data<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>content
        _resolve<span class="token operator">&amp;&amp;</span><span class="token function">_resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">var</span> chunkLoadingGlobal <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	chunkLoadingGlobal<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> chunkLoadingGlobal<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>chunkLoadingGlobal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 业务代码</span>
	<span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
	btn<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;按钮&#39;</span>
	btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token function">getModule</span><span class="token punctuation">(</span><span class="token string">&#39;module1&#39;</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;成功加载了模块MB&#39;</span><span class="token punctuation">,</span> modules<span class="token punctuation">[</span><span class="token string">&#39;module1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;An error occurred while loading theS hllComponent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 模块子模块加截完成</span>
<span class="token keyword">function</span> <span class="token function">JSonP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;module1&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&quot;我是module1&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q&amp;A</h2><p><strong>当项目存在多个主模块</strong></p><p>从上文分析我们知道当子模块加载后会执行一个全局的方法 <code>(self.webpackChunkmind_map = self.webpackChunkmind_map || []).push()</code>，将当前模块内容保存到主模块 <code>webpack_module_cache</code> 中。</p><p>那么问题了，如果当前页面同时加了多个被 webpack 打包出来的文件，也就是存在多个主模块，这里每个主模块都实现了相同的模块加载的方法，那么当子模块加载的时候怎么知道当前添加到哪个主文件中呢，按正常的逻辑 <code>self.webpackChunkmind_map</code> 应该是指向最后一个赋值的地方，那么无论哪个主模块加载的子模块都将添加到最后个加载的主模块中，如果真这样的话肯定会有问题，webpack 考虑到了这一点，所以注意一下这行代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token keyword">var</span> chunkLoadingGlobal <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">[</span><span class="token string">&quot;webpackChunkbase&quot;</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	chunkLoadingGlobal<span class="token punctuation">.</span>push <span class="token operator">=</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> chunkLoadingGlobal<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>chunkLoadingGlobal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假设当前有页面加载了两个 webpack 打包出来的文件，第一个主模块运行时没有 <code>self[&quot;webpackChunkbase&quot;]</code>，所以 <code>chunkLoadingGlobal = []</code>，将这个方法通过下面那行的 <code>bind</code>保存到 <code>webpackJsonpCallback</code> 参数中</p><p>当加载了第二个主模块时 <code>self[&quot;webpackChunkbase&quot;] = 之前模块的chunkLoadingGlobal</code>，也通过 <code>bind</code> 保存到 <code>webpackJsonpCallback</code> 参数中</p><p>之后当子模块加载完后执行 <code>webpackJsonpCallback</code> 方法，看代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> <span class="token function-variable function">webpackJsonpCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">parent<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 有parent，执行之前的 webpackJsonpCallback 方法</span>
            <span class="token function">parent</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        modules<span class="token punctuation">[</span>data<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>content
        _resolve<span class="token operator">&amp;&amp;</span><span class="token function">_resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parent</code> 表示之前模块的 <code>webpackJsonpCallback</code> 方法，有的话就执行。也就是说某个主模块加载的子模块，将会被所有主模块收集！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>webpack 实现自己实现了一个 <code>_webpack_reuqire_</code> 来模拟 <code>import</code> 的导入，并定义了一个全局属性<code>__webpack_modules__</code> 来保存模块内容</p><p>加载模块时使用动态创建 <code>script</code> 标签的方式来加载模块，被加载的模块在加载运行时，会添加到 <code>__webpack_modules__</code> 对于中，之后再执行模块内容的方法保存模块的 <code>exports</code> 导出结果。大致过程为：</p><ul><li><p>Webpack 打包后的文件定义了一个 <code>__webpack_modules__</code> 对象，用于存储模块的执行内容。<code>key</code> 值对应模块的 <code>id</code>， <code>value</code> 对应模块的模块内容</p></li><li><p>Webpack 打包后的文件定义了一个 <code>_webpack_module_cache__</code> 是一个对象，用于缓存模块的 <code>export</code> 导出结果。<code>key</code> 值对应模块的 <code>id</code>，<code>value</code> 对应模块的输出</p></li><li><p>Webpack 还提供了一个 <code>__webpack_require__</code> 对象，可用于获取模块的输出。源代码中的 <code>import xx from &#39;xxx&#39;</code>,最终会被转化为 <code>__webpack_require__.[xx](...)</code> 的形式</p></li><li><p>对于每一个抽离出来的模块 Webpack 会把这个模块打包为一个含自执行方法的 JS 文件。当加载这个 JS 文件的时候会执行模块对应的相关代码，将对内保存到 <code>__webpack_modules__</code> 对象中</p></li><li><p>之后会执行模块的代码内容，输出 <code>exports</code> 导出结果同时保存到 <code>__webpack_module_cache__</code></p></li></ul>`,109),o=[e];function c(u,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","code-split.html.vue"]]);export{k as default};
