import{_ as n,o as s,c as a,e}from"./app-lkvzo8Ck.js";const p={},t=e(`<h1 id="vue3相比vue2使用差异" tabindex="-1"><a class="header-anchor" href="#vue3相比vue2使用差异" aria-hidden="true">#</a> Vue3相比Vue2使用差异</h1><h2 id="挂载应用及注册全局api" tabindex="-1"><a class="header-anchor" href="#挂载应用及注册全局api" aria-hidden="true">#</a> 挂载应用及注册全局API</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 2.0</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token comment">// 全局混入</span>
Vue<span class="token punctuation">.</span><span class="token function">minxin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 注册全局指令</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 注册全局组件</span>
Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component-name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 注册插件</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//绑定的全局方法和变量</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx
<span class="token comment">// 挂载</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    router<span class="token punctuation">,</span>
    <span class="token function-variable function">render</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 3.0</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 混</span>
app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 注册全局组件</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;SearchInput&#39;</span><span class="token punctuation">,</span> SearchInputComponent<span class="token punctuation">)</span>
<span class="token comment">// 注册全局指令</span>
app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> FocusDirective<span class="token punctuation">)</span>
<span class="token comment">// 注册插件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>LocalePlugin<span class="token punctuation">)</span>
<span class="token comment">// 添加全局属性</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$message <span class="token operator">=</span> message 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.0 将通过 <code>Vue.createApp({})</code> 创建一个应用实例，在这个实例上面注册一些全局API</p><p>由于Vue3中全局API都会通过 <code>app.xxx</code> 的方法调用，所以之前通过 <code>Vue.prototype.xxx</code> 绑定的全局方法和变量将无法使用，可以采用如下方式来代替：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span><span class="token function-variable function">http</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="组件生命周期" tabindex="-1"><a class="header-anchor" href="#组件生命周期" aria-hidden="true">#</a> 组件生命周期</h2><p>3.0 不再有 <code>beforeDestroy</code> 和 <code>destroyed</code> 两个钩子，多了 <code>beforeUnmount</code>、 <code>unmounted</code> 两个勾子</p><h2 id="组件上绑定事件" tabindex="-1"><a class="header-anchor" href="#组件上绑定事件" aria-hidden="true">#</a> 组件上绑定事件</h2><p>2.0 组件上绑定事件的特点：</p><ul><li><p>绑定原生事件，需要添加 <code>.native</code> 修辞符</p></li><li><p>当组件内根元素有绑定同名事件时，只会触发组件内的事件，不会触发组件外事件，此时可以通过手动调用 <code>this.$listeners[事件名]()</code> 来绑定在组件上的事件</p></li><li><p>具有 <code>$listeners</code> 属性，包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器</p></li></ul><p>3.0 组件上绑定事件的特点：</p><ul><li><p>无需添加 <code>.native</code> 修辞符</p></li><li><p>当组件内根元素有绑定同名事件时都会触发事件，先执行组件内的事件，再执行组件外的事件</p></li><li><p>添加了 <code>emits</code> 属性，用法同 <code>props</code>，针对事件的，如果在<code>emits</code> 声明了事件，那么不会自动触发组件外的事件</p></li><li><p>取消了 <code>$listeners</code> 属性， <code>$attrs</code> 中将包括组件 <code>props</code> 和 <code>emits</code>中未包含的所有属性和方法，如果 属性和事件出现同名的话，会合并在数组中（事件名没默认添加 <code>on</code>前缀，所以添加<code>:onClick</code>属性和<code>@click</code> 事件，这样才算重名）</p><p>如果向上所说有 添加与事件同名的属性，在触发事件时，vue 也会误把这个属性当前函数执行，会报错的，即使读取那个作为属性的值，也将变成数组</p></li></ul><h2 id="使用非props属性的注意点" tabindex="-1"><a class="header-anchor" href="#使用非props属性的注意点" aria-hidden="true">#</a> 使用非props属性的注意点</h2><p>在组件定义的属性如果没有 <code>props</code> 定义，会直接赋值在根元素上,并存在以下特点</p><ol><li><p>如果在组件上定义的属性和组件内的根元素定义了相同的属性，那么会采用组件上的属性</p></li><li><p><code>&lt;HelloWorld v-bind=&quot;{ttt: &#39;abc&#39;}&quot; ttt=&quot;lanjz&quot; /&gt;</code> 这种即定义了属性的同时用使用 <code>v-bind</code> 包含相同属性，采用定义的属性,即<code>lanjz</code></p></li></ol><p>关于上面的第一点，3.0和2.0 使用的又有点区别</p><ul><li><p>2.0 虽然优先也是使用了组件上的属性，但是组件内如果有对属性进行动态修改，那么这个属性将变成修改的值</p></li><li><p>而 3.0 中组件内如果有对属性进行动态修改，这个属性仍然还是组件外定义的属性</p></li></ul><h2 id="v-model" tabindex="-1"><a class="header-anchor" href="#v-model" aria-hidden="true">#</a> v-model</h2><p>3.0中 v-model 增加了自定义指令</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">v-model.capitalize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modelValue</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">modelModifiers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;input type=&quot;text&quot; 
      :value=&quot;modelValue&quot;
      @input=&quot;$emit(&#39;update:modelValue&#39;, $event.target.value)&quot;&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modelModifiers<span class="token punctuation">)</span> <span class="token comment">// { capitalize: true }</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="provide-inject" tabindex="-1"><a class="header-anchor" href="#provide-inject" aria-hidden="true">#</a> provide/inject</h2><p>基本用法一致，但是如果希望 <code>inject</code> 中的值是响应的，那么处理方法是不同的</p><p>2.0 实现响应的条件有两点：</p><ol><li><p>provide 选项应该是返回一个对象的函数</p></li><li><p>传入的值是一个可监听的对象</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>item
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">item</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;f&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.0 实现 provide 属性的响应的还可以通过 组合式 API 的形式</p><p>// todo</p><h2 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//2.0</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Comp</span><span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./comp.vue&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//3.0</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineAsyncComponent<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">Comp</span><span class="token operator">:</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./comp.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义指定" tabindex="-1"><a class="header-anchor" href="#自定义指定" aria-hidden="true">#</a> 自定义指定</h2><p>3.0 指定的钩子名称跟2.0 不一样了</p><h2 id="v-model-1" tabindex="-1"><a class="header-anchor" href="#v-model-1" aria-hidden="true">#</a> v-model</h2><p>2.0 v-model 默认会利用名为 value 的 <code>prop</code> 和 input 作为事件</p><p>3.0 默认情况下，组件上的 v-model 使用 modelValue 作为 <code>prop</code> 和 <code>update:modelValue</code> 作为事件</p>`,38),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","使用区别.html.vue"]]);export{r as default};
