import{_ as n,o as s,c as a,d as t}from"./app.b7720670.js";const p={},e=t(`<h1 id="\u7C97\u8BFB\u54CD\u5E94\u5F0Fapi" tabindex="-1"><a class="header-anchor" href="#\u7C97\u8BFB\u54CD\u5E94\u5F0Fapi" aria-hidden="true">#</a> \u7C97\u8BFB\u54CD\u5E94\u5F0FAPI</h1><h2 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive" aria-hidden="true">#</a> reactive</h2><p>\u5728\u4F7F\u7528 Vue \u65F6\uFF0C\u6B63\u5E38\u6765\u8BF4\u53EA\u6709\u5728 <code>data</code> \u4E2D\u7684\u5C5E\u6027\u662F\u54CD\u5E94\u5F0F\uFF0C\u5982\u679C\u5E0C\u671B\u5728\u540E\u671F\u6DFB\u52A0\u53EF\u54CD\u5E94\u7684\u5143\u7D20\u5C31\u53EF\u4EE5\u901A\u8FC7 <code>reactive</code> \u65B9\u6CD5\uFF0C\u7C9F\u5B50</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lanjz&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u7EC4\u4EF6\u6709\u7528\u5230 <code>this.info</code>\uFF0C\u5F53 <code>this.info</code> \u6539\u53D8\u65F6\uFF0C\u7EC4\u4EF6\u4E2D\u4F7F\u7528\u5230\u7684\u5730\u65B9\u4E5F\u8DDF\u7740\u66F4\u65B0</p><h3 id="\u6E90\u7801\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#\u6E90\u7801\u5B9A\u4E49" aria-hidden="true">#</a> \u6E90\u7801\u5B9A\u4E49</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u5982\u679C\u662F\u5DF2\u7ECF\u8BBE\u7F6E\u8FC7\u53EA\u8BFB\u7684\u5BF9\u8C61\uFF0C\u5219\u7565\u8FC7</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span><span class="token string">&quot;__v_isReadonly&quot;</span> <span class="token comment">/* IS_READONLY */</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> mutableHandlers<span class="token punctuation">,</span> mutableCollectionHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> isReadonly<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">,</span> collectionHandlers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// targe \u5FC5\u9700\u662F\u5BF9\u8C61</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value cannot be made reactive: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// target \u5DF2\u7ECF\u662F\u4E2A\u88AB\u4EE3\u7406\u5BF9\u8C61\uFF0C\u5219\u76F4\u63A5\u8FD4\u56DE</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token string">&quot;__v_raw&quot;</span> <span class="token comment">/* RAW */</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span><span class="token punctuation">(</span>isReadonly <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span><span class="token string">&quot;__v_isReactive&quot;</span> <span class="token comment">/* IS_REACTIVE */</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u6839\u636E\u662F\u5426\u53EA\u8BFB\u4F7F\u7528 readonlyMap\u6216reactiveMap \u5B58\u50A8\u5F53\u524D\u5BF9\u8C61</span>
  <span class="token keyword">const</span> proxyMap <span class="token operator">=</span> isReadonly <span class="token operator">?</span> readonlyMap <span class="token operator">:</span> reactiveMap<span class="token punctuation">;</span>
  <span class="token comment">// \u5DF2\u7ECF\u4FDD\u5B58\u8FC7\u5219\u76F4\u63A5\u8FD4\u56DE</span>
  <span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> existingProxy<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5BF9\u4E8E\u4E0D\u53EF\u6269\u5C55\u7684\uFF0C\u83B7\u8005\u662F\u5DF2\u7ECF\u88AB\u6807\u5FD7\u4E0D\u53EF\u7528\u7684\u5BF9\u8C61\uFF0C\u5219\u7565\u8FC7</span>
  <span class="token keyword">const</span> targetType <span class="token operator">=</span> <span class="token function">getTargetType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* INVALID */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u8BBE\u7F6E\u4EE3\u7406</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> targetType <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* COLLECTION */</span> <span class="token operator">?</span> collectionHandlers <span class="token operator">:</span> baseHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6838\u5FC3\u8FD8\u662F\u6700\u540E\u7684 <code>Proxy</code> \u4EE3\u7406\u7684\u4F7F\u7528\uFF0C\u770B\u4E0B\u8FD9\u4E2A\u4EE3\u7406\u5177\u4F53\u914D\u7F6E\u4E86\u5565</p><p><strong>get</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// get</span>
<span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token parameter">isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;__v_isReactive&quot;</span> <span class="token comment">/* IS_REACTIVE */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token operator">!</span>isReadonly<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;__v_isReadonly&quot;</span> <span class="token comment">/* IS_READONLY */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> isReadonly<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;__v_raw&quot;</span> <span class="token comment">/* RAW */</span> <span class="token operator">&amp;&amp;</span>
      receiver <span class="token operator">===</span> <span class="token punctuation">(</span>isReadonly <span class="token operator">?</span> readonlyMap <span class="token operator">:</span> reactiveMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> targetIsArray <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly <span class="token operator">&amp;&amp;</span> targetIsArray <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSymbol</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token operator">?</span> builtInSymbols<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token operator">:</span> key <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__proto__</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> key <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__v_isRef</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ref unwrapping - does not apply for Array + integer key.</span>
      <span class="token keyword">const</span> shouldUnwrap <span class="token operator">=</span> <span class="token operator">!</span>targetIsArray <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> shouldUnwrap <span class="token operator">?</span> res<span class="token punctuation">.</span>value <span class="token operator">:</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Convert returned value into a proxy as well. we do the isObject check</span>
      <span class="token comment">// here to avoid invalid value warning. Also need to lazy access readonly</span>
      <span class="token comment">// and reactive here to avoid circular dependency.</span>
      <span class="token keyword">return</span> isReadonly <span class="token operator">?</span> <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5148\u770B\u4E0B\u51E0\u4E2A\u81EA\u5B9A\u4E49\u5C5E\u6027\u7684\u610F\u601D\uFF1A</p><ul><li><p>__v_isReadonly: \u662F\u5426\u662F\u5DF2\u8BFB\u7684</p></li><li><p>__v_raw\uFF1A\u5C5E\u6027\u662F\u5426\u54CD\u5E94\u5F0F\u7684</p></li><li><p>__v_isReactive\uFF1A !isReadonly</p></li></ul><p>\u4E4B\u540E\u5206\u522B\u5224\u65AD\u5BF9\u8C61\u662F\u6570\u7EC4\u7C7B\u578B\u548C Symbol \u7C7B\u578B\u5206\u522B\u8D70\u4E0D\u540C\u7684\u5206\u652F</p><p>\u4E4B\u540E\u6267\u884C<code>track(target, &quot;get&quot; /* GET */, key)</code> \u7ED9\u5F53\u524D\u5C5E\u6027\u6536\u96C6\u4E8B\u4EF6</p><p><code>shallow</code> \u5E94\u8BE5\u662F\u8868\u793A\u662F\u5426\u8981\u8FDB\u4E00\u6B65\u5904\u7406\u5F97\u5230\u7684\u503C\uFF1F</p><p><code>isRef(res)</code> \u662F\u5426\u6709\u5C5E\u6027 <code>__v_isRef</code>\uFF0C\u8868\u793A\u662F\u5426\u662F\u4F7F\u7528 <code>refs</code> \u521B\u5EFA\u7684\u5BF9\u8C61</p><p>\u5982\u679C\u5F97\u5230\u503C\u662F\u5BF9\u8C61\u7684\u8BDD\uFF0C\u7EE7\u7EED\u8C03\u7528 <code>reactive</code> \u5904\u7406\u8FD9\u4E2A\u5BF9\u8C61</p><p>\u603B\u5F97\u6765\u8BF4\uFF0C <code>get</code> \u91CD\u70B9\u4E3B\u8981\u8FD8\u662F\u6536\u96C6\u4F9D\u8D56\u7684\u4F5C\u7528</p><p><strong>set</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token parameter">shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRef</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        oldValue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8BBE\u7F6E\u662F\u5426\u662F\u5DF2\u5B58\u5728\u7684\u5C5E\u6027</span>
    <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
      <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">.</span>length
      <span class="token operator">:</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// don&#39;t trigger if target is something up in the prototype chain of original</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>set</code> \u88AB\u89E6\u53D1\u65F6\u901A\u8FC7 <code>trigger</code> \u53BB\u6267\u884C\u6536\u96C6\u7684\u4E8B\u4EF6</p><h2 id="refs" tabindex="-1"><a class="header-anchor" href="#refs" aria-hidden="true">#</a> refs</h2><p><code>ref</code> \u548C <code>reactive</code> \u4E00\u6837, \u4E5F\u662F\u7528\u6765\u5B9E\u73B0\u54CD\u5E94\u5F0F\u6570\u636E\u7684\u65B9\u6CD5</p><p><strong>\u4F5C\u7528\uFF1F</strong></p><p>\u7531\u4E8E <code>reactive</code> \u5FC5\u987B\u4F20\u9012\u4E00\u4E2A\u5BF9\u8C61, \u6240\u4EE5\u5BFC\u81F4\u5728\u4F01\u4E1A\u5F00\u53D1\u4E2D\uFF0C\u5982\u679C\u6211\u4EEC\u53EA\u60F3\u8BA9\u67D0\u4E2A\u53D8\u91CF\u5B9E\u73B0\u54CD\u5E94\u5F0F\u7684\u65F6\u5019\u4F1A\u975E\u5E38\u9EBB\u70E6 \uFF0C\u6240\u4EE5Vue3\u5C31\u7ED9\u6211\u4EEC\u63D0\u4F9B\u4E86 <code>ref</code> \u65B9\u6CD5, \u4E3A\u975E\u5BF9\u8C61\u7684\u57FA\u7840\u6570\u636E\u7C7B\u578B\u521B\u5EFA\u54CD\u5E94\u6027</p><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h3><p>\u63A5\u53D7\u4E00\u4E2A\u5185\u90E8\u503C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u54CD\u5E94\u5F0F\u4E14\u53EF\u53D8\u7684 ref \u5BF9\u8C61\u3002ref \u5BF9\u8C61\u5177\u6709\u6307\u5411\u5185\u90E8\u503C\u7684\u5355\u4E2A <code>property .value</code></p><p>\u6E90\u7801\u5B9A\u4E49\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">const</span> <span class="token function-variable function">convert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>
 <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">createRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token parameter">rawValue<span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> rawValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RefImpl</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">,</span> shallow<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">_rawValue<span class="token punctuation">,</span> _shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_rawValue <span class="token operator">=</span> _rawValue<span class="token punctuation">;</span> <span class="token comment">// \u4FDD\u5B58\u503C</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_shallow <span class="token operator">=</span> _shallow<span class="token punctuation">;</span>  <span class="token comment">// \u662F\u5426\u6DF1\u5C42\u5904\u7406</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>__v_isRef <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// \u8BBE\u7F6E ref \u6807\u8BC6</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> _shallow <span class="token operator">?</span> _rawValue <span class="token operator">:</span> <span class="token function">convert</span><span class="token punctuation">(</span>_rawValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u6DFB\u52A0\u4EE3\u7406</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rawValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_rawValue <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_shallow <span class="token operator">?</span> newVal <span class="token operator">:</span> <span class="token function">convert</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u8C03\u7528 <code>ref</code> \u5B9E\u9645\u662F\u751F\u6210\u4E86\u4E00\u4E2A <code>RefImpl</code> \u5B9E\u4F8B\uFF0C\u5E76\u4E14\u5BF9\u5916\u5B9A\u4E49\u4E86 <code>value</code> \u5C5E\u6027\uFF0C\u5E76\u5B9A\u4E49\u4E86\u5B58\u50A8\u63CF\u8FF0\u7B26\uFF0C\u5F53 <code>set</code> \u548C <code>get</code> \u65F6\uFF0C\u5206\u522B\u4E5F\u4F1A\u8C03\u7528\u5BF9\u5E94\u7528 <code>trigger</code> \u53D1\u5E03\u4E8B\u4EF6\u548C <code>track</code> \u6536\u96C6\u4E8B\u4EF6</p><p>\u5E76\u4E14\u5982\u679C\u4F7F\u7528\u7684\u76EE\u6807\u662F\u5BF9\u8C61\u7684\u8BDD\uFF0C\u8FD8\u4F1A\u8C03\u7528 <code>reactive(val)</code> \u7ED9\u8FD9\u4E2A\u5BF9\u8C61\u6DFB\u52A0\u54CD\u5E94\u52AB\u6301</p><h3 id="unref" tabindex="-1"><a class="header-anchor" href="#unref" aria-hidden="true">#</a> unref</h3><p>\u5982\u679C\u53C2\u6570\u4E3A ref\uFF0C\u5219\u8FD4\u56DE\u5185\u90E8\u503C\uFF0C\u5426\u5219\u8FD4\u56DE\u53C2\u6570\u672C\u8EAB\u3002\u8FD9\u662F <code>val = isRef(val) ? val.value : val</code></p><p>\u6E90\u7801\u5B9A\u4E49\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">unref</span><span class="token punctuation">(</span><span class="token parameter">ref</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">isRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>value <span class="token operator">:</span> ref<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toref" tabindex="-1"><a class="header-anchor" href="#toref" aria-hidden="true">#</a> toRef</h3><p>\u53EF\u4EE5\u7528\u6765\u4E3A\u6E90\u54CD\u5E94\u5F0F\u5BF9\u8C61\u4E0A\u7684 property \u6027\u521B\u5EFA\u4E00\u4E2A ref\u3002\u7136\u540E\u53EF\u4EE5\u5C06 ref \u4F20\u9012\u51FA\u53BB\uFF0C\u4ECE\u800C\u4FDD\u6301\u5BF9\u5176\u6E90 property \u7684\u54CD\u5E94\u5F0F\u8FDE\u63A5</p><p>\u6E90\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toRef</span><span class="token punctuation">(</span><span class="token parameter">object<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">isRef</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token operator">?</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ObjectRefImpl</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token comment">// ObjectRefImpl</span>
  <span class="token keyword">class</span> <span class="token class-name">ObjectRefImpl</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">_object<span class="token punctuation">,</span> _key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_object <span class="token operator">=</span> _object<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_key <span class="token operator">=</span> _key<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>__v_isRef <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_object<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_object<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u5DF2\u7ECF\u662F ref \u5BF9\u8C61\u5219\u76F4\u63A5\u8FD4\u56DE\uFF0C\u5426\u5219\u8C03\u7528 <code>ObjectRefImpl</code> \u751F\u6210\u4E00\u4E2A ref\uFF0C\u8DDF <code>RefImpl</code> \u76F8\u6BD4\u5C11\u4E86\u5728 <code>get/set</code> \u65B9\u6CD5\u89E6\u53D1\u4E86\u5C11\u4E86\u4E3B\u52A8\u89E6\u53D1\u6536\u96C6\u4E8B\u4EF6\u548C\u6D3E\u53D1\u4E8B\u4EF6\u7684\u64CD\u4F5C\uFF0C\u56E0\u4E3A <code>toRef</code> \u7684\u5BF9\u8C61\u672C\u8EAB\u5C31\u662F\u54CD\u5E94\u5F0F\u5BF9\u8C61\u4E86</p><h3 id="torefs" tabindex="-1"><a class="header-anchor" href="#torefs" aria-hidden="true">#</a> toRefs</h3><p>\u5C06\u54CD\u5E94\u5F0F\u5BF9\u8C61\u8F6C\u6362\u4E3A\u666E\u901A\u5BF9\u8C61\uFF0C\u5176\u4E2D\u7ED3\u679C\u5BF9\u8C61\u7684\u6BCF\u4E2A property \u90FD\u662F\u6307\u5411\u539F\u59CB\u5BF9\u8C61\u76F8\u5E94 property \u7684ref\u3002</p><p>\u6E90\u7801\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">toRefs</span><span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">isProxy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toRefs() expects a reactive object but received a plain one.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ret<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5148\u5224\u65AD <code>object</code> \u662F\u5426\u88AB\u4EE3\u7406\u7684\uFF0C\u4E4B\u540E\u904D\u5386\u5C5E\u6027\u8C03\u7528 <code>toRef</code> \uFF0C\u5C06\u6BCF\u4E2A\u5C5E\u6027\u53D8\u6210 <code>ref \u5BF9\u8C61</code></p><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p><code>ref</code> \u672C\u8D28\u662F\u58F0\u660E\u4E86\u4E00\u4E2A\u7C7B\uFF0C\u8FD9\u4E2A\u7C7B\u5BF9\u5916\u66B4\u9732\u4E86\u4E00\u4E2A <code>value</code> \u5C5E\u6027\u6307\u5411\u5F53\u524D <code>ref</code> \u76EE\u6807\uFF0C\u5E76\u7ED9\u8FD9\u4E2A <code>value</code> \u5C5E\u6027\u8BBE\u7F6E\u4E86 <code>get</code> \u548C <code>set</code> \u63CF\u8FF0\u7B26</p><p>\u8DDF <code>reactive</code> \u91CC\u9762\u7ED9\u5BF9\u8C61\u8BBE\u7F6E <code>proxy</code> \u4EE3\u7406\u4E00\u6837\uFF0C\u7C7B\u7684 <code>get/set</code> \u65B9\u6CD5\u4E5F\u5B9A\u4E49\u4E86\u6536\u96C6\u4E8B\u4EF6\u548C\u6D3E\u53D1\u4E8B\u4EF6\u7684\u64CD\u4F5C</p><p>\u5982\u679C <code>ref</code> \u76EE\u6807\u662F\u5BF9\u8C61\u7684\u8BDD\u8FD8\u4F1A\u4F7F\u7528 <code>reactive</code> \u5904\u7406\u8FD9\u4E2A\u5BF9\u8C61</p><p><strong>\u4F7F\u7528 <code>ref</code> \u6CE8\u610F\u70B9:</strong></p><ul><li><p>\u5728Vue\u4E2D\u4F7F\u7528 <code>ref</code> \u7684\u503C\u4E0D\u7528\u901A\u8FC7 <code>value</code> \u83B7\u53D6</p></li><li><p>\u5728JS\u4E2D\u4F7F\u7528 <code>ref</code> \u7684\u503C\u5FC5\u987B\u901A\u8FC7 <code>value</code> \u83B7\u53D6</p></li></ul><p><strong>\u4E3A\u4EC0\u4E48\u4E00\u5B9A\u8981\u4F7F\u7528 <code>value</code> \u8BBF\u95EE\u76EE\u6807\uFF1F</strong></p><p>\u56E0\u4E3A\u9700\u8981\u901A\u8FC7\u5BF9\u8C61\u7684\u63CF\u8FF0\u7B26\u6765\u6DFB\u52A0\u54CD\u5E94\u5F0F\u7684\u529F\u80FD</p><p>\u6362\u6C64\u4E0D\u6362\u836F\uFF5E</p>`,54),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(p,[["render",c],["__file","\u54CD\u5E94\u5F0FAPI.html.vue"]]);export{r as default};
