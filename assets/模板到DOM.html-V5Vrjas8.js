import{_ as n,o as s,c as a,e as t}from"./app-kv3zS8h1.js";const e={},p=t(`<h1 id="模板到真实dom经历了什么" tabindex="-1"><a class="header-anchor" href="#模板到真实dom经历了什么" aria-hidden="true">#</a> 模板到真实DOM经历了什么？</h1><p>这里通过一个例子来介绍下 VUE 中模板到真实 DOM 需要哪些过程：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>page<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	{{name}}的列表:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(item, index) in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模板解析" tabindex="-1"><a class="header-anchor" href="#模板解析" aria-hidden="true">#</a> 模板解析</h2><p>模板解析就是通过正则手段对模板字符串进行解析，生成 AST 抽象语法树，我们例子解析完成得到以下 AST：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">type</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
	<span class="token literal-property property">tag</span><span class="token operator">:</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">attrsList</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">attrsMap</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token keyword">class</span><span class="token operator">:</span><span class="token string">&quot;page&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">rawAttrsMap</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">plain</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
	<span class="token literal-property property">staticClass</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span>page<span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">type</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
			<span class="token literal-property property">expression</span><span class="token operator">:</span><span class="token string">&quot;_s(name)+&quot;</span><span class="token literal-property property">的列表</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tokens</span><span class="token operator">:</span><span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					@binding<span class="token operator">:</span><span class="token string">&quot;name&quot;</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token string">&quot;的列表：&quot;</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;{{name}}的列表:&quot;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">attrsList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token literal-property property">attrsMap</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token string-property property">&quot;:key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
				<span class="token string-property property">&quot;v-for&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(item, index) in list&quot;</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
					<span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token string">&quot;_s(item)&quot;</span>
					<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;{{item}}&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token punctuation">{</span>
							@binding<span class="token operator">:</span> <span class="token string">&quot;item&quot;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token keyword">for</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span>
			<span class="token literal-property property">forProcessed</span><span class="token operator">:</span> <span class="token boolean">true</span>
			<span class="token literal-property property">iterator1</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">parent</span><span class="token operator">:</span> <span class="token punctuation">(</span>父级的引用<span class="token punctuation">)</span><span class="token punctuation">,</span>
			<span class="token literal-property property">plain</span><span class="token operator">:</span> <span class="token boolean">false</span>
			<span class="token literal-property property">pre</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">rawAttrsMap</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&quot;span&quot;</span>
			<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token number">1</span>
		<span class="token punctuation">}</span>
	
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="将ast转换成函数字符串" tabindex="-1"><a class="header-anchor" href="#将ast转换成函数字符串" aria-hidden="true">#</a> 将AST转换成函数字符串</h2><p>Vue中模块最终都会转换成 <code>render</code> 函数，这个 <code>render</code> 函数的作用是用于生成<code>VNode</code>。<code>VNode</code> 就是 <code>Virsual DOM</code> ，简单理解它就是 <code>DOM</code> 的 JS 对象表示</p><p>可能有人会疑惑这跟上文的 <code>ast</code> 有什么区别，这个下文会解释</p><p>上文AST首先会转换成函数字符串</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;with(this){return _c(&#39;div&#39;,{staticClass:&quot;</span>page<span class="token string">&quot;},[_v(_s(name)+&quot;</span><span class="token literal-property property">的列表</span><span class="token operator">:</span><span class="token string">&quot;),_l((list),function(item,index){return _c(&#39;span&#39;,{key:index},[_v(_s(item))])})],2)}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>new Function</code>方法将函数字符串转换成可执行函数，生成 <code>render</code> 方法</p><p>上文的 <code> _c</code>， <code>_v</code> 都是 Vue 内置的一些方法，作用都是生成 <code>VNode</code>。比如例子中一开始是渲染一个<code>&lt;div class=&quot;page&quot;&gt;&lt;/div&gt;</code> 那么这个节点将转换成 <code>_c(&#39;div&#39;,{staticClass:&quot;page&quot;}，[])</code> 字符串,这个 <code>_c</code> 是一个已经定义好的的函数，作用就是生成一个 <code>VNode</code>，接收的主要参数就是标签名、属性、及子元素</p><p>再比如 <code>v-for</code> 则使用 <code>_l</code> 方法进行渲染, <code>_l</code> 表示使用列表渲染，它将循环生成 <code>VNode</code>，从上文的转换结果可以看 <code>_l</code> 的第一个参数就是渲染源数据 <code>list</code>，每二个参数则是一个具体渲染子节点 <code>VNode</code> 的方法</p><p>除了 <code>_c</code> 、 <code>_l</code>，<code>Vue</code> 中还内置其它的生成 <code>VNode</code> 方法，如 <code>_v</code> 对应 <code>createTextVNode</code> 创建文本 <code>VNode</code>、<code>_s</code> 是生成字符串方法等等等等等等等，这里就不一一列表了</p><h2 id="通过render方法-创建vnode" tabindex="-1"><a class="header-anchor" href="#通过render方法-创建vnode" aria-hidden="true">#</a> 通过<code>render</code>方法，创建VNode</h2><p>上文中 <code>render</code> 方法开始是 <code>with(this)</code>，函数体中用到变量都从这个 <code>this</code> 中获取，在 Vue 中这个 <code>this</code> 是指向Vue实例的，这里作为演示，我们使用一个简单对象调用 <code>render</code> 方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lanjz&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment">//</span>
<span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>得到如下 <code>VNode</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>VNode<span class="token punctuation">{</span>
	<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">staticClass</span><span class="token operator">:</span> <span class="token string">&quot;page&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		VNode<span class="token punctuation">{</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;lanjz的列表:&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		VNode<span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;__vlist_1_0__&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">0</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				VNode<span class="token punctuation">{</span>
					<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		VNode<span class="token punctuation">{</span>
			<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&quot;__vlist_1_1__&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token number">1</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
			<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
				VNode<span class="token punctuation">{</span>
					<span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token keyword">undefined</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
	
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的 VNode 对象做了简化，可以看到其实结构跟之前 AST 对象有点相似，都是使用JS对象表示 <code>DOM</code> 元素节点，他们具体的区别是什么呢？</p><ul><li><p>AST只是模板的对象表示，并没结合具体的 <code>data</code> 值进行渲染</p></li><li><p><code>VNode</code> 是结合了 <code>vue指令</code> 和 <code>data</code> 值最终渲染出的 <code>DOM</code> 的对象描述</p></li></ul><h2 id="渲染成真实dom" tabindex="-1"><a class="header-anchor" href="#渲染成真实dom" aria-hidden="true">#</a> 渲染成真实DOM</h2><p>这一步就是遍历 <code>VNode</code> 转生成真实DOM，并插入到浏览器视图中</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p><code>template =&gt; AST =&gt; Render =&gt; VNode =&gt; DOM</code></p>`,26),o=[p];function l(c,r){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","模板到DOM.html.vue"]]);export{u as default};
