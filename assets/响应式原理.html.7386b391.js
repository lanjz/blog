import{_ as n,o as s,c as a,d as t}from"./app.35d123d0.js";const p={},e=t(`<h1 id="\u54CD\u5E94\u5F0F\u539F\u7406" tabindex="-1"><a class="header-anchor" href="#\u54CD\u5E94\u5F0F\u539F\u7406" aria-hidden="true">#</a> \u54CD\u5E94\u5F0F\u539F\u7406</h1><p>\u56DE\u987E\u4E0B 2.0 \u54CD\u5E94\u5F0F\u539F\u7406\u5B9E\u73B0\u8FC7\u7A0B\uFF1A</p><ol><li><p>Vue \u5728\u521D\u59CB\u5316\u7684\u65F6\u5019\u4F1A\u904D\u5386 <code>data</code> \u6570\u636E\uFF0C\u5BF9\u4E8E\u6BCF\u4E2A\u5C5E\u6027\u6267\u884C <code>defineReactive</code> \u65B9\u6CD5\uFF0C\u8FD9\u91CC\u65B9\u6CD5\u4E3B\u8981\u505A\u4EE5\u4E0B\u4E24\u4E2A\u4E8B\u60C5\uFF1A</p><ul><li><p>\u5B9E\u4F8B\u5316\u4E00\u4E2A\u4E8B\u4EF6\u5668 <code>Dep</code></p></li><li><p>\u4F7F\u7528 <code>Obejct.definedPropery()</code> \u65B9\u6CD5\u4EE3\u7406\u5C5E\u6027\u5E76\u6DFB\u52A0 <code>set</code> \u548C <code>get</code> \u65B9\u6CD5\uFF0C <code>get</code> \u4E2D\u6DFB\u52A0\u4E86\u6536\u96C6 <code>Watcher</code> \u7684\u903B\u8F91\uFF0C\u800C <code>set</code> \u5219\u662F\u5305\u542B\u4E86\u6267\u884C <code>Watcher</code> \u7684\u903B\u8F91</p></li></ul></li><li><p>\u5728\u7EC4\u4EF6\u6E32\u67D3\u7684\u65F6\u5019\uFF0C\u4F1A\u5B9E\u4F8B\u5316\u4E00\u4E2A <code>Watcher</code> \u5B9E\u4F8B\uFF0C\u5E76\u5C06\u5F53\u524D <code>Watcher</code> \u5B9E\u4F8B\u5230\u5168\u5C40\u5C5E\u6027 <code>Dep.target</code>\u4E2D\uFF0C\u4E4B\u540E\u5728\u6267\u884C\u6E32\u67D3\u64CD\u4F5C\u7684\u65F6\u5019\u4F1A\u8BFB\u53D6 <code>data</code> \u7684\u5C5E\u6027\uFF0C \u5E76\u88AB <code>get</code> \u52AB\u6301\uFF0C<code>get</code> \u65B9\u6CD5\u4E2D\u5C06\u4FDD\u5B58\u5728\u5168\u5C40\u7684 <code>Watcher</code> \u6536\u96C6\u5230 <code>dep</code> \u4E2D</p></li><li><p>\u4E4B\u540E\u5F53 <code>data</code> \u5C5E\u6027\u88AB\u66F4\u6539\u65F6\uFF0C\u4F1A\u88AB <code>set</code> \u52AB\u6301\uFF0C\u7136\u540E\u6267\u884C <code>Watcher</code> \u4E2D\u7684\u66F4\u65B0\u65B9\u6CD5</p></li></ol><h2 id="vue3-0" tabindex="-1"><a class="header-anchor" href="#vue3-0" aria-hidden="true">#</a> Vue3.0</h2><p>3.0 \u4E2D\u6539\u7528\u4E86 Proxy \u65B9\u6CD5\uFF0C\u4EE5 <code>data</code> \u5C5E\u6027\u4E3A\u4F8B\u6765\u54C1\u4E00\u4E0B\u600E\u4E48\u73A9\u7684</p><p>\u6E90\u7801\u8FFD\u8E2A\uFF1A <code>mountComponent(n2, container) =&gt; setupComponent(instance) =&gt; setupStatefulComponent() =&gt; finishComponentSetup(instance) =&gt; applyOptions(instance, Component) =&gt; resolveData(instance, dataOptions, publicThis)</code></p><p><code>resolveData</code> \u5C31\u662F\u5904\u7406 <code>data</code> \u5C5E\u6027\u7684\u5730\u65B9</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">resolveData</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> dataFn<span class="token punctuation">,</span> publicThis</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// data\u5C5E\u6027\u53EA\u80FD\u662F\u51FD\u6570 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span>dataFn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The data option must be a function. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Plain object usage is no longer supported.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u83B7\u53D6 data \u7684\u503C</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">dataFn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>publicThis<span class="token punctuation">,</span> publicThis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// data\u51FD\u6570\u8FD4\u56DE\u503C\u4E0D\u80FD\u662F Promise</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">isPromise</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">data() returned a Promise - note data() cannot be async; If you </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">intend to perform data fetching before component renders, use </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">async setup() + &lt;Suspense&gt;.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// data\u51FD\u6570\u8FD4\u56DE\u503C\u5FC5\u9700\u662F\u5BF9\u8C61</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">data() should return an object.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8BBE\u7F6E\u4EE3\u7406</span>
      instance<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// existing data: this is a mixin or extends.</span>
      <span class="token function">extend</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>data<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u6587\u5BF9 <code>data</code> \u5C5E\u6027\u548C\u8FD4\u56DE\u503C\u505A\u4E86\u4E00\u4E9B\u6821\u9A8C\u540E\uFF0C\u6267\u884C <code>reactive(data)</code> \u65B9\u6CD5\u8BBE\u7F6E\u4EE3\u7406</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// if trying to observe a readonly proxy, return the readonly version.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span><span class="token string">&quot;__v_isReadonly&quot;</span> <span class="token comment">/* IS_READONLY */</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> mutableHandlers<span class="token punctuation">,</span> mutableCollectionHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// reactive \u5B9E\u9645\u4E0A\u6267\u884C\u7684\u662F \`createReactiveObject\` \u65B9\u6CD5</span>

  <span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> isReadonly<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">,</span> collectionHandlers</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">value cannot be made reactive: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// target is already a Proxy, return it.</span>
    <span class="token comment">// exception: calling readonly() on a reactive object</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token string">&quot;__v_raw&quot;</span> <span class="token comment">/* RAW */</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span>
      <span class="token operator">!</span><span class="token punctuation">(</span>isReadonly <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span><span class="token string">&quot;__v_isReactive&quot;</span> <span class="token comment">/* IS_REACTIVE */</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// target already has corresponding Proxy</span>
   <span class="token comment">// \u4F7F\u7528 new WeakMap() \u4FDD\u5B58\u5F53\u524D\u4EE3\u7406</span>
    <span class="token keyword">const</span> proxyMap <span class="token operator">=</span> isReadonly <span class="token operator">?</span> readonlyMap <span class="token operator">:</span> reactiveMap<span class="token punctuation">;</span>
    
    <span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5982\u679C\u5DF2\u7ECF\u5B58\u5728\u5219\u662F\u76F4\u63A5\u8FD4\u56DE</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> existingProxy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// only a whitelist of value types can be observed.</span>
    <span class="token keyword">const</span> targetType <span class="token operator">=</span> <span class="token function">getTargetType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token number">0</span> <span class="token comment">/* INVALID */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> targetType <span class="token operator">===</span> <span class="token number">2</span> <span class="token comment">/* COLLECTION */</span> <span class="token operator">?</span> collectionHandlers <span class="token operator">:</span> baseHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8BBE\u7F6E\u4EE3\u7406\u7684\u5730\u65B9\uFF1A <code>const proxy = new Proxy(target, baseHandlers)</code>, <code>baseHandlers</code> \u5C31\u662F Proxy \u7684\u5904\u7406\u5668\u5BF9\u8C61\uFF0C\u6839\u636E\u4E0A\u4E0B\u6587\u627E\u5230 <code>baseHandlers</code> \u7684\u5B9A\u4E49\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">const</span> mutableHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
    get<span class="token punctuation">,</span>
    set<span class="token punctuation">,</span>
    deleteProperty<span class="token punctuation">,</span>
    has<span class="token punctuation">,</span>
    ownKeys
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> get <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token parameter">isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u8BBE\u7F6E get \u65B9\u6CD5</span>
      <span class="token comment">// \u5982\u679C\u5F53\u524D\u8BBF\u95EE __v_isReactive \u8FD4\u56DE true</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;__v_isReactive&quot;</span> <span class="token comment">/* IS_REACTIVE */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">!</span>isReadonly<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u5982\u679C\u5F53\u524D\u8BBF\u95EE __v_isReadonly \u8FD4\u56DE false</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;__v_isReadonly&quot;</span> <span class="token comment">/* IS_READONLY */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> isReadonly<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u5982\u679C\u5F53\u524D\u8BBF\u95EE __v_raw  \u4ECE\u7F13\u5B58\u4E2D\u627E\u5BF9\u5E94\u7684\u503C\uFF0C\u5148\u4E0D\u5173\u5FC3\u8FD9\u4E2A\u4E0A</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;__v_raw&quot;</span> <span class="token comment">/* RAW */</span> <span class="token operator">&amp;&amp;</span>
        receiver <span class="token operator">===</span> <span class="token punctuation">(</span>isReadonly <span class="token operator">?</span> readonlyMap <span class="token operator">:</span> reactiveMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u5982\u679C\u5F53\u524D\u8BBF\u95EE\u7684\u6570\u7EC4\u4E2D\u7684\u5C5E\u6027\uFF0C\u4E14\u662F [&#39;includes&#39;, &#39;indexOf&#39;, &#39;lastIndexOf&#39;] \u4E2D\u7684\u4E00\u79CD,\u5219\u8C03\u7528\u91CD\u5199\u7684\u65B9\u6CD5</span>
      <span class="token keyword">const</span> targetIsArray <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly <span class="token operator">&amp;&amp;</span> targetIsArray <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// \u83B7\u53D6\u5C5E\u6027\u5BF9\u5E94\u7684\u503C</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSymbol</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token operator">?</span> builtInSymbols<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token operator">:</span> key <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__proto__</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">||</span> key <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">__v_isRef</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6267\u884C track \u65B9\u6CD5\uFF0C\u6536\u96C6 effect \u4E8B\u4EF6\u65B9\u6CD5</span>
        <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ref unwrapping - does not apply for Array + integer key.</span>
        <span class="token keyword">const</span> shouldUnwrap <span class="token operator">=</span> <span class="token operator">!</span>targetIsArray <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> shouldUnwrap <span class="token operator">?</span> res<span class="token punctuation">.</span>value <span class="token operator">:</span> res<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Convert returned value into a proxy as well. we do the isObject check</span>
        <span class="token comment">// here to avoid invalid value warning. Also need to lazy access readonly</span>
        <span class="token comment">// and reactive here to avoid circular dependency.</span>
        <span class="token keyword">return</span> isReadonly <span class="token operator">?</span> <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
 <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token parameter">shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// \u5F97\u5230\u65E7\u7684\u503C</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRef</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          oldValue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">.</span>length
        <span class="token operator">:</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// don&#39;t trigger if target is something up in the prototype chain of original</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// \u89E6\u53D1\u6536\u96C6\u7684\u4E8B\u4EF6\uFF0C\u8FDB\u884C\u7EC4\u4EF6\u66F4\u65B0</span>
          <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u8FC7\u7A0B\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u8FC7\u7A0B\u5206\u6790" aria-hidden="true">#</a> \u8FC7\u7A0B\u5206\u6790</h2><h3 id="\u6536\u96C6\u4F9D\u8D56" tabindex="-1"><a class="header-anchor" href="#\u6536\u96C6\u4F9D\u8D56" aria-hidden="true">#</a> \u6536\u96C6\u4F9D\u8D56</h3><p>\u5F53\u7EC4\u4EF6\u8BBF\u95EE <code>data</code> \u4E2D\u7684\u5C5E\u6027\u65F6\u88AB <code>get</code> \u65B9\u6CD5\u52AB\u6301\uFF0C\u6267\u884C\u4E0B\u9762\u8BED\u53E5\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// target \u4EE3\u7406\u5BF9\u8C61 \u5C5E\u6027</span>
<span class="token comment">// type get</span>
<span class="token comment">// key \u8981\u8BBF\u95EE\u7684\u5C5E\u6027</span>
  <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u901A\u8FC7\u5F53\u524D\u5BF9\u8C61\u83B7\u53D6 dep</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5982\u679C\u6CA1\u6709\u5C31\u6DFB\u52A0</span>
      targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u901A\u8FC7\u5C5E\u6027\u83B7\u53D6 dep</span>
    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5982\u679C\u6CA1\u6709\u6DFB\u52A0\u4E00\u4E2A dep</span>
      depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5F53\u524D dep \u4E0D\u5305\u542B activeEffect \u5219\u6DFB\u52A0\u5230 dep \u4E2D</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// \u5F53\u524D\u7684dep \u6536\u96C6\u5230activeEffect.deps \u4E2D</span>
      activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">effect</span><span class="token operator">:</span> activeEffect<span class="token punctuation">,</span>
          target<span class="token punctuation">,</span>
          type<span class="token punctuation">,</span>
          key
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u53EF\u4EE5\u770B\u5230\u7684\u4FE1\u606F\uFF1A</p><ul><li><p>\u5C5E\u6027\u88AB\u8BBF\u95EE\u65F6\uFF0C\u4F1A\u6267\u884C <code>track</code> \u65B9\u6CD5\u505A\u4E8B\u4EF6\u6536\u96C6\u5DE5\u4F5C</p></li><li><p><code>activeEffect</code> \u662F\u4E00\u4E2A\u5168\u5C40\u5C5E\u6027\uFF0C\u8BB0\u5F55\u5F53\u524D\u6B63\u88AB\u6267\u884C\u7684 <code>effect</code>, \u5176\u5B9E\u8FD9\u4E2A <code>effect</code> \u5BF9\u5E94 vue2.0 \u4E2D\u7684 <code>Watcher</code></p></li><li><p>\u6BCF\u4E2A\u4EE3\u7406\u5BF9\u8C61\u90FD\u901A\u8FC7 <code>WeakMap</code> \u7ED3\u6784\u4FDD\u5B58\u7740\u8FD9\u4E2A\u5BF9\u8C61\u7684 \u6536\u96C6\u5668\u96C6\u5408 <code>depsMap</code></p></li><li><p>\u6BCF\u4E2A\u5BF9\u8C61\u7684\u5C5E\u6027\u518D\u901A\u8FC7\u4E00\u6B65\u4E2D\u7684 <code>depsMap</code> \u4FDD\u5B58\u7740\u5BF9\u5E94\u7684 <code>dep</code>\uFF0C <code>depsMap</code> \u662F\u4E00\u4E2A <code>Map</code> \u7ED3\u6784</p></li></ul><p>\u4EE5\u4E0A\u5C31\u5B8C\u6210\u7684\u4E8B\u4EF6\u6536\u96C6\u7684\u5DE5\u4F5C</p><h3 id="\u89E6\u53D1\u66F4\u65B0" tabindex="-1"><a class="header-anchor" href="#\u89E6\u53D1\u66F4\u65B0" aria-hidden="true">#</a> \u89E6\u53D1\u66F4\u65B0</h3><p>\u5F53\u66F4\u65B0\u54CD\u5E94\u7684\u6570\u636E\u65F6\uFF0C\u5C06\u88AB <code>set</code> \u65B9\u6CD5\u52AB\u6301, \u6267\u884C <code>set</code> \u4E2D\u7684 <code>trigger</code> \u65B9\u6CD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> oldTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u901A\u8FC7\u5BF9\u8C61\u83B7\u53D6\u5F53\u524D \u6536\u96C6\u5668\u96C6\u5408 depMap</span>
    <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// \u5982\u679C\u6CA1\u6709\uFF0C\u8BF4\u660E\u5BF9\u8C61\u6CA1\u6709\u6DFB\u52A0\u54CD\u5E94\u673A\u5236</span>
      <span class="token comment">// never been tracked</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u4FDD\u5B58\u5F53\u524D\u6536\u96C6\u5230\u4E14\u8981\u6267\u884C\u7684 effect </span>
    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effectsToAdd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u5C06\u6536\u96C6\u5230\u7684 effect \u6DFB\u52A0\u5230 effects \u96C6\u5408\u4E2D</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effectsToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        effectsToAdd<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> activeEffect <span class="token operator">||</span> effect<span class="token punctuation">.</span>allowRecurse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// \u7565</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;clear&quot;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// collection being cleared</span>
      <span class="token comment">// trigger all effects for target</span>
      depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u7565</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dep<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">||</span> key <span class="token operator">&gt;=</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u6539\u53D8\u5C5E\u6027\u65F6\uFF0C\u5C06\u6267\u884C\u4E0B\u9762\u8BED\u53E5</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u6839\u636E key \u83B7\u53D6\u6536\u96C6\u5230\u7684 dep \u7136\u540E\u6267\u884C add \u65B9\u6CD5</span>
        <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// also run for iteration key on ADD | DELETE | Map.SET</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// new index added to array -&gt; length changes</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;delete&quot;</span> <span class="token comment">/* DELETE */</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrigger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          effect<span class="token punctuation">,</span>
          target<span class="token punctuation">,</span>
          key<span class="token punctuation">,</span>
          type<span class="token punctuation">,</span>
          newValue<span class="token punctuation">,</span>
          oldValue<span class="token punctuation">,</span>
          oldTarget
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u6267\u884C\u6BCF\u4E2A effects \u7684scheduler \u65B9\u6CD5</span>
        effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// \u904D\u5386 effects \u6267\u884C run \u65B9\u6CD5</span>
    effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>effect.options.scheduler</code> \u5C31\u662F\u4E0B\u9762\u7684 <code>queueJob</code> \u65B9\u6CD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">queueJob</span><span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span>length <span class="token operator">||</span>
      <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> isFlushing <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">.</span>allowRecurse <span class="token operator">?</span> flushIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> flushIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
      job <span class="token operator">!==</span> currentPreFlushParentJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>queueJob</code> \u65B9\u6CD5\u5C31\u662F\u5C06\u5F53\u524D <code>job(effect)</code> \u6DFB\u52A0\u5230 <code>queue</code> \u961F\u5217\u4E2D\uFF0C\u7136\u540E\u6267\u884C <code>queueFlush</code> \u65B9\u6CD5\u5F00\u59CB\u4E00\u6B21\u5FAE\u4EFB\u52A1\u7684\u6DFB\u52A0\uFF0C\u8FD9\u6837\u5728\u4E8B\u4EF6\u5FAA\u73AF\u5904\u7406\u4E8B\u4EF6\u961F\u5217\u65F6\u5C31\u53EF\u4EE5\u6267\u884C <code>effect</code> \u65B9\u6CD5\uFF0C\u5177\u4F53\u6267\u884C\u7684\u4EE3\u7801\u4E3A\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlushing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isFlushPending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      isFlushPending <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      currentFlushPromise <span class="token operator">=</span> resolvedPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushJobs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">flushJobs</span><span class="token punctuation">(</span><span class="token parameter">seen</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isFlushPending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    isFlushing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
      seen <span class="token operator">=</span> seen <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">flushPreFlushCbs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5BF9\u6536\u96C6\u5230\u7684 effect \u8FDB\u884C\u6392\u5E8F</span>
    queue<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getId</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getId</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>flushIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flushIndex <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> flushIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> job <span class="token operator">=</span> queue<span class="token punctuation">[</span>flushIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>job<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">checkRecursiveUpdates</span><span class="token punctuation">(</span>seen<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// \u8C03\u7528 callWithErrorHandling \u6267\u884C\u6BCF\u4E00\u4E2A effect</span>
          <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">14</span> <span class="token comment">/* SCHEDULER */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      flushIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      queue<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span><span class="token punctuation">;</span>
      isFlushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      currentFlushPromise <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token comment">// some postFlushCb queued jobs!</span>
      <span class="token comment">// keep flushing until it drains.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">||</span> pendingPostFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">flushJobs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

 <span class="token comment">// \u901A\u8FC7 callWithErrorHandling \u6267\u884C\u6BCF\u4E2A effect</span>
  <span class="token keyword">function</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> type<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u6267\u884C\u6BCF\u4E00\u4E2A effect \u65B9\u6CD5</span>
      res <span class="token operator">=</span> args <span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u66F4\u65B0\u4F9D\u8D56\u7684\u8FC7\u7A0B\u603B\u7ED3\u5982\u4E0B\uFF1A</p><ol><li><p>\u5C5E\u6027\u53D8\u66F4\u65F6\uFF0C\u89E6\u53D1 <code>trigger</code> \u65B9\u6CD5\uFF0C\u6CE8\u610F\u8FD9\u4E2A\u65F6\u95F4\u7684 <code>type=set</code></p></li><li><p>\u4ECE <code>depsMap</code> \u53D6\u51FA\u5F53\u524D\u5C5E\u6027\u6536\u96C6\u7684 <code>effect</code> \u96C6\u5408</p></li><li><p>\u904D\u5386\u8FD9\u4E9B <code>effect</code> ,\u6267\u884C\u6BCF\u4E2A <code>effect.options.scheduler(effect)</code> \u65B9\u6CD5\uFF0C\u5C06 <code>efftct</code> \u6DFB\u52A0\u5230 <code>queue</code> \u4E2D</p></li><li><p>\u540C\u65F6\u6DFB\u52A0\u4E00\u4E2A\u5FAE\u4EFB\u52A1\u5230\u961F\u5217\u5F53\u4E2D</p></li><li><p>\u6267\u884C\u5FAE\u4EFB\u52A1\u65F6\uFF0C\u5BF9 <code>queue</code> \u4E2D\u7684 <code>effect</code> \u8FDB\u884C\u6392\u5E8F\uFF0C\u7136\u540E\u5206\u522B\u6267\u884C <code>effect</code> \u65B9\u6CD5</p></li></ol><h2 id="\u5173\u4E8E\u6DF1\u5EA6\u5BF9\u8C61\u7684\u76D1\u542C" tabindex="-1"><a class="header-anchor" href="#\u5173\u4E8E\u6DF1\u5EA6\u5BF9\u8C61\u7684\u76D1\u542C" aria-hidden="true">#</a> \u5173\u4E8E\u6DF1\u5EA6\u5BF9\u8C61\u7684\u76D1\u542C</h2><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>Counter: {{ counter.cou }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">cou</span><span class="token operator">:</span> <span class="token number">1</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B64\u65F6\u7684\u5904\u7406\u6B65\u9AA4\u4E3A\uFF1A</p><ul><li><p>\u9996\u5148\u4ECD\u7136\u4F1A\u901A\u8FC7 <code>resolveData(instance, dataOptions, publicThis) =&gt;reactive(data) =&gt; createReactiveObject</code>, \u7ED9\u5F53\u524D <code>data</code> \u7684\u503C\u505A <code>proxy</code> \u4EE3\u7406</p></li><li><p>\u6E32\u67D3\u7EC4\u4EF6\u8BBF\u95EE <code>data</code> \u5BF9\u8C61\u4E2D\u7684 <code>counter</code> \u7684\u5C5E\u6027\uFF0C\u8C03\u7528 <code>track(target, &quot;get&quot; /* GET */, key)</code>,\u7ED9\u5F53\u524D\u5C5E\u6027 <code>counter</code> \u6DFB\u52A0\u4E8B\u4EF6 <code>effect</code></p></li><li><p>\u5982\u679C\u5224\u65AD\u5230 <code>counter</code> \u5C5E\u6027\u7684\u503C\u662F\u4E2A\u5BF9\u8C61\uFF0C\u6267\u884C <code>isReadonly ? readonly(res) : reactive(res)</code>,\u76F8\u5F53\u4E8E\u56DE\u5230\u7B2C\u4E00\u6B65\uFF0C\u7ED9\u5F53\u524D <code>counter</code> \u503C\u505A <code>proxy</code> \u4EE3\u7406</p></li><li><p>\u4E4B\u540E\u8BBF\u95EE <code>counter</code> \u5BF9\u8C61\u4E2D\u8BBF\u95EE <code>cou</code> \u7684\u5C5E\u6027\uFF0C\u53C8\u88AB <code>get</code> \u52AB\u6301,\u8C03\u7528 <code>track(target, &quot;get&quot; /* GET */, key)</code>,\u7ED9\u5F53\u524D\u5C5E\u6027 <code>cou</code> \u6DFB\u52A0\u4E8B\u4EF6 <code>effect</code></p></li></ul><p><strong>\u53EF\u4EE5\u770B\u5230\u5BF9\u4E8E\u6DF1\u5C42\u7684\u5BF9\u8C61\uFF0C\u4ECD\u7136\u662F\u9700\u8981\u5BF9\u5B50\u5BF9\u8C61\u505A\u4EE3\u7406\u7684\uFF0C\u8DDF vue2.0 \u4E00\u6837\uFF0C\u53EA\u662F\u8BBE\u7F6E\u7684\u4EE3\u7406\u7684\u65F6\u673A\u4E0D\u540C\u4E86</strong></p><ul><li><p>vue2.0 \u662F\u521D\u59CB\u5316\u7EC4\u4EF6\u7684\u65F6\u5019\u904D\u5386 <code>data</code> \u53CA\u5B50\u5C5E\u6027\u5BF9\u8C61\uFF0C\u6DFB\u52A0 <code>Object.defineProperry</code> \u4EE3\u7406</p></li><li><p>vue3.0 \u53EA\u6709 <code>data</code> \u5C5E\u6027\u662F\u5728\u4E00\u5F00\u59CB\u7684\u65F6\u5019\u505A <code>proxy</code> \u4EE3\u7406\uFF0C\u4E4B\u540E\u662F\u89E6\u53D1 <code>get</code> \u540E\uFF0C\u518D\u5BF9\u5B50\u5BF9\u8C61\u6DFB\u52A0 <code>proxy</code> \u4EE3\u7406</p></li></ul><p>\u52A0\u4E2A <code>proxy</code> \u7C9F\u5B50\u7406\u89E3\u4E00\u4E0B\uFF1A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
<span class="token comment">//\u8F93\u5165 p.a</span>
<span class="token comment">//\u89E6\u53D1 console.log =&gt; - {a: {b: 34}}</span>
<span class="token comment">//\u8F93\u51FA {a: {b: 34}}</span>

<span class="token comment">//\u8F93\u5165 p.a.b</span>
<span class="token comment">//\u89E6\u53D1 console.log =&gt; - {a: {b: 34}}</span>
<span class="token comment">//\u8F93\u51FA 34</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4F8B\u5B50\u8BF4\u660E <code>prosy</code> \u53EA\u80FD\u4EE3\u7406\u7B2C\u4E00\u5C42\u7684\u5C5E\u6027</p><h3 id="\u5982\u679C\u662F\u6DFB\u52A0\u5C5E\u6027\u5462" tabindex="-1"><a class="header-anchor" href="#\u5982\u679C\u662F\u6DFB\u52A0\u5C5E\u6027\u5462" aria-hidden="true">#</a> \u5982\u679C\u662F\u6DFB\u52A0\u5C5E\u6027\u5462\uFF1F</h3><p>\u5047\u8BBE\u6211\u4EEC\u7ED9\u4E0A\u9762\u7C9F\u5B50\u4E2D\u7684 <code>counter</code> \u5BF9\u8C61\u5728\u540E\u671F\u6DFB\u52A0\u4E00\u4E2A\u5C5E\u6027\uFF0CVue \u53C8\u662F\u600E\u4E48\u5904\u7406\u7684\u5462\uFF1F</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u6267\u884C\u4E0A\u9762\u7684\u8BED\u53E5\u65F6\u4EE3\u7801\u8FD0\u884C\u8FC7\u7A0B\uFF1A</p><p>\u9996\u5148\u5F97\u8BBF\u95EE <code>this.counter</code> \u5C5E\u6027\uFF0C\u6B64\u65F6\u4E5F\u4F1A\u88AB <code>get</code> \u65B9\u6CD5\u52AB\u6301\uFF0C\u5E76\u6267\u884C <code>track(target, &quot;get&quot; /* GET */, key);</code> \u65B9\u6CD5\uFF0C\u4F46\u56E0\u4E3A\u6B64\u65F6\u5168\u5C40\u73AF\u5883\u6CA1\u6709 <code>activeEffect</code> \u4E8B\u4EF6\uFF0C\u6240\u4EE5\u6CA1\u6709\u6267\u884C\u4EFB\u4F55\u4E8B\u4EF6\u6536\u96C6\u7684\u52A8\u4F5C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7136\u540E <code>this.counter.abc = 3</code> \u65F6\u88AB <code>set</code> \u65B9\u6CD5\u52AB\u6301</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u53D6\u65E7\u503C\u4E3A undefined</span>
  <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> 
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shallow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u5F53\u524D\u4F8B\u5B50\u4E3A 3 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRef</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      oldValue<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u56E0\u4E3A\u4E4B\u524D\u8FD9\u4E2A\u5C5E\u6027\uFF0ChadKey \u4E3Afalse</span>
  <span class="token keyword">const</span> hadKey <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">.</span>length
    <span class="token operator">:</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u7ED9 target \u6DFB\u52A0\u8FD9\u4E2A\u5C5E\u6027</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// hadKey \u4E3A false\uFF0C\u6240\u4EE5\u6267\u884C trigger \u65B9\u6CD5</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token comment">// \u6CE8\u610F\u6B64\u65F6\u7684 type = add</span>
  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> oldTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u83B7\u53D6 target \u6536\u96C6\u5668\u96C6\u5408</span>
    <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// never been tracked</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effectsToAdd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effectsToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        effectsToAdd<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> activeEffect <span class="token operator">||</span> effect<span class="token punctuation">.</span>allowRecurse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;clear&quot;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// collection being cleared</span>
      <span class="token comment">// trigger all effects for target</span>
      depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dep<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">||</span> key <span class="token operator">&gt;=</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// key \u6709\u6548</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u4F46\u662F\u56E0\u4E3A\u5F53\u524D key \u662F\u65B0\u6DFB\u52A0\u7684\uFF0C\u6240\u4EE5\u6CA1\u6709\u5F53\u524D\u5C5E\u6027\u5BF9\u5E94\u7684 dep\uFF0C\u6211\u4EEC\u7EE7\u7EED\u5F80\u4E0B\u8D70</span>
        <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token operator">:</span>
        <span class="token comment">// \u5F53\u524D type \u4E3A add \u6240\u4EE5\u6267\u884C\u4EE5\u4E0B\u8BED\u53E5</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u53D6\u51FA ITERATE_KEY \u6536\u96C6\u7684 effect\uFF0C\u4E4B\u540E\u7684\u6B65\u9AA4\u6DFB\u52A0\u5230\u5FAE\u4EFB\u52A1\u961F\u5217\u89E6\u53D1 effect \u4E8B\u4EF6\uFF0C\u8FDB\u884C\u66F4\u65B0 </span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// new index added to array -&gt; length changes</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;delete&quot;</span> <span class="token comment">/* DELETE */</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span> effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrigger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          effect<span class="token punctuation">,</span>
          target<span class="token punctuation">,</span>
          key<span class="token punctuation">,</span>
          type<span class="token punctuation">,</span>
          newValue<span class="token punctuation">,</span>
          oldValue<span class="token punctuation">,</span>
          oldTarget
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u603B\u7ED3\u4E00\u4E0B\u5F53\u7ED9\u5BF9\u8C61\u6DFB\u52A0\u4E00\u4E2A\u5C5E\u6027\u65F6\u7684\u5927\u81F4\u8FC7\u7A0B\uFF1A</p><ol><li><p>\u9996\u5148\u7ED9\u5F53\u524D <code>target</code> \u6DFB\u52A0\u65B0\u7684\u5C5E\u6027\u5E76\u8D4B\u503C</p></li><li><p>\u8C03\u7528<code>trigger(target, &quot;add&quot; /* ADD */, key, value);</code>\uFF0C\u4ECE <code>ITERATE_KEY</code> \u4E2D\u53D6\u51FA <code>effect</code> \u4E8B\u4EF6\u52A0\u5165\u5230\u961F\u5217</p></li></ol><p><code>ITERATE_KEY</code> \u662F\u901A\u8FC7 <code>proxy</code> \u52AB\u6301 <code>ownKeys</code> \u5C5E\u6027\u6DFB\u52A0\u7684\u4E8B\u4EF6\u6536\u96C6</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">debugger</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;iterate&quot;</span> <span class="token comment">/* ITERATE */</span><span class="token punctuation">,</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">:</span> <span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u662F\u5BF9\u8C61 <code>ITERATE_KEY</code> \u5C5E\u6027\uFF0C \u6570\u7EC4\u7684\u8BDD\u5C31\u6DFB\u52A0 <code>length</code> \u5C5E\u6027\uFF0C\u81F3\u5C11\u662F\u600E\u4E48\u89E6\u53D1\u7684 <code>ownKeys</code> \u65B9\u6CD5 \u6CA1\u627E\u5230\u4F4D\u7F6E...</p><ol start="3"><li>\u5F53\u7EC4\u4EF6\u66F4\u65B0\u7684\u65F6\u5019\u5C31\u4F1A\u91CD\u65B0\u53D6\u65B0\u589E\u7684\u5C5E\u6027\uFF0C\u5E76\u7ED9\u5C5E\u6027\u6DFB\u52A0 <code>effect</code> \u4E8B\u4EF6\u6536\u96C6</li></ol><h2 id="\u6570\u7EC4\u7C7B\u578B\u7684\u66F4\u65B0" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4\u7C7B\u578B\u7684\u66F4\u65B0" aria-hidden="true">#</a> \u6570\u7EC4\u7C7B\u578B\u7684\u66F4\u65B0</h2><p>\u5C06\u4E0A\u9762\u7684\u4F8B\u5B50\u6539\u6210\u6570\u636E\u7C7B\u578B\uFF1A <code>counter: [1,2,3]</code>\uFF0C\u5F53\u6211\u4EEC\u4F7F\u7528 <code>counter.push(4)</code> \u65F6\u770B\u4E0B\u4EE3\u7801\u7684\u8FD0\u884C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7565</span>
  <span class="token keyword">const</span> targetIsArray <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly <span class="token operator">&amp;&amp;</span> targetIsArray <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u7565</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// arrayInstrumentations \u65B9\u6CD5\u5B9A\u4E49</span>
  <span class="token keyword">const</span> arrayInstrumentations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">&#39;includes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;indexOf&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lastIndexOf&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> method <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arrayInstrumentations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">track</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">&quot;get&quot;</span> <span class="token comment">/* GET */</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// we run the method using the original args first (which may be reactive)</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> res <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// if that didn&#39;t work, run it again using raw values.</span>
        <span class="token keyword">return</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>toRaw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pop&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unshift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;splice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> method <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    arrayInstrumentations<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u9996\u5148\u5F53\u8BBF\u95EE <code>push</code> \u5C5E\u6027\u65F6\uFF0C\u4E5F\u4F1A\u88AB <code>proxy</code> \u52AB\u6301\uFF0C\u6839\u636E\u4E0B\u6587\u4E2D\u7684\u4EE3\u7801\uFF0C\u4F7F\u7528\u5C06\u4F1A\u6267\u884C <code>return Reflect.get(arrayInstrumentations, key, receiver);</code></p><p><code>arrayInstrumentations</code> \u662F\u91CD\u5199\u540E\u7684\u4E00\u4E9B\u6570\u7EC4\u65B9\u6CD5\u7684\u96C6\u5408\uFF0C\u6240\u4EE5\u5C06\u8FD4\u56DE <code>arrayInstrumentations.push</code> \u65B9\u6CD5</p><p>\u4E4B\u540E\u6267\u884C <code>push(4)</code> \u65F6\uFF0C \u5C06\u6267\u884C\u4EE5\u4E0B\u8BED\u53E5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token comment">// \u5B9E\u9645\u505A\u7684\u4E8B\u60C5\u662F  trackStack.push(false);  \u7ED9 trackStack \u6DFB\u52A0\u4E00\u4E2A false \u6807\u8BC6</span>
  <span class="token function">pauseTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// \u6267\u884C\u771F\u6B63\u7684 Array.push \u65B9\u6CD5\uFF0C\u6B64\u65F6\u5E94\u8BE5\u7B49\u4EF7\u4E8E counter[counter.length = 3] = 4 \uFF0C\u6240\u4EE5\u5728\u83B7\u53D6\u5C5E\u6027 \`3\` \u65F6, \u4F1A\u88AB set \u52AB\u6301</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u4EE3\u7801\u4E3B\u8981\u505A\u7684\u4E8B\u60C5</p><ol><li><p>pauseTracking()\uFF1A\u5B9E\u9645\u505A\u7684\u4E8B\u60C5\u662F <code>trackStack.push(false)</code>; \u7ED9 <code>trackStack</code> \u6DFB\u52A0\u4E00\u4E2A <code>false</code> \u6807\u8BC6, \u6682\u505C\u4F9D\u8D56\u6536\u96C6\uFF0C\u4E5F\u5C31\u610F\u5473\u5728\u6B64\u671F\u95F4\u6267\u884C <code>track</code> \u65F6\uFF0C\u4E0D\u4F1A\u53BB\u6536\u96C6\u4F9D\u8D56</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>\u5F53\u6267\u884C <code>const res = method.apply(this, args)</code>\uFF0C \u4F1A\u88AB <code>set</code> \u52AB\u6301</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token parameter">shallow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5F53\u524D\u4F8B\u5B50 key = 3</span>
    <span class="token comment">// value = 4</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&quot;set&quot;</span> <span class="token comment">/* SET */</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> oldTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">effectsToAdd</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effectsToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        effectsToAdd<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> activeEffect <span class="token operator">||</span> effect<span class="token punctuation">.</span>allowRecurse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;clear&quot;</span> <span class="token comment">/* CLEAR */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// also run for iteration key on ADD | DELETE | Map.SET</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;add&quot;</span> <span class="token comment">/* ADD */</span><span class="token operator">:</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
          <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// new index added to array -&gt; length changes</span>
            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8DDF\u4E4B\u524D <code>set</code> \u6D41\u7A0B\u7C7B\u578B\u7C7B\u578B\uFF0C\u4E4B\u540E\u5728 <code>trigger</code> \u65B9\u6CD5\u6839\u636E <code>length</code> \u53D6\u51FA\u5F53\u524D\u5BF9\u8C61\u6536\u96C6\u7684 <code>effect</code>\uFF0C\u6DFB\u52A0\u5230\u5FAE\u4EFB\u52A1\u961F\u5217\u4E2D\u8FDB\u884C\u89C6\u56FE\u66F4\u65B0</p><p>\u90A3\u4E48\u4F7F\u7528\u6570\u7EC4\u4E0B\u6807\u66F4\u6539\u6570\u7EC4\u4E5F\u662F\u540C\u7406</p><h2 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h2><p>\u5176\u5B9E\u601D\u8DEF\u8FD8\u662F\u8DDF vue2.0 \u7684\u5DEE\u4E0D\u591A</p><ol><li><p>Vue \u5728\u521D\u59CB\u5316\u7684\u65F6\u5019\u4F7F\u7528 <code>proxy</code> \u65B9\u6CD5\u4EE3\u7406\uFF0C\u5173\u4E8E\u6536\u96C6\u5668\u4E24\u4E2A\u7248\u672C\u7684\u533A\u522B</p><p>Vue2.0 \u4F1A\u4E3A\u6BCF\u4E2A\u5C5E\u6027\u5B9E\u4F8B\u5316\u4E00\u4E2A\u4E8B\u4EF6\u6536\u96C6\u5668 <code>Dep</code></p><p>Vue3.0 \u5219\u901A\u8FC7\u5168\u5C40\u53D8\u91CF <code>const targetMap = new WeakMap();</code> \u6765\u505A\u4E8B\u4EF6\u6536\u96C6\u5BB9\u5668\uFF0C<code>targetMap</code> \u7684 <code>key</code> \u662F\u4EE3\u7406\u5BF9\u8C61\uFF0C<code>value</code> \u662F <code>depsMap</code>(\u4E00\u4E2A\u6536\u96C6\u4E8B\u4EF6\u5BB9\u5668\u7684\u5BB9\u5668)</p><p><code>depsMap</code> \u662F <code>new Map()</code> \u7ED3\u6784\uFF0C\u4EE3\u7406\u5BF9\u8C61\u7684\u6BCF\u4E2A\u5C5E\u6027\u6536\u96C6\u7684\u4E8B\u4EF6\u5C06\u5B58\u50A8\u5728\u8FD9\u4E2A <code>depsMap</code> \u4E2D\uFF0C\u6240\u4EE5\u627E\u5C5E\u6027\u6536\u96C6\u7684\u4E8B\u4EF6\u65F6\uFF0C\u5148\u6839\u636E\u8FD9\u4E2A\u5C5E\u6027\u6240\u5C5E\u5BF9\u8C61\u4ECE <code>targetMap</code> \u627E <code>depsMap</code>, \u5728\u6839\u636E\u5177\u4F53\u5C5E\u6027\u4ECE <code>depsMap</code> \u627E\u4E8B\u4EF6</p></li><li><p>\u5728\u7EC4\u4EF6\u6E32\u67D3\u7684\u65F6\u5019\uFF0C\u4F1A\u751F\u6210\u4E00\u4E2A <code>effect</code> \u65B9\u6CD5\uFF0C\u5E76\u5C06\u5F53\u524D <code>effect</code> \u4FDD\u5B58\u5230\u5168\u5C40 <code>activeEffect</code>\u4E2D\uFF0C\u4E4B\u540E\u5728\u6267\u884C\u6E32\u67D3\u64CD\u4F5C\u7684\u65F6\u5019\u4F1A\u8BFB\u53D6 <code>data</code> \u7684\u5C5E\u6027\uFF0C \u5E76\u88AB <code>get</code> \u52AB\u6301\uFF0C<code>get</code> \u65B9\u6CD5\u4E2D\u5C06\u4FDD\u5B58\u5728\u5168\u5C40\u7684 <code>activeEffect</code> \u6536\u96C6\u5230 <code>depsMap</code> \u4E2D</p></li><li><p>\u4E4B\u540E\u5F53 <code>data</code> \u5C5E\u6027\u88AB\u66F4\u6539\u65F6\uFF0C\u4F1A\u88AB <code>set</code> \u52AB\u6301\uFF0C\u4ECE <code>depsMap</code> \u53D6\u51FA <code>effect</code> \u5E76\u6267\u884C</p></li></ol>`,70),o=[e];function c(l,i){return s(),a("div",null,o)}var k=n(p,[["render",c],["__file","\u54CD\u5E94\u5F0F\u539F\u7406.html.vue"]]);export{k as default};
