import{_ as a,r as e,o as p,c as t,b as n,d as o,a as c,e as l}from"./app-Ald2FT2K.js";const i="/lanjz/assets/f-NDbuazrE.png",r="/lanjz/assets/fiber-C6hznnLO.jpg",d="/lanjz/assets/f_4-ZHTo8kgn.jpeg",u="/lanjz/assets/f_5-IIEqG3di.jpeg",k={},m=l(`<h1 id="fiber" tabindex="-1"><a class="header-anchor" href="#fiber" aria-hidden="true">#</a> Fiber</h1><p>Fiber 就是 React 16 实现的一套新的更新机制，让 React 的更新过程变得可控，避免了之前采用递归需要一气呵成影响性能的做法</p><h2 id="react-瓶颈" tabindex="-1"><a class="header-anchor" href="#react-瓶颈" aria-hidden="true">#</a> React 瓶颈</h2><p><strong>React 的核心思想：</strong> 内存中维护一颗虚拟DOM树，数据变化时（setState），自动更新虚拟 DOM，得到一颗新树，然后 Diff 新老虚拟 DOM 树，找到有变化的部分，得到一个 Change(Patch)，将这个 Patch 加入队列，最终批量更新这些 Patch 到 DOM 中</p><p>React 追求的是 “快速响应”，那么，“快速响应“的制约因素都有什么呢？</p><ul><li><p>CPU的瓶颈：当项目变得庞大、组件数量繁多、遇到大计算量的操作或者设备性能不足使得页面掉帧，导致卡顿</p></li><li><p>IO的瓶颈：发送网络请求后，由于需要等待数据返回才能进一步操作导致不能快速响应</p></li></ul><p>这两个问题一直也是最影响前端开发体验的地方，一个会造成卡顿，一个会造成白屏，本文要聊的fiber 架构主要就是用来解决 CPU的瓶颈</p><h3 id="vs-vue3" tabindex="-1"><a class="header-anchor" href="#vs-vue3" aria-hidden="true">#</a> vs Vue3</h3><p><strong>Vue3</strong></p><p>Vue3.0 提出动静结合的 DOM diff 思想，动静结合的 DOM diff 其实是在预编译阶段进行了优化。之所以能够做到预编译优化，是因为 Vue core 可以静态分析 template，在解析模版时，整个 parse 的过程是利用正则表达式顺序解析模板，当解析到开始标签、闭合标签和文本的时候都会分别执行对应的回调函数，来达到构造 AST 树的目的。</p><p>借助静态编译过程，Vue 可以做很多优化。比如在预编译时标记出模版中的动态节点和静态节点，再次进行渲染前 diff 时就可以跳过“永远不会变化的节点”，而只需要对比“可能会变化的动态节点”。从而提高了 diff 和组件更新的效率</p><p><strong>React</strong></p><p>而 React 就是局部重新渲染，React 拿到的或者说掌管的，所负责的就是一堆递归 <code>React.createElement</code> 的执行调用（参考下方经过Babel转换的代码），它无法从模版层面进行静态分析。JSX 和手写的 <code>render function</code> 是完全动态的，过度的灵活性导致运行时可以用于优化的信息不足。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//JSX 写法：</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>六个问题助你理解 React Fiber<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>React<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>Vue<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归 React.createElement：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Babel转换后</span>
React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
  <span class="token keyword">null</span><span class="token punctuation">,</span>
 React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token string">&quot;\\u516D\\u4E2A\\u95EE\\u9898\\u52A9\\u4F60\\u7406\\u89E3 React Fiber&quot;</span>
 <span class="token punctuation">)</span><span class="token punctuation">,</span>
 React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">null</span><span class="token punctuation">,</span>
   React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;React&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
   React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Vue&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>template vs jsx</strong></p><ul><li><p>JSX 具有 JavaScript 的完整表现力，可以构建非常复杂的组件。但是灵活的语法，也意味着引擎难以理解，无法预判开发者的用户意图，从而难以优化性能</p></li><li><p>Template 模板是一种非常有约束的语言，你只能以某种方式去编写模板。</p></li></ul><h3 id="react-15-架构" tabindex="-1"><a class="header-anchor" href="#react-15-架构" aria-hidden="true">#</a> React 15 架构</h3><p>React15架构可以分为两层：</p><p>Reconciler（协调器）—— React 会自顶向下通过递归，遍历新数据生成新的 Virtual DOM，然后通过 Diff 算法，找到需要变更的元素(Patch)，放到更新队列里面去</p><p>Renderer（渲染器）—— 遍历更新队列，通过调用宿主环境的API，实际更新渲染对应元素。宿主环境，比如 DOM、Native、WebGL 等。</p><p>在React15及以前，Reconciler 采用递归的方式创建虚拟DOM，递归过程是不能中断的。如果组件树的层级很深，递归会占用线程很多时间，递归更新时间超过了16ms，用户交互就会卡顿。</p><p>为了解决这个问题，React16将递归的无法中断的更新重构为异步的可中断更新，由于曾经用于递归的虚拟DOM数据结构已经无法满足需要。于是，全新的Fiber架构应运而生。</p><h3 id="react-16-架构" tabindex="-1"><a class="header-anchor" href="#react-16-架构" aria-hidden="true">#</a> React 16 架构</h3><p>为了解决同步更新长时间占用线程导致页面卡顿的问题，也为了探索运行时优化的更多可能，React开始重构并一直持续至今。重构的目标是实现Concurrent Mode（并发模式）。</p><p>从v15到v16，React团队花了两年时间将源码架构中的 Stack Reconciler 重构为 Fiber Reconciler</p><p>React16架构可以分为三层：</p><p>Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入Reconciler</p><p>Reconciler（协调器）—— 负责找出变化的组件：更新工作从递归变成了可以中断的循环过程Reconciler内部采用了Fiber的架构</p><p>Renderer（渲染器）—— 负责将变化的组件渲染到页面上</p><h3 id="react-17-优化" tabindex="-1"><a class="header-anchor" href="#react-17-优化" aria-hidden="true">#</a> React 17 优化</h3><p>React16的 expirationTimes模型 只能区分是否 <code>&gt;=expirationTimes</code> 决定节点是否更新。React17的 lanes模型 可以选定一个更新区间，并且动态的向区间中增减优先级，可以处理更细粒度的更新</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Lane用二进制位表示任务的优先级，方便优先级的计算（位运算），不同优先级占用不同位置的“赛道”，而且存在批的概念，优先级越低，“赛道”越多。高优先级打断低优先级，新建的任务需要赋予什么优先级等问题都是Lane所要解决的问题</p></div><p>Concurrent Mode的目的是实现一套可中断/恢复的更新机制。其由两部分组成：</p><ul><li><p>一套协程架构：Fiber Reconciler</p></li><li><p>基于协程架构的启发式更新算法：控制协程架构工作方式的算法</p></li></ul><p>为了解决之前提到解决方案遇到的问题，提出了以下几个目标：</p><ul><li><p>暂停工作，稍后再回来。</p></li><li><p>为不同类型的工作分配优先权。</p></li><li><p>重用以前完成的工作。</p></li><li><p>如果不再需要，则中止工作。</p></li></ul><p>为了做到这些，我们首先需要一种方法将任务分解为单元。从某种意义上说，这就是 Fiber，Fiber 代表一种工作单元</p><p>但是仅仅是分解为单元也无法做到中断任务，因为函数调用栈就是这样，每个函数为一个工作，每个工作被称为堆栈帧，它会一直工作，直到堆栈为空，无法中断</p><p>所以我们需要一种增量渲染的调度，那么就需要重新实现一个堆栈帧的调度，这个堆栈帧可以按照自己的调度算法执行他们。另外由于这些堆栈是可以自己控制的，所以可以加入并发或者错误边界等功能。</p><p>因此 Fiber 就是重新实现的堆栈帧，本质上 Fiber 也可以理解为是一个虚拟的堆栈帧，将可中断的任务拆分成多个子任务，通过按照优先级来自由调度子任务，分段更新，从而将之前的同步渲染改为异步渲染</p><p>所以我们可以说 Fiber 是一种数据结构(堆栈帧)，也可以说是一种解决可中断的调用任务的一种解决方案，它的特性就是时间分片(time slicing)和暂停(supense)。</p><h2 id="什么是-fiber" tabindex="-1"><a class="header-anchor" href="#什么是-fiber" aria-hidden="true">#</a> 什么是 Fiber</h2><p>Fiber 是 React 的最小工作单元，在理解 Fiber 之前，先梳理一下 Fiber 与 <code>ReactElement</code>、 DOM 对象之间的关系</p><ul><li><p>ReactElement 对象: 所有采用 jsx 语法书写的节点, 都会被编译器转换, 最终会以 <code>React.createElement(...)</code> 的方式创建出来一个与之对应的 <code>ReactElement </code>对象</p></li><li><p>fiber 对象: fiber 对象是通过 <code>ReactElement对象</code> 进行创建的, 多个 <code>fiber对象</code> 构成了一棵 <code>fiber树</code>, <code>fiber树</code> 是构造 DOM 树的数据模型, <code>fiber树</code> 的任何改动, 最后都体现到 DOM 树</p></li><li><p>DOM 对象: 最终要呈现的目标也就是文档对象模型</p></li></ul><p>eg:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>header<span class="token operator">&gt;</span>header<span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span>footer<span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 JSX 代码到 DOM 节点的转换过程:</p><p><img src="`+i+`" alt=""></p><p>小结：</p><ul><li><p>平时书写的 JSX, 也就是 <code>ReactElement对象</code></p></li><li><p><code>fiber 树</code>是通过 <code>ReactElement</code> 生成的, 如果脱离了 <code>ReactElement</code> , <code>fiber树</code>也无从谈起. 所以是 <code>ReactElement树</code> (不是严格的树结构, 为了方便也称为树)驱动 <code>fiber树</code>.</p></li><li><p><code>fiber树</code> 是 DOM 树的数据模型, <code>fiber树</code> 驱动 DOM 树</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 源码定义：</span>
<span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">tag</span><span class="token operator">:</span> WorkTag<span class="token punctuation">,</span>
  <span class="token literal-property property">pendingProps</span><span class="token operator">:</span> mixed<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> TypeOfMode<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token comment">// Fiber元素的静态属性相关</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span> <span class="token comment">// fiber的key</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// fiber对应的DOM元素的标签类型，div、p...</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// fiber的实例，类组件场景下，是组件的类，HostComponent场景，是dom元素</span>

  <span class="token comment">// Fiber 链表相关</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向父级fiber</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 指向子fiber</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 同级兄弟fiber</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// ref相关</span>

  <span class="token comment">// Fiber更新相关</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 存储update的链表</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 类组件存储fiber的状态，函数组件存储hooks链表</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>

  <span class="token comment">// Effects</span>
  <span class="token comment">// flags原为effectTag，表示当前这个fiber节点变化的类型：增、删、改</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// effect链相关，也就是那些需要更新的fiber节点</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span> <span class="token comment">// 该fiber中的优先级，它可以判断当前节点是否需要更新</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>childLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span><span class="token comment">// 子树中的优先级，它可以判断当前节点的子树是否需要更新</span>

  <span class="token comment">/*
  * 可以看成是workInProgress（或current）树中的和它一样的节点，
  * 可以通过这个字段是否为null判断当前这个fiber处在更新还是创建过程
  * */</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fiber树的结构" tabindex="-1"><a class="header-anchor" href="#fiber树的结构" aria-hidden="true">#</a> Fiber树的结构</h2><p>从上的源码中可以看到一个 fiber 节点包含了很多属性，这里先看以下几个属性：</p><ul><li><p>Type：<code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, 原生标签等. 及 react 中的 <code>宿主组件 (string)</code>, <code>类</code> 或者 <code>函数复合组件</code></p></li><li><p>Child：指向子fiber</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;Name&gt;</code> 组件的 <code>child</code> 就是返回的 <code>&lt;div&gt;</code></p></li><li><p>Sibling: 同级兄弟fiber</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">Name</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&lt;</span>Customdiv1 <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Customdiv2 <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;Customdiv1&gt;</code> <code>sibling</code> 就是返回的 <code>&lt;Customdiv2 /&gt;</code></p></li><li><p>Return: 返回给父 fiber 节点</p></li></ul><p>通过以上属性串联各个 fiber 形成 fiber 树, 所以 fiber 树是一个类似单向链表的结构</p><p><img src="`+r+'" alt=""></p><h2 id="vs-virtual-dom" tabindex="-1"><a class="header-anchor" href="#vs-virtual-dom" aria-hidden="true">#</a> vs Virtual Dom</h2><p>Virtual Dom 是对 渲染的 Dom 结构的对象表示，Fiber是对Virtual DOM的一种升级</p><ul><li><p>Virtual DOM使用栈来调度需要更新的内容，中间无法中断、暂停。Fiber支持中断，在浏览器渲染帧里面分片执行更新任务</p></li><li><p>Fiber结构让虚拟节点记录父节点、兄弟节点、子节点，形成链表树，你可以从任意顶点遍历到任意子节点，并返回</p></li><li><p>Fiber的分片操作使用 <code>requestAnimationFrame</code>(高优先级任务)和 <code>requestIdleCallback</code> (低优先级任务)</p></li><li><p>Fiber 对任务的执行优先级进行标记，高优先级的任务可以先执行，实现架构上的无阻塞</p></li></ul><h2 id="fiber-更新" tabindex="-1"><a class="header-anchor" href="#fiber-更新" aria-hidden="true">#</a> Fiber 更新</h2><p><strong>Fiber 是如何工作的</strong></p><p>当执行 <code>ReactDOM.render()</code> 和 <code>setState</code> 时更新步骤如下：</p><ol><li><p>将创建的更新加入任务队列，等待调度</p></li><li><p>在 <code>requestIdleCallback</code> 空闲时执行任务</p></li><li><p>从根节点开始遍历 Fiber Node，并且构建 WokeInProgress Tree</p></li><li><p>生成 effectList。</p></li><li><p>根据 EffectList 更新 DOM</p></li></ol><p>下面是一个详细的执行过程图：</p><p><img src="'+d+`" alt=""></p><ol><li><p>第一部分从 <code>ReactDOM.render()</code> 方法开始，把接收的 React Element 转换为 Fiber 节点，并为其设置优先级，创建 Update，加入到更新队列，这部分主要是做一些初始数据的准备。</p></li><li><p>第二部分主要是三个函数：scheduleWork、requestWork、performWork，即安排工作、申请工作、正式工作三部曲，React 16 新增的异步调用的功能则在这部分实现，这部分就是 Schedule 阶段，在这个获取到可执行的时间片，第三部分才会继续执行。具体是如何调度的，后面文章再介绍，这是 React 调度的关键过程。</p></li><li><p>第三部分是一个大循环，遍历所有的 Fiber 节点，通过 Diff 算法计算所有更新工作，产出 EffectList 给到 commit 阶段使用，这部分的核心是 beginWork 函数，这部分基本就是 Fiber Reconciler ，包括 reconciliation 和 commit 阶段。</p></li></ol><h2 id="fiber-node" tabindex="-1"><a class="header-anchor" href="#fiber-node" aria-hidden="true">#</a> Fiber Node</h2><p>FIber Node，承载了非常关键的上下文信息，可以说是贯彻整个创建和更新的流程，下来分组列了一些重要的 Fiber 字段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>  <span class="token operator">...</span> 
 <span class="token comment">// 跟当前Fiber相关本地状态（比如浏览器环境就是DOM节点） </span>
 <span class="token literal-property property">stateNode</span><span class="token operator">:</span> any<span class="token punctuation">,</span>    <span class="token comment">// 单链表树结构</span>
 <span class="token keyword">return</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment">// 指向他在Fiber节点树中的\`parent\`，用来在处理完这个节点之后向上返回 </span>
 <span class="token literal-property property">child</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment">// 指向自己的第一个子节点</span>
 <span class="token literal-property property">sibling</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token comment">// 指向自己的兄弟结构，兄弟节点的return指向同一个父节点  </span>
 <span class="token comment">// 更新相关 </span>
 <span class="token literal-property property">pendingProps</span><span class="token operator">:</span> any<span class="token punctuation">,</span>  <span class="token comment">// 新的变动带来的新的props</span>
 <span class="token literal-property property">memoizedProps</span><span class="token operator">:</span> any<span class="token punctuation">,</span>  <span class="token comment">// 上一次渲染完成之后的props</span>
 <span class="token literal-property property">updateQueue</span><span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token comment">// 该Fiber对应的组件产生的Update会存放在这个队列里面 </span>
  <span class="token literal-property property">memoizedState</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token comment">// 上一次渲染的时候的state </span>
 <span class="token comment">// Scheduler 相关</span>
 <span class="token literal-property property">expirationTime</span><span class="token operator">:</span> ExpirationTime<span class="token punctuation">,</span>  <span class="token comment">// 代表任务在未来的哪个时间点应该被完成，不包括他的子树产生的任务  // 快速确定子树中是否有不在等待的变化</span>
 <span class="token literal-property property">childExpirationTime</span><span class="token operator">:</span> ExpirationTime<span class="token punctuation">,</span> 
<span class="token comment">// 在Fiber树更新的过程中，每个Fiber都会有一个跟其对应的Fiber </span>
<span class="token comment">// 我们称他为\`current &lt;==&gt; workInProgress\`</span>
<span class="token comment">// 在渲染完成之后他们会交换位置 </span>
<span class="token comment">// alternate: Fiber | null,  </span>
<span class="token comment">// Effect 相关的 </span>
 <span class="token literal-property property">effectTag</span><span class="token operator">:</span> SideEffectTag<span class="token punctuation">,</span> <span class="token comment">// 用来记录Side Effect </span>
  <span class="token literal-property property">nextEffect</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 单链表用来快速查找下一个side effect</span>
  <span class="token literal-property property">firstEffect</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token comment">// 子树中第一个side effect  </span>
  <span class="token literal-property property">lastEffect</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 子树中最后一个side effect </span>
 <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fiber-reconciler" tabindex="-1"><a class="header-anchor" href="#fiber-reconciler" aria-hidden="true">#</a> Fiber Reconciler</h3><p>在第二部分，进行 Schedule 完，获取到时间片之后，就开始进行 reconcile。</p><p>Fiber Reconciler 是 React 里的调和器，这也是任务调度完成之后，如何去执行每个任务，如何去更新每一个节点的过程，对应上面的第三部分。</p><p>reconcile 过程分为2个阶段（phase）：</p><ol><li><p>（可中断）render/reconciliation 通过构造 WorkInProgress Tree 得出 Change。</p></li><li><p>（不可中断）commit 应用这些DOM change。</p></li></ol><h3 id="reconciliation-阶段" tabindex="-1"><a class="header-anchor" href="#reconciliation-阶段" aria-hidden="true">#</a> reconciliation 阶段</h3><p>在 reconciliation 阶段的每个工作循环中，每次处理一个 Fiber，处理完可以中断/挂起整个工作循环。通过每个节点更新结束时向上归并 Effect List 来收集任务结果，reconciliation 结束后，根节点的 Effect List里记录了包括 DOM change 在内的所有 Side Effect</p><p>render 阶段可以理解为就是 Diff 的过程，得出 Change(Effect List)，会执行声明如下的声明周期方法：</p><ul><li><p>[UNSAFE_]componentWillMount（弃用）</p></li><li><p>[UNSAFE_]componentWillReceiveProps（弃用）</p></li><li><p>getDerivedStateFromProps</p></li><li><p>shouldComponentUpdate</p></li><li><p>[UNSAFE_]componentWillUpdate（弃用）</p></li><li><p>render</p></li></ul><p>由于 reconciliation 阶段是可中断的，一旦中断之后恢复的时候又会重新执行，所以很可能 reconciliation 阶段的生命周期方法会被多次调用，所以在 reconciliation 阶段的生命周期的方法是不稳定的，我想这也是 React 为什么要废弃 <code>componentWillMount</code> 和 <code>componentWillReceiveProps</code> 方法而改为静态方法 <code>getDerivedStateFromProps</code> 的原因吧。</p><h3 id="commit-阶段" tabindex="-1"><a class="header-anchor" href="#commit-阶段" aria-hidden="true">#</a> commit 阶段</h3><p>commit 阶段可以理解为就是将 Diff 的结果反映到真实 DOM 的过程</p><p>在 commit 阶段，在 commitRoot 里会根据 effect的 effectTag，具体 effectTag 见源码 ，进行对应的插入、更新、删除操作，根据 tag 不同，调用不同的更新方法</p><p>commit 阶段会执行如下的声明周期方法</p><p>getSnapshotBeforeUpdate componentDidMount componentDidUpdate componentWillUnmount</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>注意区别 reconciler、reconcile 和 reconciliation，reconciler 是调和器，是一个名词，可以说是 React 工作的一个模块，协调模块；reconcile 是调和器调和的动作，是一个动词；而 reconciliation 只是 reconcile 过程的第一个阶段。</p></div><h3 id="fiber-tree-和-workinprogress-tree" tabindex="-1"><a class="header-anchor" href="#fiber-tree-和-workinprogress-tree" aria-hidden="true">#</a> Fiber Tree 和 WorkInProgress Tree</h3><p>React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。它反映了用于渲染 UI 的应用程序的状态。这棵树通常被称为 current 树（当前树，记录当前页面的状态）。</p><p>在后续的更新过程中（setState），每次重新渲染都会重新创建 Element, 但是 Fiber 不会，Fiber 只会使用对应的 Element 中的数据来更新自己必要的属性，</p><p>Fiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复</p><p>每一个 Fiber Node 节点与 Virtual Dom 一一对应，所有 Fiber Node 连接起来形成 Fiber tree, 是个单链表树结构，如下图所示：</p><p><img src="`+u+'" alt=""></p><p><strong>当 render 的时候有了这么一条单链表，当调用 setState 的时候又是如何 Diff 得到 change 的呢？</strong></p><p>采用的是一种叫双缓冲技术（double buffering），这个时候就需要另外一颗树：WorkInProgress Tree，它反映了要刷新到屏幕的未来状态</p><p>WorkInProgress Tree 构造完毕，得到的就是新的 Fiber Tree，然后喜新厌旧（把 current 指针指向WorkInProgress Tree，丢掉旧的 Fiber Tree）就好了</p><p>这样做的好处：</p><p>能够复用内部对象（fiber） 节省内存分配、GC的时间开销 就算运行中有错误，也不会影响 View 上的数据</p><p>每个 Fiber上都有个alternate属性，也指向一个 Fiber，创建 WorkInProgress 节点时优先取alternate，没有的话就创建一个</p><p>创建 WorkInProgress Tree 的过程也是一个 Diff 的过程，Diff 完成之后会生成一个 Effect List，这个 Effect List 就是最终 Commit 阶段用来处理副作用的阶段</p>',100),v={href:"https://zhuanlan.zhihu.com/p/98295862",target:"_blank",rel:"noopener noreferrer"};function b(f,h){const s=e("ExternalLinkIcon");return p(),t("div",null,[m,n("p",null,[n("a",v,[o("深入理解 React Fiber"),c(s)])])])}const y=a(k,[["render",b],["__file","Fiber.html.vue"]]);export{y as default};
