import{_ as c,r as e,o as i,c as l,b as n,d as s,a,w as u,e as p}from"./app-lkvzo8Ck.js";const r="/lanjz/assets/puguang-r1NjlOik.png",k="/lanjz/assets/wuhenmiaidian-QZ4Lzv5c.png",d="/lanjz/assets/xpath-ukzUYXA9.png",v="/lanjz/assets/可视化demo-hDUtbio6.png",m="/lanjz/assets/functionDeclaration-C349kyhP.png",b="/lanjz/assets/class-method-yDbsj-op.png",h="/lanjz/assets/functionExpress-UNv6kIgK.png",g="/lanjz/assets/arrowFunctin--CRtjSdA.png",y={},f=p('<h1 id="埋点方案" tabindex="-1"><a class="header-anchor" href="#埋点方案" aria-hidden="true">#</a> 埋点方案</h1><h2 id="曝光埋点" tabindex="-1"><a class="header-anchor" href="#曝光埋点" aria-hidden="true">#</a> 曝光埋点</h2><p>曝光埋点一般是用来统计页面某个模块、区域能被“看到”的次数</p><p>比如：为了配合运营活动，需要在首页的中部的位置放置一个活动入口的banner图，给这次活动引流。</p><p>对于首页的产品经理来说，需要衡量流量的分发效率，因为资源有限，同样的楼层可以给到更好活动，这样可以提升每一个流量的价值；对于运营来说，需要衡量活动的对用户吸引力，有多少用户会点击进来，参与活动促成转化</p><h3 id="点击率" tabindex="-1"><a class="header-anchor" href="#点击率" aria-hidden="true">#</a> 点击率</h3><p>一般点击率的计算公式如下所示：CTR=点击数/曝光数</p><p>如下图，页面滑动过程中A、B、C、D模块出现在视口内采集SDK会自动上报埋点日志：</p><p><img src="'+r+'" alt=""></p><p>实现关键点：</p><ul><li><p>一般而言产品上会要求页面上某个模块一定面积连续一段时间出现在视口才是有效曝光（如30%、500ms）</p></li><li><p>性能，几乎所有的第三方采集平台都会在曝光埋点的说明文档里注明：“请不要配置过多的曝光埋点，这会严重影响你的页面性能”</p></li></ul><h3 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路" aria-hidden="true">#</a> 实现思路</h3>',12),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"observer",-1),_=n("code",null,"observer",-1),S=n("li",null,[n("p",null,"如果元素曝光了，则缓存到容器队列中，如果在 500ms 内曝光消失，则视为无效曝光元素，此时将这个元素移除")],-1),j=n("li",null,[n("p",null,"当容器队列存在元素时，执行一次定时器，每 2s 上报一次数据")],-1),N=n("li",null,[n("p",null,[s("为了防止上报前页面关闭，所以需要将 Observer 里的数据也缓存到 "),n("code",null,"localStorage"),s(" 中")])],-1),T=n("li",null,[n("p",null,[s("下次进入页面先检查 "),n("code",null,"localStorage"),s(" 是否有值，有的话直接上报。（这一步的数据是存在丢失、不准确等情况）")])],-1),I=p(`<p><strong>封装Exposure类</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// polyfill</span>
<span class="token keyword">import</span> <span class="token string">&#39;intersection-observer&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 可以把节流的时间调大一点，默认是100ms</span>
<span class="token comment">// IntersectionObserver.prototype[&#39;THROTTLE_TIMEOUT&#39;] = 300;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Exposure</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">validTime <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>temStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timerOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>validTime <span class="token operator">=</span> validTime
        <span class="token keyword">this</span><span class="token punctuation">.</span>localStorageKey <span class="token operator">=</span> <span class="token string">&#39;exp-data&#39;</span>
        <span class="token comment">// 全局只会实例化一次Exposure类，init方法也只会执行一次</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token comment">// 检查 localStorage 中是否存在数据</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dotFromLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> curTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;data-des&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>curTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        self<span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        self<span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>curTime<span class="token punctuation">,</span> <span class="token punctuation">[</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>self<span class="token punctuation">.</span>timerOut<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        self<span class="token punctuation">.</span>timerOut <span class="token operator">=</span> <span class="token boolean">true</span>
                        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            self<span class="token punctuation">.</span>timerOut <span class="token operator">=</span> <span class="token boolean">false</span>
                            self<span class="token punctuation">.</span><span class="token function">uploadDot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>curTime <span class="token operator">-</span> key <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>validTime<span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                                <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                                    value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                                    <span class="token keyword">break</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                self<span class="token punctuation">.</span><span class="token function">storeIntoLocalstorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">&quot;0px&quot;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.3</span> <span class="token comment">// 元素暴躁出来的阈值</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token function">uploadDot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">let</span> curTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>curTime <span class="token operator">-</span> key <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>validTime<span class="token punctuation">)</span><span class="token punctuation">{</span>
                value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                        <span class="token literal-property property">des</span><span class="token operator">:</span> item<span class="token punctuation">.</span>getAttribute<span class="token punctuation">[</span><span class="token string">&#39;data-des&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token literal-property property">time</span><span class="token operator">:</span> key
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">storeIntoLocalstorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
        <span class="token comment">// 上传</span>
    <span class="token punctuation">}</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_observer <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>el<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">storeIntoLocalstorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span>  data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>temStore<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">des</span><span class="token operator">:</span> item<span class="token punctuation">.</span>getAttribute<span class="token punctuation">[</span><span class="token string">&#39;data-des&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">time</span><span class="token operator">:</span> key
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>localStorageKey<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">dotFromLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> ctmsStr <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>localStorageKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctmsStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ctmsStr<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>localStorageKey<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>添加 Vue 指令</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 入口JS文件 main.js</span>
<span class="token comment">// 引入Exposure类</span>
<span class="token comment">// exp就是那个全局唯一的实例</span>
<span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exposure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;exp-dot&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span> el<span class="token punctuation">,</span> <span class="token literal-property property">val</span><span class="token operator">:</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),P={href:"https://github.com/amandakelake/blog/issues/71",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.sohu.com/a/406045702_612370",target:"_blank",rel:"noopener noreferrer"},E=p(`<p><strong>添加指令</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-exp-dot</span> <span class="token attr-name">data-des</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>我是谁?<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="页面访问埋点" tabindex="-1"><a class="header-anchor" href="#页面访问埋点" aria-hidden="true">#</a> 页面访问埋点</h2><p>页面埋点即记录页面的访问量，涉及到的指标有PV（页面浏览量或点击量）、UV（统计1天内访问某站点的用户数）、IP（是指1天内多少个独立的IP浏览了页面）</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>单页面收集页面访问的思路：</p><ul><li><p>使用 <code>onpopstate </code> 监听 history 变化</p></li><li><p>监听 <code>onhashchange </code> hash 变化</p></li></ul><p>但是 history 模式下，调用 <code>pushState</code> 和 <code>replaceState</code> 是无法触发 <code>onpopstate</code>，思路需要对默认的 <code>pushState</code> 和 <code>replaceState</code> 进行改造</p><p>核心代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> historyPushState <span class="token operator">=</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">;</span>
<span class="token keyword">let</span> historyReplaceState <span class="token operator">=</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">;</span>
<span class="token comment">// 重写 pushState</span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function-variable function">pushState</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行原本的 pushState</span>
    <span class="token function">historyPushState</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 重写 replaceState</span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function-variable function">replaceState</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行原本的 replaceState</span>
    <span class="token function">historyReplaceState</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// do something</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>对 hash 的改变也是可以直接触发 <code>onpopstate</code> 事件的</p></div><p><strong>神策的实现源码</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addSinglePageEvent</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> current_url <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
    <span class="token keyword">var</span> historyPushState <span class="token operator">=</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">;</span>
    <span class="token keyword">var</span> historyReplaceState <span class="token operator">=</span> window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>pushState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 重写 pushState</span>
        window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function-variable function">pushState</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行原本的 pushState</span>
            <span class="token function">historyPushState</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行回调</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>current_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            current_url <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span>replaceState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 重写 replaceState</span>
        window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function-variable function">replaceState</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行原本的 replaceState</span>
            <span class="token function">historyReplaceState</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>history<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行回调</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>current_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
            current_url <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> singlePageEvent<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span>documentMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        singlePageEvent <span class="token operator">=</span> <span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        singlePageEvent <span class="token operator">=</span> historyPushState <span class="token operator">?</span> <span class="token string">&#39;popstate&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;hashchange&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 添加 hashchange/hashchange监听事件</span>
    <span class="token function">addEvent</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> singlePageEvent<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>current_url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        current_url <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="没使用路由的项目如果处理" tabindex="-1"><a class="header-anchor" href="#没使用路由的项目如果处理" aria-hidden="true">#</a> 没使用路由的项目如果处理</h3><p>有的项目没有配置路由，而是直接通过组件的显示和隐藏来控制页面的切换，那么正常的埋点方式就不能用了，这个时候只能手动进行页面访问的收集。实现方式有两种</p><p><strong>在切换页面的函数进行一次埋点</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">selected</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> moduleId<span class="token punctuation">,</span> code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> pageName <span class="token operator">=</span> code <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> moduleId<span class="token punctuation">;</span>

    <span class="token comment">/*对tab的切换进行埋点 当做是页面的跳转进行处理*/</span>
    sensors<span class="token punctuation">.</span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token string">&quot;autoTrackSinglePage&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">platForm</span><span class="token operator">:</span> pageName<span class="token punctuation">}</span> <span class="token punctuation">)</span>
    
      <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>menuComponent<span class="token punctuation">[</span>code<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">title</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
        <span class="token literal-property property">code</span><span class="token operator">:</span> code<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>缺点</strong></p><ul><li><p>这种方式只适用于页面切换的方式是在一个统一的入口</p></li><li><p>如果先收集了埋点，然后在页面切换前就报错了，那么就会产生误报</p></li></ul><p><strong>使用 Minxin</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> minxin <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>moduleId <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>moduleId<span class="token punctuation">)</span><span class="token punctuation">{</span>
            sensors<span class="token punctuation">.</span><span class="token function">quick</span><span class="token punctuation">(</span><span class="token string">&quot;autoTrackSinglePage&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token literal-property property">platForm</span><span class="token operator">:</span> pageName<span class="token punctuation">}</span> <span class="token punctuation">)</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>Minxin</code> 的关键点是在于如果区分当前组件是页面级别的组件还是普通的组件</p><h2 id="代码埋点" tabindex="-1"><a class="header-anchor" href="#代码埋点" aria-hidden="true">#</a> 代码埋点</h2><p>代码埋点又称为自定义埋点。具体含义是：在 SDK 初始化之后，对于每一个关注的事件，调用 <code>track()</code> 等相关接口，将采集的数据保存到发送队列中，然后按照一定的发送策略将数据发送到指定的服务端。例如：某个 <code>li</code> 元素被点击，如果想采集这个 <code>li</code> 元素的点击事件，就需要在 <code>li</code> 元素的 <code>click</code> 事件代码中采集数据</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><p>代码埋点有很多优点：</p><ol><li><p>精准控制埋点位置</p></li><li><p>灵活的自定义事件和属性，方便采集丰富的业务相关数据</p></li><li><p>可以满足精细化的分析需求</p></li></ol><p>代码埋点也有相应的缺点：</p><ol><li><p>埋点代价比较大，每一个控件的埋点都需要添加相应的代码，不仅工作量大，而且需要技术人员参与。</p></li><li><p>更新的代价比较大，每一次更新埋点方案，都必须修改代码</p></li><li><p>对代码的侵入太强，严重污染代码</p></li><li><p>所有前端埋点方案都会面临的数据传输时效性和可靠性的问题，这个问题只能通过在后端采集数据来解决了。</p></li></ol><p><strong>因此，可以知道代码埋点适用于需要精准控制埋点位置、灵活的自定义事件和属性等精细化需求的场景</strong></p><h2 id="无痕埋点" tabindex="-1"><a class="header-anchor" href="#无痕埋点" aria-hidden="true">#</a> 无痕埋点</h2><p><strong>无痕埋点 = 无埋点 = 全埋点 = 无代码埋点</strong></p><p>神策的全埋点说明：Web JS SDK 全埋点包括三种事件：Web 页面浏览、Web 元素点击、Web 视区停留<br> 所以无埋点不是只用于解决元素事件埋点，之所以放在这里只是强调 全埋点方案也是实现元素点击埋点的方案之一</p><p>所以无代码不是真的没有代码，而是SDK 集成一些埋点方法足以收集大部分场景下埋点信息，缩减了我们手工埋点的工作</p><p>比如前面我们说的 页面埋点方案，它的实现跟业务完全没什么相系，就是一个通用的解决方案，所以 SDK 集成这个方案后，我们项目就不需要额外实现页面埋点的收集了，所以就无埋点了</p><h3 id="收集元素" tabindex="-1"><a class="header-anchor" href="#收集元素" aria-hidden="true">#</a> 收集元素</h3><p><img src="`+k+`" alt=""></p><p>上图是神策开启全埋点配置后，看了下点击元素时的处理过程，可以发现收集数据就是 元素相关的信息. 比如标签名，属性，以及元素在整个 DOM 树的中位置等，也就是收集的东西完成是基于 <strong>DOM 元素</strong></p><p>那么问题来了，收集到 元素如何与用户的点击行为建立关系？ 此时就需要给元素建议唯一标识，通过这个唯一标识建立关系。 <strong>这个唯一标识就是 XPath</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTML元素 &lt;- 唯一标识 -&gt; 点击行为
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="xpath" tabindex="-1"><a class="header-anchor" href="#xpath" aria-hidden="true">#</a> XPath</h3><p><img src="`+d+`" alt=""></p><p>DOM 其实是个树形结构，XPath 根元素开始到当前元素的路径集合，同一个页面下，这个路径基本上是唯一的，所以通过这个集合来做一个元素标识</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>XPath：/html/body/div/div/div/ul[1]/li[3]/a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了身份标识之后，之后如果想要知道某个元素的点击量，那么可以根据这个元素的 XPath 从收集的数据中进行过滤和筛选，然后得到埋点结果</p><p><strong>获取 XPath</strong></p><ol><li><p>event.composedPath</p></li><li><p>遍历 parentNode 生成一个 XPath</p></li></ol><h3 id="dom-收集" tabindex="-1"><a class="header-anchor" href="#dom-收集" aria-hidden="true">#</a> DOM 收集</h3><p>直接收集页面所有的点击元素，实现思路则是给 <code>document</code> 统一注册一个点击事件，收集所有元素点击事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键代码在于设置事件的传播方式 <code>useCapture: true</code>（捕获方式），防止点击事件被内部元素冒泡阻止</p><p>无痕埋点功能的实现思路就介绍完了</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>所以可以发现无痕埋点的实现关键不在如果收集元素，而后期的数据清理、筛选才是无痕埋点的关键步骤</p></div><h3 id="优缺点-1" tabindex="-1"><a class="header-anchor" href="#优缺点-1" aria-hidden="true">#</a> 优缺点</h3><p><strong>优点：</strong></p><ol><li><p>自动采集数据，无需开发人员代码埋点</p></li><li><p>收集用户的所有端上行为，很全面</p></li><li><p>可以回溯，也就是后期运营空想想到哪一处的点击量，也是可以拿到的，不用重新收集</p></li></ol><p><strong>缺点：</strong></p><ol><li><p>不可见行为数据无法采集</p></li><li><p>和业务强相关的属性信息采集困难</p></li><li><p>数据量可能会很大，占用存储空间，所以一般来说会做下收集限制</p></li><li><p>依赖 DOM 结构，所以并不是很可靠</p></li></ol><p><strong>因此，可以知道全埋点适用于以较小的埋点代价采集尽可能多的用户行为数据的场景</strong></p><h2 id="可视化全埋点" tabindex="-1"><a class="header-anchor" href="#可视化全埋点" aria-hidden="true">#</a> 可视化全埋点</h2><p>可视化全埋点为埋点工作提供了一个可视化的操作工具和界面，让埋点变得更加显而易见和易于操作，只需要简单的选择关注的按钮，并设置相应的采集属性，即可完成埋点工作</p><p><img src="`+v+'" alt=""></p><p>这是神策可视化埋点界面，其实就是在埋点平台，加载我们要设置埋点的项目，然后点击元素的时候通过 埋点平台，对当前元素进行基本设置，然后保存到后台</p><p>可视化埋点其实就是对无痕埋点的一种优化， 前面说到无痕埋点需要后期通过 XPath 对数据进行清洗和过滤，可视化圈选其实就是通过圈选功能给元素设置埋点，也包含了XPath，这样结合无痕埋点，就可以过滤出圈选的数据了</p><p>所以可视化埋点的这块主要看下圈选这部分的功能实现</p><ol><li><p>埋点管理页使用 iframe 加载需要埋点的页面</p></li><li><p>加载的页面包含 SDK的功能 ，所以埋管理页会和页面建立通信规则，使用 postMessage</p></li><li><p>当子页面在接收到 圈选 的消息时，在 dom 中插入一段 style 标签，用于圈选时添加选中样式</p></li><li><p>点击元素时添加高亮样式同时将当前 dom 的 xpath 等元素信息发送给父页面并存储</p></li><li><p>结合无痕埋点数据拿这些 xpath 去清洗、过滤就能拿到我们想要的数据了</p></li></ol><p><strong>优缺点</strong></p><p>可视化埋点和无痕埋点其实挺像，优缺点也是大同小异</p><p>优点：</p><ol><li><p>自动采集数据，无需开发人员代码埋点</p></li><li><p>可以做到按需配置，不会像全埋点那样产生大量的无用数据</p></li><li><p>后期数据分析成本低</p></li><li><p>运营人员自己就可以进行埋点设置</p></li></ol><p>缺点</p><ol><li><p>不可见行为数据无法采集</p></li><li><p>和业务强相关的属性信息采集困难</p></li><li><p>也是依赖 DOM 结构，如果页面结构发生变化的时候，可能就需要进行部分重新配置</p></li></ol><h3 id="babel-埋点" tabindex="-1"><a class="header-anchor" href="#babel-埋点" aria-hidden="true">#</a> Babel 埋点</h3>',73),q=p(`<p>确定思路：</p><ol><li><p>根据函数块级注释判断是否需要自动埋点</p></li><li><p>引入埋点函数文件</p></li><li><p>函数插装：将埋点方法插入需要埋点的函数</p></li></ol><p>一个Babel插件的架子:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">autoTracker</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token literal-property property">types</span><span class="token operator">:</span> t<span class="token punctuation">,</span> template<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> autoTracker<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现 Babel 插件其实也就是一个函数，它会将 api 通过参数的形式传回来<br> 它会返回一个对象，对象中有一个 <code>visitor</code> 属性，这个属性中声明的函数会在 <code>transform</code> 的过程中被调用</p><p>既然我们需要根据函数的注释来判断是否需要自动埋点，那么首先我们得先确认，函数有哪些形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 函数声明</span>
<span class="token keyword">function</span> <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 函数表达式</span>
<span class="token keyword">const</span> <span class="token function-variable function">tracker</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 箭头函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">tracker</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 类方法</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们在AST中所对应的类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>函数声明 <span class="token operator">=</span> FunctionDeclaration

函数表达式 <span class="token operator">=</span> FunctionExpression

箭头函数 <span class="token operator">=</span> ArrowFunctionExpression

类方法 <span class="token operator">=</span> ClassMethod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的插件只需处理这些类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 多个类型我们使用|来分隔</span>
<span class="token keyword">function</span> <span class="token function">autoTracker</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span><span class="token literal-property property">types</span><span class="token operator">:</span> t<span class="token punctuation">,</span> template<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
            <span class="token string">&#39;FunctionDeclaration|ArrowFunctionExpression|FunctionExpression|ClassMethod&#39;</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> autoTracker<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到方法中有两个参数：</p><ul><li><p>path：path 对象中维护了相邻节点的关系，可以通过 path 属性拿到父级和兄弟节点，path 属性中还提供了增删改 AST 的方法。</p></li><li><p>state：多个AST节点间需要进行数据传递，则通过 state</p></li></ul><h3 id="根据函数块级注释判断是否需要自动埋点" tabindex="-1"><a class="header-anchor" href="#根据函数块级注释判断是否需要自动埋点" aria-hidden="true">#</a> 根据函数块级注释判断是否需要自动埋点</h3>`,14),A={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},C=p('<p><img src="'+m+'" alt=""></p><p><img src="'+b+'" alt=""></p><p><img src="'+h+'" alt=""></p><p><img src="'+g+`" alt=""></p><p>从上面的例子可以看到块注释的 AST 类型是 <code>leadingComments</code>，而且函数类型的不同的 <code>leadingComments</code> 位置也不同</p><ul><li><p>函数声明和类函数的 <code>leadingComments</code> 就在函数的 AST 节点下，可以使用path直接获取</p></li><li><p>函数表达式和箭头函数的 <code>leadingComments</code> 属性在它们的父级节点，因为他们是通过变量声明的方式赋值函数的，也就是我们的注释其实是在 <code>VariableDeclarator</code> 节点下</p><p>因此对于 函数表达式和箭头函数 我们需要通过父级节点去查找</p></li></ul><p>查找块节点的代码为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">autoTracker</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>template<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 思路：</span>
  <span class="token comment">// 1.根据注释标题判断是否是需要自动埋点的函数，函数类型：函数声明，箭头函数，函数表达式，类方法</span>
  <span class="token comment">// 2. 这一步先获取函数注释</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string">&#39;FunctionDeclaration|ClassMethod|ObjectMethod|ArrowFunctionExpression|FunctionExpression&#39;</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> comment <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;leadingComments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">setAutoTracker</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> template<span class="token punctuation">,</span> comment<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// export Fn(){}、函数表达式等</span>
          path<span class="token punctuation">.</span><span class="token function">findParent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">parentPath</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Program&#39;</span> <span class="token operator">||</span> parentPath<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;BlockStatement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">const</span> findComment <span class="token operator">=</span> parentPath<span class="token punctuation">.</span>node<span class="token punctuation">.</span>leadingComments
            <span class="token keyword">if</span><span class="token punctuation">(</span>findComment<span class="token operator">&amp;&amp;</span>findComment<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">setAutoTracker</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> template<span class="token punctuation">,</span> findComment<span class="token punctuation">)</span>
              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="判断注释并引入埋点" tabindex="-1"><a class="header-anchor" href="#判断注释并引入埋点" aria-hidden="true">#</a> 判断注释并引入埋点</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">setAutoTracker</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> template<span class="token punctuation">,</span> commentNode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 遍历注释</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> comment <span class="token keyword">of</span> commentNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 提取注释</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span>  comment
       <span class="token comment">// 判断注释是否包含 autoTracker</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\s*&#39;</span><span class="token operator">+</span><span class="token constant">AUTOTRACKER</span><span class="token operator">+</span><span class="token string">&#39;\\\\s*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 引入埋点函数文件并获获取埋点函数名</span>
            <span class="token keyword">const</span> trackerImportName  <span class="token operator">=</span> <span class="token function">trackerImportDeclaration</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断是否已经添加了埋点函数，防止重复添加</span>
            <span class="token keyword">const</span> fistNode <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>
                    fistNode
                    <span class="token operator">&amp;&amp;</span> fistNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExpressionStatement&#39;</span>
                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
                        <span class="token punctuation">(</span>fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Identifier&#39;</span> <span class="token operator">&amp;&amp;</span> fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name <span class="token operator">===</span> trackerImportName<span class="token punctuation">)</span>
                        <span class="token operator">||</span> <span class="token punctuation">(</span>fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;MemberExpression&#39;</span> <span class="token operator">&amp;&amp;</span> fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>object<span class="token punctuation">.</span>name <span class="token operator">===</span> trackerImportName<span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 添加埋点函数</span>
                path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>trackerImportName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.call(this)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>遍历 commentNode，判断注释是否包含 autoTracker</p></li><li><p>然后判断是否已经添加了埋点函数，防止重复添加</p><ul><li><p><code>fistNode.type === &#39;ExpressionStatement&#39;</code>: 表示首行的语句是否是函数类型（即调用函数）</p></li><li><p><code>istNode.expression.callee.type === &#39;Identifier&#39;</code>：如果是直接调用了函数类型为 <code>Identifier</code>，如 <code>tracker()</code>，此时通过 <code>fistNode.expression.callee.name</code> 获取该函数名</p></li><li><p><code>fistNode.expression.callee.type === &#39;MemberExpression&#39;</code>：如果是带有修饰符调用的函数类型为 <code>MemberExpression</code>，如 <code>tracker.call()</code>，此地通过 <code>fistNode.expression.callee.object.name</code> 获取函数名</p></li></ul></li><li><p>往 body 中添加埋点方法</p></li></ul><h3 id="引入埋点函数文件" tabindex="-1"><a class="header-anchor" href="#引入埋点函数文件" aria-hidden="true">#</a> 引入埋点函数文件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> importModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/helper-module-imports&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 引用埋点函数</span>
<span class="token keyword">function</span> <span class="token function">trackerImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// state.trackerImportName 为了防止重复添加</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>trackerImportName<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> pathName <span class="token operator">=</span> state<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>pathName<span class="token punctuation">;</span> <span class="token comment">// 获取埋点函数的文件路径，pathName 是配置插件时的参数</span>
    state<span class="token punctuation">.</span>trackerImportName  <span class="token operator">=</span> importModule<span class="token punctuation">.</span><span class="token function">addDefault</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pathName<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// If &#39;hintedName&#39; exists in scope, the name will be &#39;_tracker2&#39;, &#39;_tracker3&#39;, ...</span>
      <span class="token literal-property property">nameHint</span><span class="token operator">:</span> path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">generateUid</span><span class="token punctuation">(</span><span class="token string">&#39;tracker&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> state<span class="token punctuation">.</span>trackerImportName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>通过 <code>state.opts.pathName</code> 拿到埋点方法所在文件的路径（ <code>pathName</code> 是我们在配置 babel 插件时需要传入的参数）</p></li><li><p>通过 <code>@babel/helper-module-imports</code> 包将埋点方法引入进来，调用引入方法后会返回一个 <code>name</code>，表达导出的名称，该名称也就是我们后面需要插入埋点函数时所用到的函数名。</p></li><li><p>为了防止重复添加所以将获取到的埋点函数名缓存到 <code>state</code> 中</p></li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p><code>babel.config.js</code> 引入插件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;./babel-auto-tracker&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;pathName&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./src/utils/tracker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 配置埋点函数的路径</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加埋点函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">tracker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;上传埋点数据：&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*autoTracker*/</span>
<span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>

<span class="token comment">// 打包后</span>
<span class="token comment">/*autoTracker*/</span>
<span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">tracker</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),M={href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md#toc-check-if-an-identifier-is-referenced",target:"_blank",rel:"noopener noreferrer"},K={href:"https://juejin.cn/post/7026994278664503304#heading-0",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.npmjs.com/package/babel-plugin-code-inject/v/1.3.0",target:"_blank",rel:"noopener noreferrer"},F=p(`<h3 id="完整代码" tabindex="-1"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> importModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@babel/helper-module-imports&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">AUTOTRACKER</span> <span class="token operator">=</span> <span class="token string">&#39;autoTracker&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 引用埋点函数</span>
<span class="token keyword">function</span> <span class="token function">trackerImportDeclaration</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>trackerImportName<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> pathName <span class="token operator">=</span> state<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>pathName<span class="token punctuation">;</span> <span class="token comment">// 获取埋点函数的文件路径，pathName 是配置插件时的参数</span>
        state<span class="token punctuation">.</span>trackerImportName  <span class="token operator">=</span> importModule<span class="token punctuation">.</span><span class="token function">addDefault</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pathName<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token comment">// If &#39;hintedName&#39; exists in scope, the name will be &#39;_tracker2&#39;, &#39;_tracker3&#39;, ...</span>
            <span class="token literal-property property">nameHint</span><span class="token operator">:</span> path<span class="token punctuation">.</span>scope<span class="token punctuation">.</span><span class="token function">generateUid</span><span class="token punctuation">(</span><span class="token string">&#39;tracker&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> state<span class="token punctuation">.</span>trackerImportName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">setAutoTracker</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> template<span class="token punctuation">,</span> commentNode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> comment <span class="token keyword">of</span> commentNode<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 提取注释</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span>  comment
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\s*&#39;</span><span class="token operator">+</span><span class="token constant">AUTOTRACKER</span><span class="token operator">+</span><span class="token string">&#39;\\\\s*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 引入埋点函数</span>
            <span class="token keyword">const</span> trackerImportName  <span class="token operator">=</span> <span class="token function">trackerImportDeclaration</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 函数插装：将埋点函数插入</span>
            <span class="token keyword">const</span> fistNode <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>
                    fistNode
                    <span class="token operator">&amp;&amp;</span> fistNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;ExpressionStatement&#39;</span>
                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
                        <span class="token punctuation">(</span>fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Identifier&#39;</span> <span class="token operator">&amp;&amp;</span> fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>name <span class="token operator">===</span> trackerImportName<span class="token punctuation">)</span>
                        <span class="token operator">||</span> <span class="token punctuation">(</span>fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;MemberExpression&#39;</span> <span class="token operator">&amp;&amp;</span> fistNode<span class="token punctuation">.</span>expression<span class="token punctuation">.</span>callee<span class="token punctuation">.</span>object<span class="token punctuation">.</span>name <span class="token operator">===</span> trackerImportName<span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>trackerImportName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.call(this)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">function</span> <span class="token function">autoTracker</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>template<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 思路：</span>
    <span class="token comment">// 1.根据注释标题判断是否是需要自动埋点的函数，函数类型：函数声明，箭头函数，函数表达式，类方法</span>
    <span class="token comment">// 2.引入埋点函数文件</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">visitor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;FunctionDeclaration|ClassMethod|ObjectMethod|ArrowFunctionExpression|FunctionExpression&#39;</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> comment <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;leadingComments&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>comment<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token function">setAutoTracker</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> template<span class="token punctuation">,</span> comment<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    path<span class="token punctuation">.</span><span class="token function">findParent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">parentPath</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Program&#39;</span> <span class="token operator">||</span> parentPath<span class="token punctuation">.</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;BlockStatement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token boolean">false</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">const</span> findComment <span class="token operator">=</span> parentPath<span class="token punctuation">.</span>node<span class="token punctuation">.</span>leadingComments
                        <span class="token keyword">if</span><span class="token punctuation">(</span>findComment<span class="token operator">&amp;&amp;</span>findComment<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token function">setAutoTracker</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> template<span class="token punctuation">,</span> findComment<span class="token punctuation">)</span>
                            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token boolean">false</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> autoTracker<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据缓存" tabindex="-1"><a class="header-anchor" href="#数据缓存" aria-hidden="true">#</a> 数据缓存</h2><p>大部分 Web JS 数据采集使用的是即时采集、即时发送的策略，没有使用本地缓存。这样减少了复杂的缓存、读取和发送的控制流程。但是，无法避免的是当网络情况不佳时，数据发送失败的问题。数据一旦发送失败，由于没有缓存的逻辑，就会造成数据丢失。</p><p>另外，一个常见的场景是：关闭页面时，有发送数据的需求。例如：点击了某个按钮，跳转到另外一个页面。此时，由于发送数据的同时切换页面引起浏览器环境的破坏和中断，导致发送数据的请求有未发送出去的风险，从而导致了数据的丢失。</p><p>基于以上原因，SDK 增加了缓存模式。数据产生后，首先缓存在浏览器的 <code>localStorage</code> 中。对于存储的数据可以配置发送策略：默认是每 6 秒发送一次数据，或者当存储数据达到 6 条时发送一次数据。如果数据发送不成功，会默认重新发送。直到发送成功后，才会从 <code>localStorage</code> 中移除。这样，可以有效的降低一些数据发送过程中的丢失问题。</p><p>不过，由于 <code>localStorage</code> 的存储空间有限制，默认只能存储 200 条数据，超过的数据会按照默认的即时 img 请求发送数据。由于浏览器本身不具有固定设备内存可以使用，<code>localStorage</code> 也有存储数据的限制，所以无法大规模缓存数据，只能限定缓存部分数据</p><p><strong>数据存储的形式不止一种，为什么 SDK 选择 localStorage ？</strong></p><ul><li><p>cookie：因为存储的数据量不能超过 4K，数据量较小，且 cookie 会被带在 http header 中</p></li><li><p>sessionStorage：只可以存储 session 内的数据</p></li><li><p>IndexedDB：NoSQL 数据库，本地可以存储 250M 以上的数据。数据量很大，但是性能一般，在 500 ms 内，且操作相对麻烦</p></li><li><p>localStorage：可以理解为是一个文件存储，可以大约存储 5M 的数据，不同浏览器实现不一致，这个数据量比较合适</p></li></ul><p>综合考虑后，针对用户行为这样的数据，localStorage 相对合适。同步的 API 可以确保数据的一致，同时性能好，频繁写入几乎感觉不到延时。</p><h2 id="数据发送" tabindex="-1"><a class="header-anchor" href="#数据发送" aria-hidden="true">#</a> 数据发送</h2><h3 id="发送的方式" tabindex="-1"><a class="header-anchor" href="#发送的方式" aria-hidden="true">#</a> 发送的方式</h3><p>常见的数据发送方式有 img 发送、ajax 发送和 beacon 发送，下面对这几种发送方式进行简要的介绍</p><p><strong>img 发送</strong></p><p>默认使用 img 发送数据。对于跨域的兼容比较好，发送的形式就是创建一个 <code>img</code> 元素，<code>src</code> 带上所有要发送的数据。执行过程无阻塞，不会影响用户体验，而且相对与 XMLHttpRequest 对象发送 GET 请求，性能上更好。局限性是 <code>get</code> 请求所携带的数据大小是有限的</p><p><strong>ajax 发送</strong></p><p>常见的一种请求方式，为了不影响业务流程，默认是异步发送数据。采用的是 post 形式发送数据，数据较为安全，且发送数据的大小基本不受限制</p><p><strong>beacon 发送</strong></p><p>当关闭页面发送数据的时候，经常受到页面容器 destroy 的影响，会导致数据来不及发送，进而产生丢失的问题。beacon 是浏览器的新发送策略，可以避免页面容器 destroy 时数据发送丢失的问题。不过，目前该功能还未普及</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>批量发送是采用 ajax post 异步形式发送数据的。批量发送，是建立在上面提到的缓存数据的基础上。SDK 默认是选择立即发送的 img 方式</p></div><p>当通过配置项，将发送修改为批量发送模式时，会将数据先进行 localstorage 缓存，然后一次性将多条数据整合到一起，通过一个请求发送到指定的服务端。由于数据体相对来说比较大，默认使用的是 ajax post 异步发送的方式</p><table><thead><tr><th style="text-align:left;">场景</th><th style="text-align:center;">img</th><th style="text-align:right;">Ajax</th><th style="text-align:right;">sendBeacon</th></tr></thead><tbody><tr><td style="text-align:left;">https 下使用请求</td><td style="text-align:center;">部分支持</td><td style="text-align:right;">不支持</td><td style="text-align:right;">不支持</td></tr><tr><td style="text-align:left;">跨域</td><td style="text-align:center;">完全支持</td><td style="text-align:right;">部分支持</td><td style="text-align:right;">支持</td></tr><tr><td style="text-align:left;">关闭页面发送数据</td><td style="text-align:center;">效果差</td><td style="text-align:right;">效果很差</td><td style="text-align:right;">效果好</td></tr><tr><td style="text-align:left;">window.onload 问题</td><td style="text-align:center;">部分支持</td><td style="text-align:right;">支持</td><td style="text-align:right;">支持</td></tr><tr><td style="text-align:left;">请求方式</td><td style="text-align:center;">仅 GET</td><td style="text-align:right;">多</td><td style="text-align:right;">仅POST</td></tr><tr><td style="text-align:left;">浏览器兼容性</td><td style="text-align:center;">完成支持</td><td style="text-align:right;">基本支持</td><td style="text-align:right;">小部分支持</td></tr><tr><td style="text-align:left;">Cookie 携带</td><td style="text-align:center;">同域名携带</td><td style="text-align:right;">可配置</td><td style="text-align:right;">同域名携带</td></tr></tbody></table><h3 id="发送的顺序" tabindex="-1"><a class="header-anchor" href="#发送的顺序" aria-hidden="true">#</a> 发送的顺序</h3><p>SDK 采集的是网页端的数据，用户的行为数据通过网络请求发送到指定的服务端。但是，网络请求是有波动的。如果是先后连在一起触发的数据，可能会出现先发后到的情况。<br> 比如：点击按钮跳转页面，会先发送的一个点击事件，紧接着跳入新页面，会发送一个页面浏览事件。事实上，经常会出现用户的行为序列中点击事件和页面浏览事件颠倒的问题。<br> 直观来看，用户行为会非常不合理：先触发了后一个页面的页面浏览事件，接下来的行为却是前一个页面的某个按钮的点击事件</p><p>那如何解决这个问题呢？答案是构建发送队列。发送队列有两个优点：</p><ol><li><p>为了不影响用户的业务流程，SDK 一般采用的是异步加载的方式插入页面。因此，会有一些页面一打开就需要触发的事件，在触发时 SDK 还未正常引入核心源码并完成初始化。此时，SDK 就会将触发的事件存入发送队列中。等待 SDK 源码加载完毕并初始化成功后，立即执行发送队列。这样保证了数据不会丢失，解决了异步加载 SDK 的问题</p></li><li><p>保证用户行为数据按照正确的顺序入库，形成正确的行为序列。这是如何做到的呢？SDK 在发送队列中的数据时，默认会按照顺序发送，当前一条数据返回发送成功的状态后，依次发送下一条数据，这保证了大部分正常流程的数据发送正确。但是，万一前面的数据发送卡住了，一直没有状态返回怎么办？SDK 的解决方案是设置超时时间：</p></li></ol><ul><li><p>queue_timeout: 队列发送超时时间，默认值 300 毫秒，如果数据发送时间超过 queue_timeout 还未返回结果，会强制发送下一条数据</p></li><li><p>datasend_timeout: 数据发送超时时间，默认值 3000 毫秒，如果数据发送超过 datasend_timeout 还未返回结果，会强制取消该请求</p></li></ul><p><strong>构建发送队列可以解决 Web 端行为数据发送顺序错乱的问题</strong></p>`,28),R={href:"https://juejin.cn/post/6844904152095522824#heading-1",target:"_blank",rel:"noopener noreferrer"},L={href:"https://juejin.cn/user/2893570337413384/posts",target:"_blank",rel:"noopener noreferrer"};function B(z,X){const t=e("ExternalLinkIcon"),o=e("RouterLink");return i(),l("div",null,[f,n("ol",null,[n("li",null,[n("p",null,[s("使用 "),n("a",w,[s("Intersection Observer API"),a(t)]),s(" 实例化一个全局 "),x,s("，将需要收集曝光埋点的元素收集到 "),_,s(" 观察列表中， （这里会用Vue的指令来实现）")])]),S,j,N,T]),I,n("blockquote",null,[n("p",null,[n("a",P,[s("前端曝光数据埋点——IntersectionObserver+vue指令"),a(t)])])]),n("blockquote",null,[n("p",null,[n("a",D,[s("大厂经验（一）：一套 Web 自动曝光埋点技术方案"),a(t)])])]),E,n("p",null,[a(o,{to:"/Node/Webpack/Babel-Loader.html"},{default:u(()=>[s("Babel-Loader")]),_:1}),s(" 之前有大致的了解过，现在实现可以帮我们注册埋点方法的 Babel 插件")]),q,n("p",null,[s("我们通过 "),n("a",A,[s("astexplorer"),a(t)]),s(" 来查看，上面四种函数注释的AST节点类型是什么：")]),C,n("p",null,[n("a",M,[s("Babel 插件手册"),a(t)])]),n("p",null,[n("a",K,[s("手撸一个babel自动埋点插件"),a(t)])]),n("p",null,[n("a",O,[s("babel-plugin-code-inject"),a(t)])]),F,n("p",null,[n("a",R,[s("神策分析 Web JS SDK 功能介绍"),a(t)])]),n("p",null,[n("a",L,[s("神策技术社区"),a(t)])])])}const V=c(y,[["render",B],["__file","埋点方案.html.vue"]]);export{V as default};
