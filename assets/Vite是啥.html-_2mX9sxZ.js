import{_ as p,r as t,o,c as i,b as n,d as e,a,e as c}from"./app-QMonxybV.js";const l="/lanjz/assets/esmodule-BYRJ6K6z.png",d="/lanjz/assets/vs_1-nZRRTyrw.png",r="/lanjz/assets/vs_2-A0EYj5kB.png",u={},v=n("h1",{id:"vite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite","aria-hidden":"true"},"#"),e(" Vite")],-1),m={href:"https://cn.vitejs.dev/guide/",target:"_blank",rel:"noopener noreferrer"},k=c(`<p>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能，如速度快到惊人的 模块热更新（HMR）。</p><p>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源</p><p>Vite 有两个重点要特点：</p><ol><li><p>极速的服务启动</p></li><li><p>轻量快速的热重载</p></li></ol><p>Vite 快的原因？</p><p>Vite 以 原生ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。所以先了解一下 原生ESM</p><h2 id="原生esm" tabindex="-1"><a class="header-anchor" href="#原生esm" aria-hidden="true">#</a> 原生ESM</h2><p>先来个例子：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--index.html--&gt;</span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/src/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> doSomeThing <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./utils.js&quot;</span><span class="token punctuation">;</span>

<span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// utils.js</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomeThing&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器打后控制台能正常输出了 <code>doSomeThing</code></p><p>控制台 network 的信息如下：</p><p><img src="`+l+`" alt=""></p><p>可以发现对于 <code>main.js</code> 中的 <code>import { doSomeThing } from &quot;./utils.js&quot;</code></p><p>浏览器会发起了一个 <code>get</code>请求，下载 <code>utils.js</code> 文件并获取其中导出的模块并执行，也就是说不需要任何浏览器直接识别了 <code>import</code></p><h3 id="vite-app" tabindex="-1"><a class="header-anchor" href="#vite-app" aria-hidden="true">#</a> vite-app</h3><p>回头看下使用 <code>vite-app</code> 创建的项目，浏览器是如何加载的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台 network 的信息如下：</p><ol><li>首先加载：<code>http://localhost:3000/src/main.js</code></li></ol><p>下载下来的内容为：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;/node_modules/.vite/vue.js?v=80d8618d&#39;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;/src/App.vue&#39;</span>

<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到源码中的 <code>import { createApp } from &#39;vue&#39;</code> 变成了 <code>import { createApp } from &#39;/node_modules/.vite/vue.js?v=80d8618d&#39;</code></p><p>这是为了让浏览器把资源路径定位到 <code>node_modules</code> 中，准确下载到对应的模块</p><ol start="2"><li><p>之后加载：<code>http://localhost:3000/node_modules/.vite/vue.js</code>，获取 <code>createApp</code> 这个方法</p></li><li><p>之后再加载： <code>http://localhost:3000/src/App.vue</code>，获取 App</p></li><li><p>最后使用 <code>createApp</code> 创建应用并挂载节点</p></li></ol><p>vite 利用 ES module，把 “构建 vue 应用” 这个本来需要通过 webpack 打包后才能执行的代码直接放在浏览器里执行，这么做是的好外就是：<strong>去掉打包步骤</strong> 和 <strong>实现按需加载</strong></p><h2 id="去掉打包步骤" tabindex="-1"><a class="header-anchor" href="#去掉打包步骤" aria-hidden="true">#</a> 去掉打包步骤</h2><p>打包的概念是开发者利用打包工具以一定规则读取模块的代码，对这些模块进行翻译转换，组成形成 bundle，以便在不支持模块化的浏览器里使用。webpack 的运行就离不开打包这个环节，先回顾一下 Webpack 的运行流程：</p><ul><li><p>[初始化参数]：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</p></li><li><p>[开始编译]：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</p></li><li><p>[确定入口]：根据配置中的 entry 找出所有的入口文件</p></li><li><p>[编译模块]：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</p></li><li><p>[完成模块编译]：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</p></li><li><p>[输出资源]：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</p></li><li><p>[输出完成]：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</p></li></ul><p>在 webpack 的启动和和每次热更新的过程中，模块的编译都需要花费很多的时间</p><p><strong>vite 利用浏览器原生支持模块化导入这一特性，省略了对模块的编译和组装工作，所以打包这一步就可以省略了</strong></p><h2 id="实现按需打包" tabindex="-1"><a class="header-anchor" href="#实现按需打包" aria-hidden="true">#</a> 实现按需打包</h2><p>前面说到，webpack 会将各模块提前打包进 bundle 里，在不进行任何的处理的情况，webpack 会将所以的模块打包在一起——不管这个模块的代码是否有被执行到，所以往往一个 bundle 文件会很大，并且随着项目越来越大打包后的 bundle 也越来越大</p><p>为了解决这个问题，开发者会使用动态 <code>import()</code> 的方式将模块进行分离，实现按需模块（ 但被分离的模块依然需要提前编译和打包)，又或者使用 teaserPlugin 进行代码压缩或 tree shaking 等方式尽力得去减小代码体积，然而这些方式都不如 vite 的优雅，<strong>vite 可以只在某个模块被 <code>import</code> 时才去引入它，并且不需要提前打包</strong></p><h2 id="vite如何处理esm" tabindex="-1"><a class="header-anchor" href="#vite如何处理esm" aria-hidden="true">#</a> vite如何处理ESM</h2><p>通过上文第一个直接使用 ES module 的例子可以发现对于 EMS 模块浏览器是会使用 http 请求的方式去拿到模块，但是这种方法只能识别符合 EMS 的模块，对于其它类型的模块是不能直接使用的，所以 vite 启动时也是启动了一个 web server 去代理这些模块，vite 通过对请求路径的劫持获取资源并对这些模块做了特殊处理</p><h3 id="node-module路径处理" tabindex="-1"><a class="header-anchor" href="#node-module路径处理" aria-hidden="true">#</a> node_module路径处理</h3><p>上文在 vite-app 粟子中有提到源码中的 <code>import { createApp } from &#39;vue&#39;</code> 变成了 <code>import { createApp } from &#39;/node_modules/.vite/vue.js?v=80d8618d&#39;</code></p><p>在开发时对于 <code>node_modules中</code> 的模块，我们是以绝对路径的方式去获取，但是浏览器不知道，所以 vite 会对使用了绝对路径的 <code>import</code>，将路径重写成了 <code>node_modules</code> 目录下面</p><h3 id="非ems模块的处理" tabindex="-1"><a class="header-anchor" href="#非ems模块的处理" aria-hidden="true">#</a> 非EMS模块的处理</h3><p>既然 Vite 的模块加载是基于 ESM 的，可是现在很多的模块都是已经编译成了 cjs 的形式，对于这种形式的模块，Vite 引用时将不能正常访问，为了处理这个问题 Vite 加入了 <code>optimize</code> 命令，只需要在 <code>vite.config.js</code> （vite 配置文件）中，配置 <code>optimizeDeps</code> 对象，在 include 数组中添加要处理的模块名即可</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">optimizeDeps</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的配置 vite 在执行 <code>runOptimize</code> 的时候中会使用 <code>roolup</code> 对 <code>lodash</code> 包重新编译，将编译成符合 esm 模块规范的新的包放入 <code>node_modules</code> 下的 <code>.vite_opt_cache</code> 中，然后配合 <code>resolver</code> 对 <code>lodash</code> 的导入进行处理：使用编译后的包内容代替原来 <code>lodash</code> 的包的内容，这样就解决了 vite 中不能使用 cjs 包的问题。</p><h3 id="非类型的模块的处理" tabindex="-1"><a class="header-anchor" href="#非类型的模块的处理" aria-hidden="true">#</a> 非类型的模块的处理</h3><p>使用原生的 EMS 只是让浏览器自己支持 <code>import</code> JS模块，但是实际开发还存在如 <code>css</code>、<code>less/scss</code>、<code>vue</code> 等形式的模块，对于这类的模块 Vite 都配置的插件这些模块进行转换，但是这类的模块仍在加载时才进行处理的</p><h2 id="vs-webpack" tabindex="-1"><a class="header-anchor" href="#vs-webpack" aria-hidden="true">#</a> VS Webpack</h2><p>之前对 Vite 有了大致之后，就很容易捊清楚跟 Webpack 的区别了</p><p>Webpack 原理图</p><p><img src="`+d+'" alt=""></p><p>Vite 原理图</p><p><img src="'+r+'" alt=""></p><p><strong>Webpack</strong></p><ul><li><p>识别入口-&gt;逐层识别依赖-&gt;分析/转换/编译/输出代码-&gt;打包后的代码</p></li><li><p>Webpack 需要一个打包的过程，包括在 HMR 方面，即改动了一个模块，Webpack 也是需要将该模块的相关依赖模块全部编译一次</p></li><li><p>webpack先打包，再启动开发服务器，请求服务器时直接给予打包后的结果</p></li></ul><p><strong>Vite</strong></p><ul><li><p>vite是直接启动开发服务器，请求哪个模块再对该模块进行编译，真正实现了按需加载模块，极大的缩减了编译时间</p></li><li><p>vite 直接利用现代浏览原生支持 ES Module 的特性进行模块加载，省去模块编译过程</p></li></ul><p><strong>这两点也就是 vite 比 webpack 快的主要原因</strong></p><h3 id="vite-的缺点" tabindex="-1"><a class="header-anchor" href="#vite-的缺点" aria-hidden="true">#</a> Vite 的缺点</h3><ul><li><p>开发与生产环境构建结果不一致的风险；</p></li><li><p>项目生态存在非 ES import 模块化包而导致大量适配成本的风险</p></li></ul><p>虽然在开发环境可以使用特定的浏览器进行快速开发，但在生产环境下仍需要考虑浏览的兼容性和差异性，所以也是要像 Webpack 进行打包工作，目前因为生态的关系 Vite 生产环境的构建还是不如 Webpack 完善</p>',60),h={href:"https://jishuin.proginn.com/p/763bfbd29d7f",target:"_blank",rel:"noopener noreferrer"};function g(b,_){const s=t("ExternalLinkIcon");return o(),i("div",null,[v,n("p",null,[n("a",m,[e("Vite"),a(s)]),e(" (发音 /vit/) 是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：")]),k,n("p",null,[n("a",h,[e("深入 vite 原理：尤大最新力作到底是如何实现的？"),a(s)])])])}const j=p(u,[["render",g],["__file","Vite是啥.html.vue"]]);export{j as default};
